
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002a46  00002ada  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006e  0080006e  00002ae8  2**0
                  ALLOC
  3 .stab         00002b14  00000000  00000000  00002ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c0  00000000  00000000  000055fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a350  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_1>
       8:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ee 13 	call	0x27dc	; 0x27dc <main>
      8a:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_enuEnable>:
#include "../../Libirarys/ErrorStates.h"
#include "../../Libirarys/StdTypes.h"

#include "GIE_privte.h"
ES_t GIE_enuEnable()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01
     SREG_REG |= (1<<7);
     b52:	af e5       	ldi	r26, 0x5F	; 95
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ef e5       	ldi	r30, 0x5F	; 95
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	80 68       	ori	r24, 0x80	; 128
     b5e:	8c 93       	st	X, r24
	return Local_enuErrorState;
     b60:	89 81       	ldd	r24, Y+1	; 0x01

}
     b62:	0f 90       	pop	r0
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <GIE_enuDisable>:
ES_t GIE_enuDisable()
{
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	0f 92       	push	r0
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b74:	19 82       	std	Y+1, r1	; 0x01

     SREG_REG &= ~(1<<7);
     b76:	af e5       	ldi	r26, 0x5F	; 95
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	ef e5       	ldi	r30, 0x5F	; 95
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8f 77       	andi	r24, 0x7F	; 127
     b82:	8c 93       	st	X, r24

	return Local_enuErrorState;
     b84:	89 81       	ldd	r24, Y+1	; 0x01

}
     b86:	0f 90       	pop	r0
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <EXTI_enuInit>:
#include "EXTI_Config.h"

static  void(*EXTI_pfunINT[3])(void)={NULL,NULL,NULL};

ES_t EXTI_enuInit( EXTI_t *Copy_PArrStr )
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	2c 97       	sbiw	r28, 0x0c	; 12
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	9c 83       	std	Y+4, r25	; 0x04
     ba4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     ba6:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_PArrStr != NULL)
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	09 f4       	brne	.+2      	; 0xbb2 <EXTI_enuInit+0x24>
     bb0:	21 c1       	rjmp	.+578    	; 0xdf4 <EXTI_enuInit+0x266>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator=0;Local_u8Iterator<3;Local_u8Iterator++)
     bb2:	19 82       	std	Y+1, r1	; 0x01
     bb4:	1a c1       	rjmp	.+564    	; 0xdea <EXTI_enuInit+0x25c>
		{
			if(Copy_PArrStr[Local_u8Iterator].State == Enabled)
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	9c 01       	movw	r18, r24
     bbe:	22 0f       	add	r18, r18
     bc0:	33 1f       	adc	r19, r19
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	fc 01       	movw	r30, r24
     bc8:	e2 0f       	add	r30, r18
     bca:	f3 1f       	adc	r31, r19
     bcc:	80 81       	ld	r24, Z
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <EXTI_enuInit+0x46>
     bd2:	08 c1       	rjmp	.+528    	; 0xde4 <EXTI_enuInit+0x256>
			{
				switch (Local_u8Iterator)
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	3c 87       	std	Y+12, r19	; 0x0c
     bdc:	2b 87       	std	Y+11, r18	; 0x0b
     bde:	8b 85       	ldd	r24, Y+11	; 0x0b
     be0:	9c 85       	ldd	r25, Y+12	; 0x0c
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	91 05       	cpc	r25, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <EXTI_enuInit+0x5c>
     be8:	66 c0       	rjmp	.+204    	; 0xcb6 <EXTI_enuInit+0x128>
     bea:	2b 85       	ldd	r18, Y+11	; 0x0b
     bec:	3c 85       	ldd	r19, Y+12	; 0x0c
     bee:	22 30       	cpi	r18, 0x02	; 2
     bf0:	31 05       	cpc	r19, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <EXTI_enuInit+0x68>
     bf4:	bb c0       	rjmp	.+374    	; 0xd6c <EXTI_enuInit+0x1de>
     bf6:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	09 f0       	breq	.+2      	; 0xc00 <EXTI_enuInit+0x72>
     bfe:	f0 c0       	rjmp	.+480    	; 0xde0 <EXTI_enuInit+0x252>
				{
				case 0:
					GICR  |= (1<<6);
     c00:	ab e5       	ldi	r26, 0x5B	; 91
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	eb e5       	ldi	r30, 0x5B	; 91
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 64       	ori	r24, 0x40	; 64
     c0c:	8c 93       	st	X, r24
					MCUCR &= ~(3<<0);
     c0e:	a5 e5       	ldi	r26, 0x55	; 85
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e5 e5       	ldi	r30, 0x55	; 85
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8c 7f       	andi	r24, 0xFC	; 252
     c1a:	8c 93       	st	X, r24
					switch(Copy_PArrStr[Local_u8Iterator].SenseLevel)
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	9c 01       	movw	r18, r24
     c24:	22 0f       	add	r18, r18
     c26:	33 1f       	adc	r19, r19
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	fc 01       	movw	r30, r24
     c2e:	e2 0f       	add	r30, r18
     c30:	f3 1f       	adc	r31, r19
     c32:	81 81       	ldd	r24, Z+1	; 0x01
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	3a 87       	std	Y+10, r19	; 0x0a
     c3a:	29 87       	std	Y+9, r18	; 0x09
     c3c:	89 85       	ldd	r24, Y+9	; 0x09
     c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	91 05       	cpc	r25, r1
     c44:	b1 f0       	breq	.+44     	; 0xc72 <EXTI_enuInit+0xe4>
     c46:	29 85       	ldd	r18, Y+9	; 0x09
     c48:	3a 85       	ldd	r19, Y+10	; 0x0a
     c4a:	22 30       	cpi	r18, 0x02	; 2
     c4c:	31 05       	cpc	r19, r1
     c4e:	34 f4       	brge	.+12     	; 0xc5c <EXTI_enuInit+0xce>
     c50:	89 85       	ldd	r24, Y+9	; 0x09
     c52:	9a 85       	ldd	r25, Y+10	; 0x0a
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	09 f4       	brne	.+2      	; 0xc5a <EXTI_enuInit+0xcc>
     c58:	c5 c0       	rjmp	.+394    	; 0xde4 <EXTI_enuInit+0x256>
     c5a:	2a c0       	rjmp	.+84     	; 0xcb0 <EXTI_enuInit+0x122>
     c5c:	29 85       	ldd	r18, Y+9	; 0x09
     c5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c60:	22 30       	cpi	r18, 0x02	; 2
     c62:	31 05       	cpc	r19, r1
     c64:	71 f0       	breq	.+28     	; 0xc82 <EXTI_enuInit+0xf4>
     c66:	89 85       	ldd	r24, Y+9	; 0x09
     c68:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6a:	83 30       	cpi	r24, 0x03	; 3
     c6c:	91 05       	cpc	r25, r1
     c6e:	89 f0       	breq	.+34     	; 0xc92 <EXTI_enuInit+0x104>
     c70:	1f c0       	rjmp	.+62     	; 0xcb0 <EXTI_enuInit+0x122>
					{
					case LOW_LEVEL:
						break;
					case ANY_LOGICAL_CHANGE:
						MCUCR |= (1<<0);
     c72:	a5 e5       	ldi	r26, 0x55	; 85
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e5 e5       	ldi	r30, 0x55	; 85
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	81 60       	ori	r24, 0x01	; 1
     c7e:	8c 93       	st	X, r24
     c80:	b1 c0       	rjmp	.+354    	; 0xde4 <EXTI_enuInit+0x256>
						break;
					case FALLING_EDGE:
						MCUCR |= (1<<1);
     c82:	a5 e5       	ldi	r26, 0x55	; 85
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e5 e5       	ldi	r30, 0x55	; 85
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	82 60       	ori	r24, 0x02	; 2
     c8e:	8c 93       	st	X, r24
     c90:	a9 c0       	rjmp	.+338    	; 0xde4 <EXTI_enuInit+0x256>
						break;
					case RISING_EDGE:
						MCUCR |= (1<<0);
     c92:	a5 e5       	ldi	r26, 0x55	; 85
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e5 e5       	ldi	r30, 0x55	; 85
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	81 60       	ori	r24, 0x01	; 1
     c9e:	8c 93       	st	X, r24
						MCUCR |= (1<<1);
     ca0:	a5 e5       	ldi	r26, 0x55	; 85
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e5 e5       	ldi	r30, 0x55	; 85
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	82 60       	ori	r24, 0x02	; 2
     cac:	8c 93       	st	X, r24
     cae:	9a c0       	rjmp	.+308    	; 0xde4 <EXTI_enuInit+0x256>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	8a 83       	std	Y+2, r24	; 0x02
     cb4:	97 c0       	rjmp	.+302    	; 0xde4 <EXTI_enuInit+0x256>
					}
					break;
					case 1:
						GICR  |= (1<<7);
     cb6:	ab e5       	ldi	r26, 0x5B	; 91
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	eb e5       	ldi	r30, 0x5B	; 91
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	80 68       	ori	r24, 0x80	; 128
     cc2:	8c 93       	st	X, r24
						MCUCR &= ~(12<<0);
     cc4:	a5 e5       	ldi	r26, 0x55	; 85
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e5 e5       	ldi	r30, 0x55	; 85
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	83 7f       	andi	r24, 0xF3	; 243
     cd0:	8c 93       	st	X, r24
						switch(Copy_PArrStr[Local_u8Iterator].SenseLevel)
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9c 01       	movw	r18, r24
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	fc 01       	movw	r30, r24
     ce4:	e2 0f       	add	r30, r18
     ce6:	f3 1f       	adc	r31, r19
     ce8:	81 81       	ldd	r24, Z+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	38 87       	std	Y+8, r19	; 0x08
     cf0:	2f 83       	std	Y+7, r18	; 0x07
     cf2:	8f 81       	ldd	r24, Y+7	; 0x07
     cf4:	98 85       	ldd	r25, Y+8	; 0x08
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	91 05       	cpc	r25, r1
     cfa:	b1 f0       	breq	.+44     	; 0xd28 <EXTI_enuInit+0x19a>
     cfc:	2f 81       	ldd	r18, Y+7	; 0x07
     cfe:	38 85       	ldd	r19, Y+8	; 0x08
     d00:	22 30       	cpi	r18, 0x02	; 2
     d02:	31 05       	cpc	r19, r1
     d04:	34 f4       	brge	.+12     	; 0xd12 <EXTI_enuInit+0x184>
     d06:	8f 81       	ldd	r24, Y+7	; 0x07
     d08:	98 85       	ldd	r25, Y+8	; 0x08
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	09 f4       	brne	.+2      	; 0xd10 <EXTI_enuInit+0x182>
     d0e:	6a c0       	rjmp	.+212    	; 0xde4 <EXTI_enuInit+0x256>
     d10:	2a c0       	rjmp	.+84     	; 0xd66 <EXTI_enuInit+0x1d8>
     d12:	2f 81       	ldd	r18, Y+7	; 0x07
     d14:	38 85       	ldd	r19, Y+8	; 0x08
     d16:	22 30       	cpi	r18, 0x02	; 2
     d18:	31 05       	cpc	r19, r1
     d1a:	71 f0       	breq	.+28     	; 0xd38 <EXTI_enuInit+0x1aa>
     d1c:	8f 81       	ldd	r24, Y+7	; 0x07
     d1e:	98 85       	ldd	r25, Y+8	; 0x08
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	91 05       	cpc	r25, r1
     d24:	89 f0       	breq	.+34     	; 0xd48 <EXTI_enuInit+0x1ba>
     d26:	1f c0       	rjmp	.+62     	; 0xd66 <EXTI_enuInit+0x1d8>
						{
						case LOW_LEVEL:
							break;
						case ANY_LOGICAL_CHANGE:
							MCUCR |= (1<<2);
     d28:	a5 e5       	ldi	r26, 0x55	; 85
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e5 e5       	ldi	r30, 0x55	; 85
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	84 60       	ori	r24, 0x04	; 4
     d34:	8c 93       	st	X, r24
     d36:	56 c0       	rjmp	.+172    	; 0xde4 <EXTI_enuInit+0x256>
							break;
						case FALLING_EDGE:
							MCUCR |= (1<<3);
     d38:	a5 e5       	ldi	r26, 0x55	; 85
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e5 e5       	ldi	r30, 0x55	; 85
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	88 60       	ori	r24, 0x08	; 8
     d44:	8c 93       	st	X, r24
     d46:	4e c0       	rjmp	.+156    	; 0xde4 <EXTI_enuInit+0x256>
							break;
						case RISING_EDGE:
							MCUCR |= (1<<2);
     d48:	a5 e5       	ldi	r26, 0x55	; 85
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e5 e5       	ldi	r30, 0x55	; 85
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	84 60       	ori	r24, 0x04	; 4
     d54:	8c 93       	st	X, r24
							MCUCR |= (1<<3);
     d56:	a5 e5       	ldi	r26, 0x55	; 85
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e5 e5       	ldi	r30, 0x55	; 85
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	88 60       	ori	r24, 0x08	; 8
     d62:	8c 93       	st	X, r24
     d64:	3f c0       	rjmp	.+126    	; 0xde4 <EXTI_enuInit+0x256>
							break;
						default:
							Local_enuErrorState = ES_OUT_OF_RANGE;
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	8a 83       	std	Y+2, r24	; 0x02
     d6a:	3c c0       	rjmp	.+120    	; 0xde4 <EXTI_enuInit+0x256>
						}
						break;

						case 2:
							GICR   |= (1<<5);
     d6c:	ab e5       	ldi	r26, 0x5B	; 91
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	eb e5       	ldi	r30, 0x5B	; 91
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 62       	ori	r24, 0x20	; 32
     d78:	8c 93       	st	X, r24
							MCUCSR &= ~(1<<6);
     d7a:	a4 e5       	ldi	r26, 0x54	; 84
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e4 e5       	ldi	r30, 0x54	; 84
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8f 7b       	andi	r24, 0xBF	; 191
     d86:	8c 93       	st	X, r24
							switch(Copy_PArrStr[Local_u8Iterator].SenseLevel)
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9c 01       	movw	r18, r24
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	fc 01       	movw	r30, r24
     d9a:	e2 0f       	add	r30, r18
     d9c:	f3 1f       	adc	r31, r19
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	3e 83       	std	Y+6, r19	; 0x06
     da6:	2d 83       	std	Y+5, r18	; 0x05
     da8:	8d 81       	ldd	r24, Y+5	; 0x05
     daa:	9e 81       	ldd	r25, Y+6	; 0x06
     dac:	82 30       	cpi	r24, 0x02	; 2
     dae:	91 05       	cpc	r25, r1
     db0:	79 f0       	breq	.+30     	; 0xdd0 <EXTI_enuInit+0x242>
     db2:	2d 81       	ldd	r18, Y+5	; 0x05
     db4:	3e 81       	ldd	r19, Y+6	; 0x06
     db6:	23 30       	cpi	r18, 0x03	; 3
     db8:	31 05       	cpc	r19, r1
     dba:	41 f4       	brne	.+16     	; 0xdcc <EXTI_enuInit+0x23e>
							{
							case FALLING_EDGE:
								break;
							case RISING_EDGE:
								MCUCSR |= (1<<6);
     dbc:	a4 e5       	ldi	r26, 0x54	; 84
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 e5       	ldi	r30, 0x54	; 84
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	80 64       	ori	r24, 0x40	; 64
     dc8:	8c 93       	st	X, r24
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <EXTI_enuInit+0x242>
								break;
							default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	8a 83       	std	Y+2, r24	; 0x02
							}
							GIFR &= ~(1<<5);
     dd0:	aa e5       	ldi	r26, 0x5A	; 90
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ea e5       	ldi	r30, 0x5A	; 90
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	8f 7d       	andi	r24, 0xDF	; 223
     ddc:	8c 93       	st	X, r24
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <EXTI_enuInit+0x256>
							break;

							default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_PArrStr != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator=0;Local_u8Iterator<3;Local_u8Iterator++)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	8f 5f       	subi	r24, 0xFF	; 255
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <EXTI_enuInit+0x264>
     df0:	e2 ce       	rjmp	.-572    	; 0xbb6 <EXTI_enuInit+0x28>
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <EXTI_enuInit+0x26a>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
     df8:	8a 81       	ldd	r24, Y+2	; 0x02

}
     dfa:	2c 96       	adiw	r28, 0x0c	; 12
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <EXTI_enuSeneLevel>:
ES_t EXTI_enuSeneLevel(u8 Copy_u8EXINTId,u8 Copy_u8SenseLevel)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	29 97       	sbiw	r28, 0x09	; 9
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	8a 83       	std	Y+2, r24	; 0x02
     e22:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     e24:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8EXINTId < 3)
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <EXTI_enuSeneLevel+0x22>
     e2c:	c5 c0       	rjmp	.+394    	; 0xfb8 <EXTI_enuSeneLevel+0x1ac>
	{
		if(Copy_u8EXINTId == 0)
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	88 23       	and	r24, r24
     e32:	09 f0       	breq	.+2      	; 0xe36 <EXTI_enuSeneLevel+0x2a>
     e34:	49 c0       	rjmp	.+146    	; 0xec8 <EXTI_enuSeneLevel+0xbc>
		{
			MCUCR &= ~(3<<0);
     e36:	a5 e5       	ldi	r26, 0x55	; 85
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e5 e5       	ldi	r30, 0x55	; 85
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8c 7f       	andi	r24, 0xFC	; 252
     e42:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel)
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	39 87       	std	Y+9, r19	; 0x09
     e4c:	28 87       	std	Y+8, r18	; 0x08
     e4e:	88 85       	ldd	r24, Y+8	; 0x08
     e50:	99 85       	ldd	r25, Y+9	; 0x09
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	91 05       	cpc	r25, r1
     e56:	b1 f0       	breq	.+44     	; 0xe84 <EXTI_enuSeneLevel+0x78>
     e58:	28 85       	ldd	r18, Y+8	; 0x08
     e5a:	39 85       	ldd	r19, Y+9	; 0x09
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	34 f4       	brge	.+12     	; 0xe6e <EXTI_enuSeneLevel+0x62>
     e62:	88 85       	ldd	r24, Y+8	; 0x08
     e64:	99 85       	ldd	r25, Y+9	; 0x09
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	09 f4       	brne	.+2      	; 0xe6c <EXTI_enuSeneLevel+0x60>
     e6a:	a8 c0       	rjmp	.+336    	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
     e6c:	2a c0       	rjmp	.+84     	; 0xec2 <EXTI_enuSeneLevel+0xb6>
     e6e:	28 85       	ldd	r18, Y+8	; 0x08
     e70:	39 85       	ldd	r19, Y+9	; 0x09
     e72:	22 30       	cpi	r18, 0x02	; 2
     e74:	31 05       	cpc	r19, r1
     e76:	71 f0       	breq	.+28     	; 0xe94 <EXTI_enuSeneLevel+0x88>
     e78:	88 85       	ldd	r24, Y+8	; 0x08
     e7a:	99 85       	ldd	r25, Y+9	; 0x09
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	91 05       	cpc	r25, r1
     e80:	89 f0       	breq	.+34     	; 0xea4 <EXTI_enuSeneLevel+0x98>
     e82:	1f c0       	rjmp	.+62     	; 0xec2 <EXTI_enuSeneLevel+0xb6>
			{
			case LOW_LEVEL:
				break;
			case ANY_LOGICAL_CHANGE:
				MCUCR |= (1<<0);
     e84:	a5 e5       	ldi	r26, 0x55	; 85
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e5 e5       	ldi	r30, 0x55	; 85
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	81 60       	ori	r24, 0x01	; 1
     e90:	8c 93       	st	X, r24
     e92:	94 c0       	rjmp	.+296    	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
				break;
			case FALLING_EDGE:
				MCUCR |= (1<<1);
     e94:	a5 e5       	ldi	r26, 0x55	; 85
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e5 e5       	ldi	r30, 0x55	; 85
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	82 60       	ori	r24, 0x02	; 2
     ea0:	8c 93       	st	X, r24
     ea2:	8c c0       	rjmp	.+280    	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
				break;
			case RISING_EDGE:
				MCUCR |= (1<<0);
     ea4:	a5 e5       	ldi	r26, 0x55	; 85
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e5 e5       	ldi	r30, 0x55	; 85
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	8c 93       	st	X, r24
				MCUCR |= (1<<1);
     eb2:	a5 e5       	ldi	r26, 0x55	; 85
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e5 e5       	ldi	r30, 0x55	; 85
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	82 60       	ori	r24, 0x02	; 2
     ebe:	8c 93       	st	X, r24
     ec0:	7d c0       	rjmp	.+250    	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
     ec2:	83 e0       	ldi	r24, 0x03	; 3
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	7a c0       	rjmp	.+244    	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
			}
		}
		else if(Copy_u8EXINTId ==1)
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	09 f0       	breq	.+2      	; 0xed0 <EXTI_enuSeneLevel+0xc4>
     ece:	49 c0       	rjmp	.+146    	; 0xf62 <EXTI_enuSeneLevel+0x156>
		{
			MCUCR &= ~(12<<0);
     ed0:	a5 e5       	ldi	r26, 0x55	; 85
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e5 e5       	ldi	r30, 0x55	; 85
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	83 7f       	andi	r24, 0xF3	; 243
     edc:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3f 83       	std	Y+7, r19	; 0x07
     ee6:	2e 83       	std	Y+6, r18	; 0x06
     ee8:	8e 81       	ldd	r24, Y+6	; 0x06
     eea:	9f 81       	ldd	r25, Y+7	; 0x07
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	91 05       	cpc	r25, r1
     ef0:	b1 f0       	breq	.+44     	; 0xf1e <EXTI_enuSeneLevel+0x112>
     ef2:	2e 81       	ldd	r18, Y+6	; 0x06
     ef4:	3f 81       	ldd	r19, Y+7	; 0x07
     ef6:	22 30       	cpi	r18, 0x02	; 2
     ef8:	31 05       	cpc	r19, r1
     efa:	34 f4       	brge	.+12     	; 0xf08 <EXTI_enuSeneLevel+0xfc>
     efc:	8e 81       	ldd	r24, Y+6	; 0x06
     efe:	9f 81       	ldd	r25, Y+7	; 0x07
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	09 f4       	brne	.+2      	; 0xf06 <EXTI_enuSeneLevel+0xfa>
     f04:	5b c0       	rjmp	.+182    	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
     f06:	2a c0       	rjmp	.+84     	; 0xf5c <EXTI_enuSeneLevel+0x150>
     f08:	2e 81       	ldd	r18, Y+6	; 0x06
     f0a:	3f 81       	ldd	r19, Y+7	; 0x07
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	71 f0       	breq	.+28     	; 0xf2e <EXTI_enuSeneLevel+0x122>
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	91 05       	cpc	r25, r1
     f1a:	89 f0       	breq	.+34     	; 0xf3e <EXTI_enuSeneLevel+0x132>
     f1c:	1f c0       	rjmp	.+62     	; 0xf5c <EXTI_enuSeneLevel+0x150>
			{
			case LOW_LEVEL:
				break;
			case ANY_LOGICAL_CHANGE:
				MCUCR |= (1<<2);
     f1e:	a5 e5       	ldi	r26, 0x55	; 85
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e5 e5       	ldi	r30, 0x55	; 85
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	84 60       	ori	r24, 0x04	; 4
     f2a:	8c 93       	st	X, r24
     f2c:	47 c0       	rjmp	.+142    	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
				break;
			case FALLING_EDGE:
				MCUCR |= (1<<3);
     f2e:	a5 e5       	ldi	r26, 0x55	; 85
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e5 e5       	ldi	r30, 0x55	; 85
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	88 60       	ori	r24, 0x08	; 8
     f3a:	8c 93       	st	X, r24
     f3c:	3f c0       	rjmp	.+126    	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
				break;
			case RISING_EDGE:
				MCUCR |= (1<<2);
     f3e:	a5 e5       	ldi	r26, 0x55	; 85
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 e5       	ldi	r30, 0x55	; 85
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	84 60       	ori	r24, 0x04	; 4
     f4a:	8c 93       	st	X, r24
				MCUCR |= (1<<3);
     f4c:	a5 e5       	ldi	r26, 0x55	; 85
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e5       	ldi	r30, 0x55	; 85
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	88 60       	ori	r24, 0x08	; 8
     f58:	8c 93       	st	X, r24
     f5a:	30 c0       	rjmp	.+96     	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	2d c0       	rjmp	.+90     	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
			}
		}
		else if(Copy_u8EXINTId == 2)
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	51 f5       	brne	.+84     	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
		{

			MCUCSR &= ~(1<<6);
     f68:	a4 e5       	ldi	r26, 0x54	; 84
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e4 e5       	ldi	r30, 0x54	; 84
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8f 7b       	andi	r24, 0xBF	; 191
     f74:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel)
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	3d 83       	std	Y+5, r19	; 0x05
     f7e:	2c 83       	std	Y+4, r18	; 0x04
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	91 05       	cpc	r25, r1
     f88:	79 f0       	breq	.+30     	; 0xfa8 <EXTI_enuSeneLevel+0x19c>
     f8a:	2c 81       	ldd	r18, Y+4	; 0x04
     f8c:	3d 81       	ldd	r19, Y+5	; 0x05
     f8e:	23 30       	cpi	r18, 0x03	; 3
     f90:	31 05       	cpc	r19, r1
     f92:	41 f4       	brne	.+16     	; 0xfa4 <EXTI_enuSeneLevel+0x198>
			{
			case FALLING_EDGE:
				break;
			case RISING_EDGE:
				MCUCSR |= (1<<6);
     f94:	a4 e5       	ldi	r26, 0x54	; 84
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e4 e5       	ldi	r30, 0x54	; 84
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 64       	ori	r24, 0x40	; 64
     fa0:	8c 93       	st	X, r24
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <EXTI_enuSeneLevel+0x19c>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
     fa4:	83 e0       	ldi	r24, 0x03	; 3
     fa6:	89 83       	std	Y+1, r24	; 0x01
			}
			GIFR &= ~(1<<5);
     fa8:	aa e5       	ldi	r26, 0x5A	; 90
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ea e5       	ldi	r30, 0x5A	; 90
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7d       	andi	r24, 0xDF	; 223
     fb4:	8c 93       	st	X, r24
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <EXTI_enuSeneLevel+0x1b0>
		}}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     fbe:	29 96       	adiw	r28, 0x09	; 9
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <EXTI_enuEnable>:
ES_t EXTI_enuEnable(u8 Copy_u8Id)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <EXTI_enuEnable+0x6>
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     fdc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Id <3)
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	83 30       	cpi	r24, 0x03	; 3
     fe2:	08 f5       	brcc	.+66     	; 0x1026 <EXTI_enuEnable+0x56>
	{
		if(Copy_u8Id == 0)
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	88 23       	and	r24, r24
     fe8:	41 f4       	brne	.+16     	; 0xffa <EXTI_enuEnable+0x2a>
		{
			GICR  |= (1<<6);
     fea:	ab e5       	ldi	r26, 0x5B	; 91
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	eb e5       	ldi	r30, 0x5B	; 91
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	8c 93       	st	X, r24
     ff8:	18 c0       	rjmp	.+48     	; 0x102a <EXTI_enuEnable+0x5a>
		}
		else if(Copy_u8Id == 1)
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	41 f4       	brne	.+16     	; 0x1010 <EXTI_enuEnable+0x40>
		{
			GICR  |= (1<<7);
    1000:	ab e5       	ldi	r26, 0x5B	; 91
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	eb e5       	ldi	r30, 0x5B	; 91
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	80 68       	ori	r24, 0x80	; 128
    100c:	8c 93       	st	X, r24
    100e:	0d c0       	rjmp	.+26     	; 0x102a <EXTI_enuEnable+0x5a>
		}
		else if(Copy_u8Id == 2)
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	82 30       	cpi	r24, 0x02	; 2
    1014:	51 f4       	brne	.+20     	; 0x102a <EXTI_enuEnable+0x5a>
		{
			GICR  |= (1<<5);
    1016:	ab e5       	ldi	r26, 0x5B	; 91
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	eb e5       	ldi	r30, 0x5B	; 91
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 62       	ori	r24, 0x20	; 32
    1022:	8c 93       	st	X, r24
    1024:	02 c0       	rjmp	.+4      	; 0x102a <EXTI_enuEnable+0x5a>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1026:	83 e0       	ldi	r24, 0x03	; 3
    1028:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    102a:	89 81       	ldd	r24, Y+1	; 0x01
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <EXTI_enuDisable>:
ES_t EXTI_enuDisable(u8 Copy_u8Id)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <EXTI_enuDisable+0x6>
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1042:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Id <3)
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	08 f5       	brcc	.+66     	; 0x108c <EXTI_enuDisable+0x56>
	{
		if(Copy_u8Id == 0)
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	88 23       	and	r24, r24
    104e:	41 f4       	brne	.+16     	; 0x1060 <EXTI_enuDisable+0x2a>
		{
			GICR  &= ~(1<<6);
    1050:	ab e5       	ldi	r26, 0x5B	; 91
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	eb e5       	ldi	r30, 0x5B	; 91
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8f 7b       	andi	r24, 0xBF	; 191
    105c:	8c 93       	st	X, r24
    105e:	18 c0       	rjmp	.+48     	; 0x1090 <EXTI_enuDisable+0x5a>
		}
		else if(Copy_u8Id == 1)
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	41 f4       	brne	.+16     	; 0x1076 <EXTI_enuDisable+0x40>
		{
			GICR  &= ~(1<<7);
    1066:	ab e5       	ldi	r26, 0x5B	; 91
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	eb e5       	ldi	r30, 0x5B	; 91
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 77       	andi	r24, 0x7F	; 127
    1072:	8c 93       	st	X, r24
    1074:	0d c0       	rjmp	.+26     	; 0x1090 <EXTI_enuDisable+0x5a>
		}
		else if(Copy_u8Id == 2)
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	51 f4       	brne	.+20     	; 0x1090 <EXTI_enuDisable+0x5a>
		{
			GICR  &= ~(1<<5);
    107c:	ab e5       	ldi	r26, 0x5B	; 91
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e5       	ldi	r30, 0x5B	; 91
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	8f 7d       	andi	r24, 0xDF	; 223
    1088:	8c 93       	st	X, r24
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <EXTI_enuDisable+0x5a>
		}

	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <EXTI_CallBack>:

ES_t EXTI_CallBack(void(*PfunApp)(void) ,u8 Copy_u8Id)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <EXTI_CallBack+0x6>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <EXTI_CallBack+0x8>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	9b 83       	std	Y+3, r25	; 0x03
    10aa:	8a 83       	std	Y+2, r24	; 0x02
    10ac:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    10ae:	19 82       	std	Y+1, r1	; 0x01
	if(PfunApp != NULL)
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	9b 81       	ldd	r25, Y+3	; 0x03
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	99 f0       	breq	.+38     	; 0x10de <EXTI_CallBack+0x42>
	{
		if
		(Copy_u8Id < 3)
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	68 f4       	brcc	.+26     	; 0x10d8 <EXTI_CallBack+0x3c>
		{
			EXTI_pfunINT[Copy_u8Id] = PfunApp;
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	fc 01       	movw	r30, r24
    10ca:	e2 59       	subi	r30, 0x92	; 146
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	9b 81       	ldd	r25, Y+3	; 0x03
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	80 83       	st	Z, r24
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <EXTI_CallBack+0x46>
		}

		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <EXTI_CallBack+0x46>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <__vector_1>:


ISR(VECT_INT0 )
{
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunINT[0] != NULL)
    111c:	80 91 6e 00 	lds	r24, 0x006E
    1120:	90 91 6f 00 	lds	r25, 0x006F
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	29 f0       	breq	.+10     	; 0x1132 <__vector_1+0x40>
	{
		EXTI_pfunINT[0]();
    1128:	e0 91 6e 00 	lds	r30, 0x006E
    112c:	f0 91 6f 00 	lds	r31, 0x006F
    1130:	09 95       	icall
	}
}
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	ff 91       	pop	r31
    1138:	ef 91       	pop	r30
    113a:	bf 91       	pop	r27
    113c:	af 91       	pop	r26
    113e:	9f 91       	pop	r25
    1140:	8f 91       	pop	r24
    1142:	7f 91       	pop	r23
    1144:	6f 91       	pop	r22
    1146:	5f 91       	pop	r21
    1148:	4f 91       	pop	r20
    114a:	3f 91       	pop	r19
    114c:	2f 91       	pop	r18
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	0f 90       	pop	r0
    1154:	1f 90       	pop	r1
    1156:	18 95       	reti

00001158 <__vector_2>:

ISR(VECT_INT1)
{
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	2f 93       	push	r18
    1164:	3f 93       	push	r19
    1166:	4f 93       	push	r20
    1168:	5f 93       	push	r21
    116a:	6f 93       	push	r22
    116c:	7f 93       	push	r23
    116e:	8f 93       	push	r24
    1170:	9f 93       	push	r25
    1172:	af 93       	push	r26
    1174:	bf 93       	push	r27
    1176:	ef 93       	push	r30
    1178:	ff 93       	push	r31
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfunINT[1] != NULL)
    1182:	80 91 70 00 	lds	r24, 0x0070
    1186:	90 91 71 00 	lds	r25, 0x0071
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	29 f0       	breq	.+10     	; 0x1198 <__vector_2+0x40>
	{
		EXTI_pfunINT[1]();
    118e:	e0 91 70 00 	lds	r30, 0x0070
    1192:	f0 91 71 00 	lds	r31, 0x0071
    1196:	09 95       	icall
	}
}
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	bf 91       	pop	r27
    11a2:	af 91       	pop	r26
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	7f 91       	pop	r23
    11aa:	6f 91       	pop	r22
    11ac:	5f 91       	pop	r21
    11ae:	4f 91       	pop	r20
    11b0:	3f 91       	pop	r19
    11b2:	2f 91       	pop	r18
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <DIO_enuInit>:
#include "DIO_Config.h"



ES_t DIO_enuInit()
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    11c8:	19 82       	std	Y+1, r1	; 0x01

	DDRA=CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    11ca:	ea e3       	ldi	r30, 0x3A	; 58
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	80 83       	st	Z, r24
	DDRB=CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    11d2:	e7 e3       	ldi	r30, 0x37	; 55
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	80 83       	st	Z, r24
	DDRC=CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    11da:	e4 e3       	ldi	r30, 0x34	; 52
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	80 83       	st	Z, r24
	DDRD=CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    11e2:	e1 e3       	ldi	r30, 0x31	; 49
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    11ea:	eb e3       	ldi	r30, 0x3B	; 59
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	10 82       	st	Z, r1
	PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    11f0:	e8 e3       	ldi	r30, 0x38	; 56
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	10 82       	st	Z, r1
	PORTA = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    11f6:	eb e3       	ldi	r30, 0x3B	; 59
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	10 82       	st	Z, r1
	PORTA = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    11fc:	eb e3       	ldi	r30, 0x3B	; 59
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	10 82       	st	Z, r1
	Local_enuErrorState = ES_OK;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    1206:	89 81       	ldd	r24, Y+1	; 0x01

}
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <DIO_enuSetPortDirection>:

ES_t  DIO_enuSetPortDirection (u8 Copy_u8PortID,u8 Copy_u8PortDirection)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <DIO_enuSetPortDirection+0x6>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <DIO_enuSetPortDirection+0x8>
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	8a 83       	std	Y+2, r24	; 0x02
    1220:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1222:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD){
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	98 f5       	brcc	.+102    	; 0x1290 <DIO_enuSetPortDirection+0x80>
	switch(Copy_u8PortID)
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	3d 83       	std	Y+5, r19	; 0x05
    1232:	2c 83       	std	Y+4, r18	; 0x04
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	d1 f0       	breq	.+52     	; 0x1272 <DIO_enuSetPortDirection+0x62>
    123e:	2c 81       	ldd	r18, Y+4	; 0x04
    1240:	3d 81       	ldd	r19, Y+5	; 0x05
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	2c f4       	brge	.+10     	; 0x1252 <DIO_enuSetPortDirection+0x42>
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	9d 81       	ldd	r25, Y+5	; 0x05
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	61 f0       	breq	.+24     	; 0x1268 <DIO_enuSetPortDirection+0x58>
    1250:	21 c0       	rjmp	.+66     	; 0x1294 <DIO_enuSetPortDirection+0x84>
    1252:	2c 81       	ldd	r18, Y+4	; 0x04
    1254:	3d 81       	ldd	r19, Y+5	; 0x05
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <DIO_enuSetPortDirection+0x6c>
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	9d 81       	ldd	r25, Y+5	; 0x05
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	91 05       	cpc	r25, r1
    1264:	81 f0       	breq	.+32     	; 0x1286 <DIO_enuSetPortDirection+0x76>
    1266:	16 c0       	rjmp	.+44     	; 0x1294 <DIO_enuSetPortDirection+0x84>
	{
	case(DIO_PORTA):
	{  DDRA=Copy_u8PortDirection;
    1268:	ea e3       	ldi	r30, 0x3A	; 58
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	80 83       	st	Z, r24
    1270:	11 c0       	rjmp	.+34     	; 0x1294 <DIO_enuSetPortDirection+0x84>
	   break;
	}
	case(DIO_PORTB):
		{  DDRB=Copy_u8PortDirection;
    1272:	e7 e3       	ldi	r30, 0x37	; 55
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	80 83       	st	Z, r24
    127a:	0c c0       	rjmp	.+24     	; 0x1294 <DIO_enuSetPortDirection+0x84>
		   break;
		}
	case(DIO_PORTC):
		{  DDRC=Copy_u8PortDirection;
    127c:	e4 e3       	ldi	r30, 0x34	; 52
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	80 83       	st	Z, r24
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <DIO_enuSetPortDirection+0x84>
		   break;
		}
	case(DIO_PORTD):
		{  DDRD=Copy_u8PortDirection;
    1286:	e1 e3       	ldi	r30, 0x31	; 49
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	80 83       	st	Z, r24
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_enuSetPortDirection+0x84>
	 Local_enuErrorState=ES_OK;
	}
}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1294:	89 81       	ldd	r24, Y+1	; 0x01

}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_enuSetPortValue+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <DIO_enuSetPortValue+0x8>
    12ae:	0f 92       	push	r0
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	8a 83       	std	Y+2, r24	; 0x02
    12b6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    12b8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD){
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	98 f5       	brcc	.+102    	; 0x1326 <DIO_enuSetPortValue+0x80>
	switch(Copy_u8PortID)
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	3d 83       	std	Y+5, r19	; 0x05
    12c8:	2c 83       	std	Y+4, r18	; 0x04
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	9d 81       	ldd	r25, Y+5	; 0x05
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	d1 f0       	breq	.+52     	; 0x1308 <DIO_enuSetPortValue+0x62>
    12d4:	2c 81       	ldd	r18, Y+4	; 0x04
    12d6:	3d 81       	ldd	r19, Y+5	; 0x05
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <DIO_enuSetPortValue+0x42>
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 f0       	breq	.+24     	; 0x12fe <DIO_enuSetPortValue+0x58>
    12e6:	21 c0       	rjmp	.+66     	; 0x132a <DIO_enuSetPortValue+0x84>
    12e8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ea:	3d 81       	ldd	r19, Y+5	; 0x05
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	81 f0       	breq	.+32     	; 0x1312 <DIO_enuSetPortValue+0x6c>
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	91 05       	cpc	r25, r1
    12fa:	81 f0       	breq	.+32     	; 0x131c <DIO_enuSetPortValue+0x76>
    12fc:	16 c0       	rjmp	.+44     	; 0x132a <DIO_enuSetPortValue+0x84>
		{
		case(DIO_PORTA):
		{  PORTA=Copy_u8PortValue;
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	80 83       	st	Z, r24
    1306:	11 c0       	rjmp	.+34     	; 0x132a <DIO_enuSetPortValue+0x84>
		   break;
		}
		case(DIO_PORTB):
			{  PORTB=Copy_u8PortValue;
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	80 83       	st	Z, r24
    1310:	0c c0       	rjmp	.+24     	; 0x132a <DIO_enuSetPortValue+0x84>
			   break;
			}
		case(DIO_PORTC):
			{  PORTC=Copy_u8PortValue;
    1312:	e5 e3       	ldi	r30, 0x35	; 53
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	80 83       	st	Z, r24
    131a:	07 c0       	rjmp	.+14     	; 0x132a <DIO_enuSetPortValue+0x84>
			   break;
			}
		case(DIO_PORTD):
			{  PORTD=Copy_u8PortValue;
    131c:	e2 e3       	ldi	r30, 0x32	; 50
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	80 83       	st	Z, r24
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_enuSetPortValue+0x84>
		 Local_enuErrorState=ES_OK;
		}
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_enuErrorState;
    132a:	89 81       	ldd	r24, Y+1	; 0x01

}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <DIO_enuTogPort>:

ES_t DIO_enuTogPort (u8 Copy_u8PortID)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <DIO_enuTogPort+0x6>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_enuTogPort+0x8>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    134a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD){
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	08 f0       	brcs	.+2      	; 0x1354 <DIO_enuTogPort+0x18>
    1352:	3f c0       	rjmp	.+126    	; 0x13d2 <DIO_enuTogPort+0x96>
	switch(Copy_u8PortID)
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	3c 83       	std	Y+4, r19	; 0x04
    135c:	2b 83       	std	Y+3, r18	; 0x03
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	91 05       	cpc	r25, r1
    1366:	e9 f0       	breq	.+58     	; 0x13a2 <DIO_enuTogPort+0x66>
    1368:	2b 81       	ldd	r18, Y+3	; 0x03
    136a:	3c 81       	ldd	r19, Y+4	; 0x04
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	2c f4       	brge	.+10     	; 0x137c <DIO_enuTogPort+0x40>
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	61 f0       	breq	.+24     	; 0x1392 <DIO_enuTogPort+0x56>
    137a:	2d c0       	rjmp	.+90     	; 0x13d6 <DIO_enuTogPort+0x9a>
    137c:	2b 81       	ldd	r18, Y+3	; 0x03
    137e:	3c 81       	ldd	r19, Y+4	; 0x04
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	b1 f0       	breq	.+44     	; 0x13b2 <DIO_enuTogPort+0x76>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	91 05       	cpc	r25, r1
    138e:	c9 f0       	breq	.+50     	; 0x13c2 <DIO_enuTogPort+0x86>
    1390:	22 c0       	rjmp	.+68     	; 0x13d6 <DIO_enuTogPort+0x9a>
			{
			case(DIO_PORTA):
			{  PORTA =~ PORTA;
    1392:	ab e3       	ldi	r26, 0x3B	; 59
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	eb e3       	ldi	r30, 0x3B	; 59
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	80 95       	com	r24
    139e:	8c 93       	st	X, r24
    13a0:	1a c0       	rjmp	.+52     	; 0x13d6 <DIO_enuTogPort+0x9a>
			   break;
			}
			case(DIO_PORTB):
				{  PORTB = ~PORTB;
    13a2:	a8 e3       	ldi	r26, 0x38	; 56
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e8 e3       	ldi	r30, 0x38	; 56
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	80 95       	com	r24
    13ae:	8c 93       	st	X, r24
    13b0:	12 c0       	rjmp	.+36     	; 0x13d6 <DIO_enuTogPort+0x9a>
				   break;
				}
			case(DIO_PORTC):
				{  PORTC = ~PORTC;
    13b2:	a5 e3       	ldi	r26, 0x35	; 53
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e3       	ldi	r30, 0x35	; 53
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 95       	com	r24
    13be:	8c 93       	st	X, r24
    13c0:	0a c0       	rjmp	.+20     	; 0x13d6 <DIO_enuTogPort+0x9a>
				   break;
				}
			case(DIO_PORTD):
				{  PORTD = ~PORTD;
    13c2:	a2 e3       	ldi	r26, 0x32	; 50
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e2 e3       	ldi	r30, 0x32	; 50
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	80 95       	com	r24
    13ce:	8c 93       	st	X, r24
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_enuTogPort+0x9a>
			 Local_enuErrorState=ES_OK;
			}
}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	89 83       	std	Y+1, r24	; 0x01
		}
			return Local_enuErrorState;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01


}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue (u8 Copy_u8PortID, u8 *Copy_pu8PortValue)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <DIO_enuGetPortValue+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <DIO_enuGetPortValue+0x8>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <DIO_enuGetPortValue+0xa>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	8a 83       	std	Y+2, r24	; 0x02
    13f6:	7c 83       	std	Y+4, r23	; 0x04
    13f8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    13fa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8PortValue != NULL)
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	09 f4       	brne	.+2      	; 0x1406 <DIO_enuGetPortValue+0x20>
    1404:	41 c0       	rjmp	.+130    	; 0x1488 <DIO_enuGetPortValue+0xa2>
	{
		if(Copy_u8PortID <= DIO_PORTD){
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	84 30       	cpi	r24, 0x04	; 4
    140a:	d8 f5       	brcc	.+118    	; 0x1482 <DIO_enuGetPortValue+0x9c>
			switch(Copy_u8PortID)
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	3e 83       	std	Y+6, r19	; 0x06
    1414:	2d 83       	std	Y+5, r18	; 0x05
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	91 05       	cpc	r25, r1
    141e:	e1 f0       	breq	.+56     	; 0x1458 <DIO_enuGetPortValue+0x72>
    1420:	2d 81       	ldd	r18, Y+5	; 0x05
    1422:	3e 81       	ldd	r19, Y+6	; 0x06
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	2c f4       	brge	.+10     	; 0x1434 <DIO_enuGetPortValue+0x4e>
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	61 f0       	breq	.+24     	; 0x144a <DIO_enuGetPortValue+0x64>
    1432:	2c c0       	rjmp	.+88     	; 0x148c <DIO_enuGetPortValue+0xa6>
    1434:	2d 81       	ldd	r18, Y+5	; 0x05
    1436:	3e 81       	ldd	r19, Y+6	; 0x06
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	a1 f0       	breq	.+40     	; 0x1466 <DIO_enuGetPortValue+0x80>
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	91 05       	cpc	r25, r1
    1446:	b1 f0       	breq	.+44     	; 0x1474 <DIO_enuGetPortValue+0x8e>
    1448:	21 c0       	rjmp	.+66     	; 0x148c <DIO_enuGetPortValue+0xa6>
					{
					case(DIO_PORTA):
					{
						*Copy_pu8PortValue=PINA;
    144a:	e9 e3       	ldi	r30, 0x39	; 57
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	eb 81       	ldd	r30, Y+3	; 0x03
    1452:	fc 81       	ldd	r31, Y+4	; 0x04
    1454:	80 83       	st	Z, r24
    1456:	1a c0       	rjmp	.+52     	; 0x148c <DIO_enuGetPortValue+0xa6>
					   break;
					}
					case(DIO_PORTB):
					{
					  	*Copy_pu8PortValue=PINB;
    1458:	e6 e3       	ldi	r30, 0x36	; 54
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	eb 81       	ldd	r30, Y+3	; 0x03
    1460:	fc 81       	ldd	r31, Y+4	; 0x04
    1462:	80 83       	st	Z, r24
    1464:	13 c0       	rjmp	.+38     	; 0x148c <DIO_enuGetPortValue+0xa6>
						   break;
					}
					case(DIO_PORTC):
					{
						*Copy_pu8PortValue=PINC;
    1466:	e3 e3       	ldi	r30, 0x33	; 51
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	eb 81       	ldd	r30, Y+3	; 0x03
    146e:	fc 81       	ldd	r31, Y+4	; 0x04
    1470:	80 83       	st	Z, r24
    1472:	0c c0       	rjmp	.+24     	; 0x148c <DIO_enuGetPortValue+0xa6>
						   break;
					}
					case(DIO_PORTD):
					{
						*Copy_pu8PortValue=PIND;
    1474:	e0 e3       	ldi	r30, 0x30	; 48
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	eb 81       	ldd	r30, Y+3	; 0x03
    147c:	fc 81       	ldd	r31, Y+4	; 0x04
    147e:	80 83       	st	Z, r24
    1480:	05 c0       	rjmp	.+10     	; 0x148c <DIO_enuGetPortValue+0xa6>
					 Local_enuErrorState=ES_OK;
					}
		                               }
				else
				{
					Local_enuErrorState=ES_OUT_OF_RANGE;
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_enuGetPortValue+0xa6>
				}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    148c:	89 81       	ldd	r24, Y+1	; 0x01
}
    148e:	26 96       	adiw	r28, 0x06	; 6
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <DIO_enuSetPinDirection>:


ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8PinDirection)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <DIO_enuSetPinDirection+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <DIO_enuSetPinDirection+0x8>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <DIO_enuSetPinDirection+0xa>
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	8a 83       	std	Y+2, r24	; 0x02
    14b0:	6b 83       	std	Y+3, r22	; 0x03
    14b2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    14b4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8PinDirection <= BIT_MASK){
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	84 30       	cpi	r24, 0x04	; 4
    14ba:	08 f0       	brcs	.+2      	; 0x14be <DIO_enuSetPinDirection+0x1e>
    14bc:	cf c0       	rjmp	.+414    	; 0x165c <DIO_enuSetPinDirection+0x1bc>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	88 30       	cpi	r24, 0x08	; 8
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <DIO_enuSetPinDirection+0x26>
    14c4:	cb c0       	rjmp	.+406    	; 0x165c <DIO_enuSetPinDirection+0x1bc>
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <DIO_enuSetPinDirection+0x2e>
    14cc:	c7 c0       	rjmp	.+398    	; 0x165c <DIO_enuSetPinDirection+0x1bc>
		switch(Copy_u8PortID)
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3e 83       	std	Y+6, r19	; 0x06
    14d6:	2d 83       	std	Y+5, r18	; 0x05
    14d8:	6d 81       	ldd	r22, Y+5	; 0x05
    14da:	7e 81       	ldd	r23, Y+6	; 0x06
    14dc:	61 30       	cpi	r22, 0x01	; 1
    14de:	71 05       	cpc	r23, r1
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <DIO_enuSetPinDirection+0x44>
    14e2:	41 c0       	rjmp	.+130    	; 0x1566 <DIO_enuSetPinDirection+0xc6>
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	91 05       	cpc	r25, r1
    14ec:	34 f4       	brge	.+12     	; 0x14fa <DIO_enuSetPinDirection+0x5a>
    14ee:	2d 81       	ldd	r18, Y+5	; 0x05
    14f0:	3e 81       	ldd	r19, Y+6	; 0x06
    14f2:	21 15       	cp	r18, r1
    14f4:	31 05       	cpc	r19, r1
    14f6:	71 f0       	breq	.+28     	; 0x1514 <DIO_enuSetPinDirection+0x74>
    14f8:	b3 c0       	rjmp	.+358    	; 0x1660 <DIO_enuSetPinDirection+0x1c0>
    14fa:	6d 81       	ldd	r22, Y+5	; 0x05
    14fc:	7e 81       	ldd	r23, Y+6	; 0x06
    14fe:	62 30       	cpi	r22, 0x02	; 2
    1500:	71 05       	cpc	r23, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <DIO_enuSetPinDirection+0x66>
    1504:	59 c0       	rjmp	.+178    	; 0x15b8 <DIO_enuSetPinDirection+0x118>
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	83 30       	cpi	r24, 0x03	; 3
    150c:	91 05       	cpc	r25, r1
    150e:	09 f4       	brne	.+2      	; 0x1512 <DIO_enuSetPinDirection+0x72>
    1510:	7c c0       	rjmp	.+248    	; 0x160a <DIO_enuSetPinDirection+0x16a>
    1512:	a6 c0       	rjmp	.+332    	; 0x1660 <DIO_enuSetPinDirection+0x1c0>
				{
				case(DIO_PORTA):
				{  DDRA &= ~(BIT_MASK<< Copy_u8PinID);
    1514:	aa e3       	ldi	r26, 0x3A	; 58
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ea e3       	ldi	r30, 0x3A	; 58
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_enuSetPinDirection+0x90>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	2a 95       	dec	r18
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_enuSetPinDirection+0x8c>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
				   DDRA |= (Copy_u8PinDirection<< Copy_u8PinID);
    153a:	aa e3       	ldi	r26, 0x3A	; 58
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	ea e3       	ldi	r30, 0x3A	; 58
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	b9 01       	movw	r22, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_enuSetPinDirection+0xba>
    1556:	66 0f       	add	r22, r22
    1558:	77 1f       	adc	r23, r23
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DIO_enuSetPinDirection+0xb6>
    155e:	cb 01       	movw	r24, r22
    1560:	84 2b       	or	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	7d c0       	rjmp	.+250    	; 0x1660 <DIO_enuSetPinDirection+0x1c0>
				   break;
				}
				case(DIO_PORTB):
					{  DDRB &= ~(BIT_MASK<< Copy_u8PinID);
    1566:	a7 e3       	ldi	r26, 0x37	; 55
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e7 e3       	ldi	r30, 0x37	; 55
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_enuSetPinDirection+0xe2>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	2a 95       	dec	r18
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_enuSetPinDirection+0xde>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
					   DDRB |= (Copy_u8PinDirection<< Copy_u8PinID);
    158c:	a7 e3       	ldi	r26, 0x37	; 55
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e7 e3       	ldi	r30, 0x37	; 55
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	b9 01       	movw	r22, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_enuSetPinDirection+0x10c>
    15a8:	66 0f       	add	r22, r22
    15aa:	77 1f       	adc	r23, r23
    15ac:	8a 95       	dec	r24
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_enuSetPinDirection+0x108>
    15b0:	cb 01       	movw	r24, r22
    15b2:	84 2b       	or	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	54 c0       	rjmp	.+168    	; 0x1660 <DIO_enuSetPinDirection+0x1c0>
					   break;
					}
				case(DIO_PORTC):
					{  DDRC &= ~(BIT_MASK<<Copy_u8PinID);
    15b8:	a4 e3       	ldi	r26, 0x34	; 52
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e4 e3       	ldi	r30, 0x34	; 52
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_enuSetPinDirection+0x134>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	2a 95       	dec	r18
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_enuSetPinDirection+0x130>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
					   DDRC |= (Copy_u8PinDirection << Copy_u8PinID);
    15de:	a4 e3       	ldi	r26, 0x34	; 52
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e4 e3       	ldi	r30, 0x34	; 52
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	b9 01       	movw	r22, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_enuSetPinDirection+0x15e>
    15fa:	66 0f       	add	r22, r22
    15fc:	77 1f       	adc	r23, r23
    15fe:	8a 95       	dec	r24
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_enuSetPinDirection+0x15a>
    1602:	cb 01       	movw	r24, r22
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	2b c0       	rjmp	.+86     	; 0x1660 <DIO_enuSetPinDirection+0x1c0>
					   break;
					}
				case(DIO_PORTD):
					{  DDRD &= ~(BIT_MASK<< Copy_u8PinID);
    160a:	a1 e3       	ldi	r26, 0x31	; 49
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e1 e3       	ldi	r30, 0x31	; 49
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_enuSetPinDirection+0x186>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	2a 95       	dec	r18
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_enuSetPinDirection+0x182>
    162a:	80 95       	com	r24
    162c:	84 23       	and	r24, r20
    162e:	8c 93       	st	X, r24
					   DDRD |= (Copy_u8PinDirection<< Copy_u8PinID);
    1630:	a1 e3       	ldi	r26, 0x31	; 49
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e1 e3       	ldi	r30, 0x31	; 49
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	b9 01       	movw	r22, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_enuSetPinDirection+0x1b0>
    164c:	66 0f       	add	r22, r22
    164e:	77 1f       	adc	r23, r23
    1650:	8a 95       	dec	r24
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_enuSetPinDirection+0x1ac>
    1654:	cb 01       	movw	r24, r22
    1656:	84 2b       	or	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_enuSetPinDirection+0x1c0>
				 Local_enuErrorState=ES_OK;
				}
	}
			else
			{
				Local_enuErrorState=ES_OUT_OF_RANGE;
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	89 83       	std	Y+1, r24	; 0x01
			}
				return Local_enuErrorState;
    1660:	89 81       	ldd	r24, Y+1	; 0x01

}
    1662:	26 96       	adiw	r28, 0x06	; 6
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8PinValue)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <DIO_enuSetPinValue+0x6>
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_enuSetPinValue+0x8>
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_enuSetPinValue+0xa>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	8a 83       	std	Y+2, r24	; 0x02
    1684:	6b 83       	std	Y+3, r22	; 0x03
    1686:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1688:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8PinValue <= 1){
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	84 30       	cpi	r24, 0x04	; 4
    168e:	08 f0       	brcs	.+2      	; 0x1692 <DIO_enuSetPinValue+0x1e>
    1690:	cf c0       	rjmp	.+414    	; 0x1830 <DIO_enuSetPinValue+0x1bc>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	88 30       	cpi	r24, 0x08	; 8
    1696:	08 f0       	brcs	.+2      	; 0x169a <DIO_enuSetPinValue+0x26>
    1698:	cb c0       	rjmp	.+406    	; 0x1830 <DIO_enuSetPinValue+0x1bc>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <DIO_enuSetPinValue+0x2e>
    16a0:	c7 c0       	rjmp	.+398    	; 0x1830 <DIO_enuSetPinValue+0x1bc>
			switch(Copy_u8PortID)
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	3e 83       	std	Y+6, r19	; 0x06
    16aa:	2d 83       	std	Y+5, r18	; 0x05
    16ac:	6d 81       	ldd	r22, Y+5	; 0x05
    16ae:	7e 81       	ldd	r23, Y+6	; 0x06
    16b0:	61 30       	cpi	r22, 0x01	; 1
    16b2:	71 05       	cpc	r23, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <DIO_enuSetPinValue+0x44>
    16b6:	41 c0       	rjmp	.+130    	; 0x173a <DIO_enuSetPinValue+0xc6>
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	82 30       	cpi	r24, 0x02	; 2
    16be:	91 05       	cpc	r25, r1
    16c0:	34 f4       	brge	.+12     	; 0x16ce <DIO_enuSetPinValue+0x5a>
    16c2:	2d 81       	ldd	r18, Y+5	; 0x05
    16c4:	3e 81       	ldd	r19, Y+6	; 0x06
    16c6:	21 15       	cp	r18, r1
    16c8:	31 05       	cpc	r19, r1
    16ca:	71 f0       	breq	.+28     	; 0x16e8 <DIO_enuSetPinValue+0x74>
    16cc:	b3 c0       	rjmp	.+358    	; 0x1834 <DIO_enuSetPinValue+0x1c0>
    16ce:	6d 81       	ldd	r22, Y+5	; 0x05
    16d0:	7e 81       	ldd	r23, Y+6	; 0x06
    16d2:	62 30       	cpi	r22, 0x02	; 2
    16d4:	71 05       	cpc	r23, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <DIO_enuSetPinValue+0x66>
    16d8:	59 c0       	rjmp	.+178    	; 0x178c <DIO_enuSetPinValue+0x118>
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	83 30       	cpi	r24, 0x03	; 3
    16e0:	91 05       	cpc	r25, r1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <DIO_enuSetPinValue+0x72>
    16e4:	7c c0       	rjmp	.+248    	; 0x17de <DIO_enuSetPinValue+0x16a>
    16e6:	a6 c0       	rjmp	.+332    	; 0x1834 <DIO_enuSetPinValue+0x1c0>
					{
					case(DIO_PORTA):
					    {  PORTA &= ~(BIT_MASK<< Copy_u8PinID);
    16e8:	ab e3       	ldi	r26, 0x3B	; 59
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	eb e3       	ldi	r30, 0x3B	; 59
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_enuSetPinValue+0x90>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	2a 95       	dec	r18
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_enuSetPinValue+0x8c>
    1708:	80 95       	com	r24
    170a:	84 23       	and	r24, r20
    170c:	8c 93       	st	X, r24
					   	   PORTA |= (Copy_u8PinValue <<Copy_u8PinID);
    170e:	ab e3       	ldi	r26, 0x3B	; 59
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	eb e3       	ldi	r30, 0x3B	; 59
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	b9 01       	movw	r22, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <DIO_enuSetPinValue+0xba>
    172a:	66 0f       	add	r22, r22
    172c:	77 1f       	adc	r23, r23
    172e:	8a 95       	dec	r24
    1730:	e2 f7       	brpl	.-8      	; 0x172a <DIO_enuSetPinValue+0xb6>
    1732:	cb 01       	movw	r24, r22
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	7d c0       	rjmp	.+250    	; 0x1834 <DIO_enuSetPinValue+0x1c0>
					   	   break;
					    }
					case(DIO_PORTB):
						{  PORTB &= ~(BIT_MASK<<Copy_u8PinID);
    173a:	a8 e3       	ldi	r26, 0x38	; 56
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e8 e3       	ldi	r30, 0x38	; 56
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <DIO_enuSetPinValue+0xe2>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	2a 95       	dec	r18
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <DIO_enuSetPinValue+0xde>
    175a:	80 95       	com	r24
    175c:	84 23       	and	r24, r20
    175e:	8c 93       	st	X, r24
						   PORTB |= (Copy_u8PinValue<< Copy_u8PinID);
    1760:	a8 e3       	ldi	r26, 0x38	; 56
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	b9 01       	movw	r22, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_enuSetPinValue+0x10c>
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	8a 95       	dec	r24
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_enuSetPinValue+0x108>
    1784:	cb 01       	movw	r24, r22
    1786:	84 2b       	or	r24, r20
    1788:	8c 93       	st	X, r24
    178a:	54 c0       	rjmp	.+168    	; 0x1834 <DIO_enuSetPinValue+0x1c0>
						   break;
						}
					case(DIO_PORTC):
						{  PORTC &= ~(BIT_MASK<< Copy_u8PinID);
    178c:	a5 e3       	ldi	r26, 0x35	; 53
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e5 e3       	ldi	r30, 0x35	; 53
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_enuSetPinValue+0x134>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	2a 95       	dec	r18
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_enuSetPinValue+0x130>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
						   PORTC |= (Copy_u8PinValue<< Copy_u8PinID);
    17b2:	a5 e3       	ldi	r26, 0x35	; 53
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e5 e3       	ldi	r30, 0x35	; 53
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	b9 01       	movw	r22, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_enuSetPinValue+0x15e>
    17ce:	66 0f       	add	r22, r22
    17d0:	77 1f       	adc	r23, r23
    17d2:	8a 95       	dec	r24
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_enuSetPinValue+0x15a>
    17d6:	cb 01       	movw	r24, r22
    17d8:	84 2b       	or	r24, r20
    17da:	8c 93       	st	X, r24
    17dc:	2b c0       	rjmp	.+86     	; 0x1834 <DIO_enuSetPinValue+0x1c0>
						   break;
						}
					case(DIO_PORTD):
						{  PORTD &= ~(BIT_MASK<< Copy_u8PinID);
    17de:	a2 e3       	ldi	r26, 0x32	; 50
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e2 e3       	ldi	r30, 0x32	; 50
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_enuSetPinValue+0x186>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	2a 95       	dec	r18
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_enuSetPinValue+0x182>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
						   PORTD |= (Copy_u8PinValue<< Copy_u8PinID);
    1804:	a2 e3       	ldi	r26, 0x32	; 50
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e2 e3       	ldi	r30, 0x32	; 50
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	b9 01       	movw	r22, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <DIO_enuSetPinValue+0x1b0>
    1820:	66 0f       	add	r22, r22
    1822:	77 1f       	adc	r23, r23
    1824:	8a 95       	dec	r24
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <DIO_enuSetPinValue+0x1ac>
    1828:	cb 01       	movw	r24, r22
    182a:	84 2b       	or	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <DIO_enuSetPinValue+0x1c0>
					 Local_enuErrorState=ES_OK;
					}
		}
				else
				{
					Local_enuErrorState=ES_OUT_OF_RANGE;
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	89 83       	std	Y+1, r24	; 0x01
				}
					return Local_enuErrorState;
    1834:	89 81       	ldd	r24, Y+1	; 0x01


}
    1836:	26 96       	adiw	r28, 0x06	; 6
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <DIO_enuTogPin>:

ES_t DIO_enuTogPin (u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <DIO_enuTogPin+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <DIO_enuTogPin+0x8>
    1850:	0f 92       	push	r0
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	8a 83       	std	Y+2, r24	; 0x02
    1858:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    185a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_PIN7 ){
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	84 30       	cpi	r24, 0x04	; 4
    1860:	08 f0       	brcs	.+2      	; 0x1864 <DIO_enuTogPin+0x1c>
    1862:	73 c0       	rjmp	.+230    	; 0x194a <DIO_enuTogPin+0x102>
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	88 30       	cpi	r24, 0x08	; 8
    1868:	08 f0       	brcs	.+2      	; 0x186c <DIO_enuTogPin+0x24>
    186a:	6f c0       	rjmp	.+222    	; 0x194a <DIO_enuTogPin+0x102>
				switch(Copy_u8PortID)
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3d 83       	std	Y+5, r19	; 0x05
    1874:	2c 83       	std	Y+4, r18	; 0x04
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	9d 81       	ldd	r25, Y+5	; 0x05
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	91 05       	cpc	r25, r1
    187e:	49 f1       	breq	.+82     	; 0x18d2 <DIO_enuTogPin+0x8a>
    1880:	2c 81       	ldd	r18, Y+4	; 0x04
    1882:	3d 81       	ldd	r19, Y+5	; 0x05
    1884:	22 30       	cpi	r18, 0x02	; 2
    1886:	31 05       	cpc	r19, r1
    1888:	2c f4       	brge	.+10     	; 0x1894 <DIO_enuTogPin+0x4c>
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	61 f0       	breq	.+24     	; 0x18aa <DIO_enuTogPin+0x62>
    1892:	5d c0       	rjmp	.+186    	; 0x194e <DIO_enuTogPin+0x106>
    1894:	2c 81       	ldd	r18, Y+4	; 0x04
    1896:	3d 81       	ldd	r19, Y+5	; 0x05
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	71 f1       	breq	.+92     	; 0x18fa <DIO_enuTogPin+0xb2>
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	91 05       	cpc	r25, r1
    18a6:	e9 f1       	breq	.+122    	; 0x1922 <DIO_enuTogPin+0xda>
    18a8:	52 c0       	rjmp	.+164    	; 0x194e <DIO_enuTogPin+0x106>
						{
						case(DIO_PORTA):
						{  PORTA ^= (BIT_MASK<< Copy_u8PinID);
    18aa:	ab e3       	ldi	r26, 0x3B	; 59
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	eb e3       	ldi	r30, 0x3B	; 59
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_enuTogPin+0x80>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <DIO_enuTogPin+0x7c>
    18cc:	84 27       	eor	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	3e c0       	rjmp	.+124    	; 0x194e <DIO_enuTogPin+0x106>

						   break;
						}
						case(DIO_PORTB):
							{  PORTB ^= (BIT_MASK<< Copy_u8PinID);
    18d2:	a8 e3       	ldi	r26, 0x38	; 56
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e8 e3       	ldi	r30, 0x38	; 56
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_enuTogPin+0xa8>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_enuTogPin+0xa4>
    18f4:	84 27       	eor	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	2a c0       	rjmp	.+84     	; 0x194e <DIO_enuTogPin+0x106>

							   break;
							}
						case(DIO_PORTC):
							{  PORTC ^= (BIT_MASK<< Copy_u8PinID);
    18fa:	a5 e3       	ldi	r26, 0x35	; 53
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e3       	ldi	r30, 0x35	; 53
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_enuTogPin+0xd0>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_enuTogPin+0xcc>
    191c:	84 27       	eor	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	16 c0       	rjmp	.+44     	; 0x194e <DIO_enuTogPin+0x106>

							   break;
							}
						case(DIO_PORTD):
							{  PORTD ^= (BIT_MASK<< Copy_u8PinID);
    1922:	a2 e3       	ldi	r26, 0x32	; 50
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e2 e3       	ldi	r30, 0x32	; 50
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_enuTogPin+0xf8>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <DIO_enuTogPin+0xf4>
    1944:	84 27       	eor	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	02 c0       	rjmp	.+4      	; 0x194e <DIO_enuTogPin+0x106>
						 Local_enuErrorState=ES_OK;
						}
			}
					else
					{
						Local_enuErrorState=ES_OUT_OF_RANGE;
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	89 83       	std	Y+1, r24	; 0x01
					}
						return Local_enuErrorState;
    194e:	89 81       	ldd	r24, Y+1	; 0x01



}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue (u8 Copy_u8PortID,u8 Copy_u8PinID , u8 *Copy_pu8PintValue)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	27 97       	sbiw	r28, 0x07	; 7
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	8a 83       	std	Y+2, r24	; 0x02
    1976:	6b 83       	std	Y+3, r22	; 0x03
    1978:	5d 83       	std	Y+5, r21	; 0x05
    197a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    197c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8PintValue != NULL)
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	9d 81       	ldd	r25, Y+5	; 0x05
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	09 f4       	brne	.+2      	; 0x1988 <DIO_enuGetPinValue+0x28>
    1986:	7c c0       	rjmp	.+248    	; 0x1a80 <DIO_enuGetPinValue+0x120>
		{
			if(Copy_u8PortID <= DIO_PORTD &&  Copy_u8PinID <=DIO_PIN7){
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	84 30       	cpi	r24, 0x04	; 4
    198c:	08 f0       	brcs	.+2      	; 0x1990 <DIO_enuGetPinValue+0x30>
    198e:	75 c0       	rjmp	.+234    	; 0x1a7a <DIO_enuGetPinValue+0x11a>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	88 30       	cpi	r24, 0x08	; 8
    1994:	08 f0       	brcs	.+2      	; 0x1998 <DIO_enuGetPinValue+0x38>
    1996:	71 c0       	rjmp	.+226    	; 0x1a7a <DIO_enuGetPinValue+0x11a>
				switch(Copy_u8PortID)
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	3f 83       	std	Y+7, r19	; 0x07
    19a0:	2e 83       	std	Y+6, r18	; 0x06
    19a2:	4e 81       	ldd	r20, Y+6	; 0x06
    19a4:	5f 81       	ldd	r21, Y+7	; 0x07
    19a6:	41 30       	cpi	r20, 0x01	; 1
    19a8:	51 05       	cpc	r21, r1
    19aa:	59 f1       	breq	.+86     	; 0x1a02 <DIO_enuGetPinValue+0xa2>
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	9f 81       	ldd	r25, Y+7	; 0x07
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	91 05       	cpc	r25, r1
    19b4:	34 f4       	brge	.+12     	; 0x19c2 <DIO_enuGetPinValue+0x62>
    19b6:	2e 81       	ldd	r18, Y+6	; 0x06
    19b8:	3f 81       	ldd	r19, Y+7	; 0x07
    19ba:	21 15       	cp	r18, r1
    19bc:	31 05       	cpc	r19, r1
    19be:	69 f0       	breq	.+26     	; 0x19da <DIO_enuGetPinValue+0x7a>
    19c0:	61 c0       	rjmp	.+194    	; 0x1a84 <DIO_enuGetPinValue+0x124>
    19c2:	4e 81       	ldd	r20, Y+6	; 0x06
    19c4:	5f 81       	ldd	r21, Y+7	; 0x07
    19c6:	42 30       	cpi	r20, 0x02	; 2
    19c8:	51 05       	cpc	r21, r1
    19ca:	79 f1       	breq	.+94     	; 0x1a2a <DIO_enuGetPinValue+0xca>
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	9f 81       	ldd	r25, Y+7	; 0x07
    19d0:	83 30       	cpi	r24, 0x03	; 3
    19d2:	91 05       	cpc	r25, r1
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <DIO_enuGetPinValue+0x78>
    19d6:	3d c0       	rjmp	.+122    	; 0x1a52 <DIO_enuGetPinValue+0xf2>
    19d8:	55 c0       	rjmp	.+170    	; 0x1a84 <DIO_enuGetPinValue+0x124>
				{
					 case(DIO_PORTA):
							{
						 *Copy_pu8PintValue=((PINA >> Copy_u8PinID) & BIT_MASK );
    19da:	e9 e3       	ldi	r30, 0x39	; 57
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a9 01       	movw	r20, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <DIO_enuGetPinValue+0x92>
    19ee:	55 95       	asr	r21
    19f0:	47 95       	ror	r20
    19f2:	8a 95       	dec	r24
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <DIO_enuGetPinValue+0x8e>
    19f6:	ca 01       	movw	r24, r20
    19f8:	81 70       	andi	r24, 0x01	; 1
    19fa:	ec 81       	ldd	r30, Y+4	; 0x04
    19fc:	fd 81       	ldd	r31, Y+5	; 0x05
    19fe:	80 83       	st	Z, r24
    1a00:	41 c0       	rjmp	.+130    	; 0x1a84 <DIO_enuGetPinValue+0x124>
							   break;
							}
					case(DIO_PORTB):
				     		{
						 *Copy_pu8PintValue=((PINB >> Copy_u8PinID) & BIT_MASK );
    1a02:	e6 e3       	ldi	r30, 0x36	; 54
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a9 01       	movw	r20, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <DIO_enuGetPinValue+0xba>
    1a16:	55 95       	asr	r21
    1a18:	47 95       	ror	r20
    1a1a:	8a 95       	dec	r24
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <DIO_enuGetPinValue+0xb6>
    1a1e:	ca 01       	movw	r24, r20
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	ec 81       	ldd	r30, Y+4	; 0x04
    1a24:	fd 81       	ldd	r31, Y+5	; 0x05
    1a26:	80 83       	st	Z, r24
    1a28:	2d c0       	rjmp	.+90     	; 0x1a84 <DIO_enuGetPinValue+0x124>
							   break;
							}
					case(DIO_PORTC):
				        	{
						*Copy_pu8PintValue=((PINC >> Copy_u8PinID) & BIT_MASK );
    1a2a:	e3 e3       	ldi	r30, 0x33	; 51
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_enuGetPinValue+0xe2>
    1a3e:	55 95       	asr	r21
    1a40:	47 95       	ror	r20
    1a42:	8a 95       	dec	r24
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <DIO_enuGetPinValue+0xde>
    1a46:	ca 01       	movw	r24, r20
    1a48:	81 70       	andi	r24, 0x01	; 1
    1a4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a4c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a4e:	80 83       	st	Z, r24
    1a50:	19 c0       	rjmp	.+50     	; 0x1a84 <DIO_enuGetPinValue+0x124>
							    break;
							}
					case(DIO_PORTD):
							{
						*Copy_pu8PintValue=((PIND >> Copy_u8PinID) & BIT_MASK );
    1a52:	e0 e3       	ldi	r30, 0x30	; 48
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a9 01       	movw	r20, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <DIO_enuGetPinValue+0x10a>
    1a66:	55 95       	asr	r21
    1a68:	47 95       	ror	r20
    1a6a:	8a 95       	dec	r24
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <DIO_enuGetPinValue+0x106>
    1a6e:	ca 01       	movw	r24, r20
    1a70:	81 70       	andi	r24, 0x01	; 1
    1a72:	ec 81       	ldd	r30, Y+4	; 0x04
    1a74:	fd 81       	ldd	r31, Y+5	; 0x05
    1a76:	80 83       	st	Z, r24
    1a78:	05 c0       	rjmp	.+10     	; 0x1a84 <DIO_enuGetPinValue+0x124>
							Local_enuErrorState=ES_OK;
				}
			}
			else
			{
				Local_enuErrorState=ES_OUT_OF_RANGE;
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <DIO_enuGetPinValue+0x124>
			}
		}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01


}
    1a86:	27 96       	adiw	r28, 0x07	; 7
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <ADC_enuInit>:

#include "ADC_Private.h"
#include "ADC_Config.h"

ES_t ADC_enuInit()
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	0f 92       	push	r0
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_OK;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	89 83       	std	Y+1, r24	; 0x01
#if VOLT_REF == AREF
	ADMUX &= ~(1<<6);
	ADMUX &= ~(1<<7);

#elif VOLT_REF == AVCC
	ADMUX |= (1<<6);
    1aa6:	a7 e2       	ldi	r26, 0x27	; 39
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e7 e2       	ldi	r30, 0x27	; 39
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 64       	ori	r24, 0x40	; 64
    1ab2:	8c 93       	st	X, r24
	ADMUX &= ~(1<<7);
    1ab4:	a7 e2       	ldi	r26, 0x27	; 39
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e7 e2       	ldi	r30, 0x27	; 39
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	8f 77       	andi	r24, 0x7F	; 127
    1ac0:	8c 93       	st	X, r24



	/* select result adjust*/
#if ADC_ADJUST == RIGHT
	ADMUX &= ~(1<<5);
    1ac2:	a7 e2       	ldi	r26, 0x27	; 39
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e7 e2       	ldi	r30, 0x27	; 39
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8f 7d       	andi	r24, 0xDF	; 223
    1ace:	8c 93       	st	X, r24
	ADCSRA &= ~(1<<0);
	ADCSRA |= (1<<1);
	ADCSRA &= ~(1<<2);

#elif ADC_PRES == PRES_8
	ADCSRA |= (1<<0);
    1ad0:	a6 e2       	ldi	r26, 0x26	; 38
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e6 e2       	ldi	r30, 0x26	; 38
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	81 60       	ori	r24, 0x01	; 1
    1adc:	8c 93       	st	X, r24
	ADCSRA |= (1<<1);
    1ade:	a6 e2       	ldi	r26, 0x26	; 38
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e6 e2       	ldi	r30, 0x26	; 38
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	82 60       	ori	r24, 0x02	; 2
    1aea:	8c 93       	st	X, r24
	ADCSRA &= ~(1<<2);
    1aec:	a6 e2       	ldi	r26, 0x26	; 38
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e6 e2       	ldi	r30, 0x26	; 38
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	8b 7f       	andi	r24, 0xFB	; 251
    1af8:	8c 93       	st	X, r24
	ADCSRA |= (1<<2);
#else
#error"pres choice is wrong"
#endif

	return Local_enuErrorState;
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <ADC_enuSelectChannel>:


ES_t ADC_enuSelectChannel(u8 Copy_u8PositivePin,u8 Copy_u8CNegativePin,u8 Copy_u8GAIN)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <ADC_enuSelectChannel+0x6>
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <ADC_enuSelectChannel+0x8>
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	8a 83       	std	Y+2, r24	; 0x02
    1b12:	6b 83       	std	Y+3, r22	; 0x03
    1b14:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b16:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &= MASK;
    1b18:	a7 e2       	ldi	r26, 0x27	; 39
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e7 e2       	ldi	r30, 0x27	; 39
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	80 7e       	andi	r24, 0xE0	; 224
    1b24:	8c 93       	st	X, r24
	/* if negative pin <0 "invalid pinId" ,user considered Diff mode,
	 * and ifn't user considered Single_Ended mode */
if ( Copy_u8CNegativePin >= 0 )

		ADMUX |= Copy_u8PositivePin;
    1b26:	a7 e2       	ldi	r26, 0x27	; 39
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e7 e2       	ldi	r30, 0x27	; 39
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	90 81       	ld	r25, Z
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	89 2b       	or	r24, r25
    1b34:	8c 93       	st	X, r24
		}
}



	return Local_enuErrorState;
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <ADC_vidEnableADC>:

void ADC_vidEnableADC()
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
	/*        Enable ADC            */
	ADCSRA |= (1<<7);
    1b4e:	a6 e2       	ldi	r26, 0x26	; 38
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e6 e2       	ldi	r30, 0x26	; 38
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	80 68       	ori	r24, 0x80	; 128
    1b5a:	8c 93       	st	X, r24
}
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(u16* Copy_u16ADCRead)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <ADC_enuStartConversion+0x6>
    1b68:	0f 92       	push	r0
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	9b 83       	std	Y+3, r25	; 0x03
    1b70:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1b72:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16ADCRead != NULL)
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	9b 81       	ldd	r25, Y+3	; 0x03
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	a1 f1       	breq	.+104    	; 0x1be4 <ADC_enuStartConversion+0x82>
	{

		/*        start  ADC  conversion              */
		ADCSRA |= (1<<6);
    1b7c:	a6 e2       	ldi	r26, 0x26	; 38
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e6 e2       	ldi	r30, 0x26	; 38
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 64       	ori	r24, 0x40	; 64
    1b88:	8c 93       	st	X, r24

		/*      busy waiting until ADIF get set        */
		while(((ADCSRA  >> 4) & 1) == 0);
    1b8a:	e6 e2       	ldi	r30, 0x26	; 38
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	82 95       	swap	r24
    1b92:	8f 70       	andi	r24, 0x0F	; 15
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	81 70       	andi	r24, 0x01	; 1
    1b9a:	90 70       	andi	r25, 0x00	; 0
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	a9 f3       	breq	.-22     	; 0x1b8a <ADC_enuStartConversion+0x28>

		/*    clear  ADIF    */
		ADCSRA &= ~(1<<4);
    1ba0:	a6 e2       	ldi	r26, 0x26	; 38
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e6 e2       	ldi	r30, 0x26	; 38
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	8f 7e       	andi	r24, 0xEF	; 239
    1bac:	8c 93       	st	X, r24

		/* get read of ADCL and ADCH after conversion  */
#if ADC_ADJUST == RIGHT
		*Copy_u16ADCRead = ADCL;
    1bae:	e4 e2       	ldi	r30, 0x24	; 36
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	ea 81       	ldd	r30, Y+2	; 0x02
    1bba:	fb 81       	ldd	r31, Y+3	; 0x03
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	80 83       	st	Z, r24
		*Copy_u16ADCRead |= (ADCH << 8);
    1bc0:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc2:	fb 81       	ldd	r31, Y+3	; 0x03
    1bc4:	20 81       	ld	r18, Z
    1bc6:	31 81       	ldd	r19, Z+1	; 0x01
    1bc8:	e5 e2       	ldi	r30, 0x25	; 37
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	98 2f       	mov	r25, r24
    1bd4:	88 27       	eor	r24, r24
    1bd6:	82 2b       	or	r24, r18
    1bd8:	93 2b       	or	r25, r19
    1bda:	ea 81       	ldd	r30, Y+2	; 0x02
    1bdc:	fb 81       	ldd	r31, Y+3	; 0x03
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <ADC_enuStartConversion+0x86>
#endif

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <LCD_enuInit>:

#include "util/delay.h"


ES_t LCD_enuInit(void)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	e9 97       	sbiw	r28, 0x39	; 57
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1c0a:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	62 e0       	ldi	r22, 0x02	; 2
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1c2a:	83 e0       	ldi	r24, 0x03	; 3
    1c2c:	62 e0       	ldi	r22, 0x02	; 2
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	61 e0       	ldi	r22, 0x01	; 1
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1c3e:	83 e0       	ldi	r24, 0x03	; 3
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	67 e0       	ldi	r22, 0x07	; 7
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	ac e0       	ldi	r26, 0x0C	; 12
    1c58:	b2 e4       	ldi	r27, 0x42	; 66
    1c5a:	8d ab       	std	Y+53, r24	; 0x35
    1c5c:	9e ab       	std	Y+54, r25	; 0x36
    1c5e:	af ab       	std	Y+55, r26	; 0x37
    1c60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	6d a9       	ldd	r22, Y+53	; 0x35
    1c64:	7e a9       	ldd	r23, Y+54	; 0x36
    1c66:	8f a9       	ldd	r24, Y+55	; 0x37
    1c68:	98 ad       	ldd	r25, Y+56	; 0x38
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a e7       	ldi	r20, 0x7A	; 122
    1c70:	53 e4       	ldi	r21, 0x43	; 67
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	89 ab       	std	Y+49, r24	; 0x31
    1c7c:	9a ab       	std	Y+50, r25	; 0x32
    1c7e:	ab ab       	std	Y+51, r26	; 0x33
    1c80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c82:	69 a9       	ldd	r22, Y+49	; 0x31
    1c84:	7a a9       	ldd	r23, Y+50	; 0x32
    1c86:	8b a9       	ldd	r24, Y+51	; 0x33
    1c88:	9c a9       	ldd	r25, Y+52	; 0x34
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <LCD_enuInit+0xae>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	98 ab       	std	Y+48, r25	; 0x30
    1ca0:	8f a7       	std	Y+47, r24	; 0x2f
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1ca4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca8:	8b a9       	ldd	r24, Y+51	; 0x33
    1caa:	9c a9       	ldd	r25, Y+52	; 0x34
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	6d a9       	ldd	r22, Y+53	; 0x35
    1cbe:	7e a9       	ldd	r23, Y+54	; 0x36
    1cc0:	8f a9       	ldd	r24, Y+55	; 0x37
    1cc2:	98 ad       	ldd	r25, Y+56	; 0x38
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	98 ab       	std	Y+48, r25	; 0x30
    1ce2:	8f a7       	std	Y+47, r24	; 0x2f
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_enuInit+0x10e>
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9e a7       	std	Y+46, r25	; 0x2e
    1cec:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cee:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cf0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_enuInit+0xfc>
    1cf6:	9e a7       	std	Y+46, r25	; 0x2e
    1cf8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	98 ab       	std	Y+48, r25	; 0x30
    1d02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d06:	98 a9       	ldd	r25, Y+48	; 0x30
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <LCD_enuInit+0xf0>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d10:	7a a9       	ldd	r23, Y+50	; 0x32
    1d12:	8b a9       	ldd	r24, Y+51	; 0x33
    1d14:	9c a9       	ldd	r25, Y+52	; 0x34
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	98 ab       	std	Y+48, r25	; 0x30
    1d20:	8f a7       	std	Y+47, r24	; 0x2f
    1d22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d24:	98 a9       	ldd	r25, Y+48	; 0x30
    1d26:	9c a7       	std	Y+44, r25	; 0x2c
    1d28:	8b a7       	std	Y+43, r24	; 0x2b
    1d2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_enuInit+0x138>
    1d32:	9c a7       	std	Y+44, r25	; 0x2c
    1d34:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	66 e0       	ldi	r22, 0x06	; 6
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	65 e0       	ldi	r22, 0x05	; 5
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	64 e0       	ldi	r22, 0x04	; 4
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	63 e0       	ldi	r22, 0x03	; 3
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    1d5e:	88 e3       	ldi	r24, 0x38	; 56
    1d60:	0e 94 fe 12 	call	0x25fc	; 0x25fc <LCD_invidSendCommend>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e8       	ldi	r26, 0x80	; 128
    1d6a:	bf e3       	ldi	r27, 0x3F	; 63
    1d6c:	8f a3       	std	Y+39, r24	; 0x27
    1d6e:	98 a7       	std	Y+40, r25	; 0x28
    1d70:	a9 a7       	std	Y+41, r26	; 0x29
    1d72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	6f a1       	ldd	r22, Y+39	; 0x27
    1d76:	78 a5       	ldd	r23, Y+40	; 0x28
    1d78:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a e7       	ldi	r20, 0x7A	; 122
    1d82:	53 e4       	ldi	r21, 0x43	; 67
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8b a3       	std	Y+35, r24	; 0x23
    1d8e:	9c a3       	std	Y+36, r25	; 0x24
    1d90:	ad a3       	std	Y+37, r26	; 0x25
    1d92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d94:	6b a1       	ldd	r22, Y+35	; 0x23
    1d96:	7c a1       	ldd	r23, Y+36	; 0x24
    1d98:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <LCD_enuInit+0x1c0>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9a a3       	std	Y+34, r25	; 0x22
    1db2:	89 a3       	std	Y+33, r24	; 0x21
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    1db6:	6b a1       	ldd	r22, Y+35	; 0x23
    1db8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dba:	8d a1       	ldd	r24, Y+37	; 0x25
    1dbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9a a3       	std	Y+34, r25	; 0x22
    1df4:	89 a3       	std	Y+33, r24	; 0x21
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <LCD_enuInit+0x220>
    1df8:	89 e1       	ldi	r24, 0x19	; 25
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	98 a3       	std	Y+32, r25	; 0x20
    1dfe:	8f 8f       	std	Y+31, r24	; 0x1f
    1e00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e02:	98 a1       	ldd	r25, Y+32	; 0x20
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_enuInit+0x20e>
    1e08:	98 a3       	std	Y+32, r25	; 0x20
    1e0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	9a a3       	std	Y+34, r25	; 0x22
    1e14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	89 a1       	ldd	r24, Y+33	; 0x21
    1e18:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <LCD_enuInit+0x202>
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	6b a1       	ldd	r22, Y+35	; 0x23
    1e22:	7c a1       	ldd	r23, Y+36	; 0x24
    1e24:	8d a1       	ldd	r24, Y+37	; 0x25
    1e26:	9e a1       	ldd	r25, Y+38	; 0x26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9a a3       	std	Y+34, r25	; 0x22
    1e32:	89 a3       	std	Y+33, r24	; 0x21
    1e34:	89 a1       	ldd	r24, Y+33	; 0x21
    1e36:	9a a1       	ldd	r25, Y+34	; 0x22
    1e38:	9e 8f       	std	Y+30, r25	; 0x1e
    1e3a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_enuInit+0x24a>
    1e44:	9e 8f       	std	Y+30, r25	; 0x1e
    1e46:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0c);  //display on , cursor on , blinking on
    1e48:	8c e0       	ldi	r24, 0x0C	; 12
    1e4a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <LCD_invidSendCommend>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	a0 e8       	ldi	r26, 0x80	; 128
    1e54:	bf e3       	ldi	r27, 0x3F	; 63
    1e56:	89 8f       	std	Y+25, r24	; 0x19
    1e58:	9a 8f       	std	Y+26, r25	; 0x1a
    1e5a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4a e7       	ldi	r20, 0x7A	; 122
    1e6c:	53 e4       	ldi	r21, 0x43	; 67
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	8d 8b       	std	Y+21, r24	; 0x15
    1e78:	9e 8b       	std	Y+22, r25	; 0x16
    1e7a:	af 8b       	std	Y+23, r26	; 0x17
    1e7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e80:	7e 89       	ldd	r23, Y+22	; 0x16
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e8       	ldi	r20, 0x80	; 128
    1e8c:	5f e3       	ldi	r21, 0x3F	; 63
    1e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e92:	88 23       	and	r24, r24
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <LCD_enuInit+0x2aa>
		__ticks = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9c 8b       	std	Y+20, r25	; 0x14
    1e9c:	8b 8b       	std	Y+19, r24	; 0x13
    1e9e:	3f c0       	rjmp	.+126    	; 0x1f1e <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    1ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	3f ef       	ldi	r19, 0xFF	; 255
    1eac:	4f e7       	ldi	r20, 0x7F	; 127
    1eae:	57 e4       	ldi	r21, 0x47	; 71
    1eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	4c f5       	brge	.+82     	; 0x1f0a <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ebc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ebe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e2       	ldi	r20, 0x20	; 32
    1ec6:	51 e4       	ldi	r21, 0x41	; 65
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9c 8b       	std	Y+20, r25	; 0x14
    1ede:	8b 8b       	std	Y+19, r24	; 0x13
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <LCD_enuInit+0x30a>
    1ee2:	89 e1       	ldi	r24, 0x19	; 25
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9a 8b       	std	Y+18, r25	; 0x12
    1ee8:	89 8b       	std	Y+17, r24	; 0x11
    1eea:	89 89       	ldd	r24, Y+17	; 0x11
    1eec:	9a 89       	ldd	r25, Y+18	; 0x12
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_enuInit+0x2f8>
    1ef2:	9a 8b       	std	Y+18, r25	; 0x12
    1ef4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	9c 8b       	std	Y+20, r25	; 0x14
    1efe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f00:	8b 89       	ldd	r24, Y+19	; 0x13
    1f02:	9c 89       	ldd	r25, Y+20	; 0x14
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <LCD_enuInit+0x2ec>
    1f08:	14 c0       	rjmp	.+40     	; 0x1f32 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f10:	98 8d       	ldd	r25, Y+24	; 0x18
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9c 8b       	std	Y+20, r25	; 0x14
    1f1c:	8b 8b       	std	Y+19, r24	; 0x13
    1f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f20:	9c 89       	ldd	r25, Y+20	; 0x14
    1f22:	98 8b       	std	Y+16, r25	; 0x10
    1f24:	8f 87       	std	Y+15, r24	; 0x0f
    1f26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f28:	98 89       	ldd	r25, Y+16	; 0x10
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <LCD_enuInit+0x334>
    1f2e:	98 8b       	std	Y+16, r25	; 0x10
    1f30:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);  // Clear display
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	0e 94 fe 12 	call	0x25fc	; 0x25fc <LCD_invidSendCommend>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a0 e0       	ldi	r26, 0x00	; 0
    1f3e:	b0 e4       	ldi	r27, 0x40	; 64
    1f40:	8b 87       	std	Y+11, r24	; 0x0b
    1f42:	9c 87       	std	Y+12, r25	; 0x0c
    1f44:	ad 87       	std	Y+13, r26	; 0x0d
    1f46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	4a e7       	ldi	r20, 0x7A	; 122
    1f56:	53 e4       	ldi	r21, 0x43	; 67
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	8f 83       	std	Y+7, r24	; 0x07
    1f62:	98 87       	std	Y+8, r25	; 0x08
    1f64:	a9 87       	std	Y+9, r26	; 0x09
    1f66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f68:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6a:	78 85       	ldd	r23, Y+8	; 0x08
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <LCD_enuInit+0x394>
		__ticks = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	8d 83       	std	Y+5, r24	; 0x05
    1f88:	3f c0       	rjmp	.+126    	; 0x2008 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    1f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8c:	78 85       	ldd	r23, Y+8	; 0x08
    1f8e:	89 85       	ldd	r24, Y+9	; 0x09
    1f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	3f ef       	ldi	r19, 0xFF	; 255
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	57 e4       	ldi	r21, 0x47	; 71
    1f9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	4c f5       	brge	.+82     	; 0x1ff4 <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9e 83       	std	Y+6, r25	; 0x06
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <LCD_enuInit+0x3f4>
    1fcc:	89 e1       	ldi	r24, 0x19	; 25
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9c 83       	std	Y+4, r25	; 0x04
    1fd2:	8b 83       	std	Y+3, r24	; 0x03
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_enuInit+0x3e2>
    1fdc:	9c 83       	std	Y+4, r25	; 0x04
    1fde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	69 f7       	brne	.-38     	; 0x1fcc <LCD_enuInit+0x3d6>
    1ff2:	14 c0       	rjmp	.+40     	; 0x201c <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff6:	78 85       	ldd	r23, Y+8	; 0x08
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	8d 83       	std	Y+5, r24	; 0x05
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	9a 83       	std	Y+2, r25	; 0x02
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	9a 81       	ldd	r25, Y+2	; 0x02
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_enuInit+0x41e>
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);  //write from left to write without shifting
    201c:	86 e0       	ldi	r24, 0x06	; 6
    201e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <LCD_invidSendCommend>

	return Local_enuErrorState;
    2022:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2024:	e9 96       	adiw	r28, 0x39	; 57
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <LCD_enuDisplayChar+0x6>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2042:	19 82       	std	Y+1, r1	; 0x01
	//  Set RS as Data
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    2044:	82 e0       	ldi	r24, 0x02	; 2
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	41 e0       	ldi	r20, 0x01	; 1
    204a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	0e 94 a1 11 	call	0x2342	; 0x2342 <LCD_vidLatch>

	return Local_enuErrorState;
    2054:	89 81       	ldd	r24, Y+1	; 0x01
}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <LCD_enuWriteString>:




ES_t LCD_enuWriteString(u8 *Copy_PArrchars)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <LCD_enuWriteString+0x6>
    2066:	00 d0       	rcall	.+0      	; 0x2068 <LCD_enuWriteString+0x8>
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2070:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iter = 0;
    2072:	19 82       	std	Y+1, r1	; 0x01
    2074:	0e c0       	rjmp	.+28     	; 0x2092 <LCD_enuWriteString+0x32>
	while(Copy_PArrchars[Local_u8Iter] != '\0')
	{
		LCD_enuDisplayChar(Copy_PArrchars[Local_u8Iter]);
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	fc 01       	movw	r30, r24
    2082:	e2 0f       	add	r30, r18
    2084:	f3 1f       	adc	r31, r19
    2086:	80 81       	ld	r24, Z
    2088:	0e 94 1b 10 	call	0x2036	; 0x2036 <LCD_enuDisplayChar>
		Local_u8Iter++;
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	89 83       	std	Y+1, r24	; 0x01
ES_t LCD_enuWriteString(u8 *Copy_PArrchars)
{
	ES_t Local_enuErrorState = ES_NOK;

	u8 Local_u8Iter = 0;
	while(Copy_PArrchars[Local_u8Iter] != '\0')
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	fc 01       	movw	r30, r24
    209e:	e2 0f       	add	r30, r18
    20a0:	f3 1f       	adc	r31, r19
    20a2:	80 81       	ld	r24, Z
    20a4:	88 23       	and	r24, r24
    20a6:	39 f7       	brne	.-50     	; 0x2076 <LCD_enuWriteString+0x16>
		LCD_enuDisplayChar(Copy_PArrchars[Local_u8Iter]);
		Local_u8Iter++;
	}


	return Local_enuErrorState ;
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <LCD_enuSendCommand+0x6>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    20c4:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	0e 94 a1 11 	call	0x2342	; 0x2342 <LCD_vidLatch>


	return Local_enuErrorState;
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <LCD_ClearDisp>:

void LCD_ClearDisp()
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
	LCD_enuSendCommand(0x01);
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_enuSendCommand>
}
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <LCD_GOTO>:
void LCD_GOTO(u8 Row,u8 Col)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <LCD_GOTO+0x6>
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <LCD_GOTO+0x8>
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <LCD_GOTO+0xa>
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	6e 83       	std	Y+6, r22	; 0x06
	u8 arr[4]={0x80,0xC0,0x90,0xD0};
    2108:	80 e8       	ldi	r24, 0x80	; 128
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	80 ec       	ldi	r24, 0xC0	; 192
    210e:	8a 83       	std	Y+2, r24	; 0x02
    2110:	80 e9       	ldi	r24, 0x90	; 144
    2112:	8b 83       	std	Y+3, r24	; 0x03
    2114:	80 ed       	ldi	r24, 0xD0	; 208
    2116:	8c 83       	std	Y+4, r24	; 0x04
	LCD_enuSendCommand(arr[Row]+Col);
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	ce 01       	movw	r24, r28
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	fc 01       	movw	r30, r24
    2124:	e2 0f       	add	r30, r18
    2126:	f3 1f       	adc	r31, r19
    2128:	90 81       	ld	r25, Z
    212a:	8e 81       	ldd	r24, Y+6	; 0x06
    212c:	89 0f       	add	r24, r25
    212e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_enuSendCommand>
}
    2132:	26 96       	adiw	r28, 0x06	; 6
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <LCD_enuCreatChar>:

ES_t LCD_enuCreatChar(u8* Copy_Au8NewChar, u8 Copy_u8Size, u8 Copy_u8StartPattern ){
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	00 d0       	rcall	.+0      	; 0x214a <LCD_enuCreatChar+0x6>
    214a:	00 d0       	rcall	.+0      	; 0x214c <LCD_enuCreatChar+0x8>
    214c:	00 d0       	rcall	.+0      	; 0x214e <LCD_enuCreatChar+0xa>
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
    2156:	6d 83       	std	Y+5, r22	; 0x05
    2158:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    215a:	1a 82       	std	Y+2, r1	; 0x02

	Local_enuErrorState = LCD_enuSendCommand(0x40 + (8*Copy_u8StartPattern));
    215c:	8e 81       	ldd	r24, Y+6	; 0x06
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	08 96       	adiw	r24, 0x08	; 8
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_enuSendCommand>
    2174:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iterator;

	for( Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8Size*8 ; ++Local_u8Iterator)
    2176:	19 82       	std	Y+1, r1	; 0x01
    2178:	0e c0       	rjmp	.+28     	; 0x2196 <LCD_enuCreatChar+0x52>
	{
		LCD_vidLatch(Copy_Au8NewChar[Local_u8Iterator]);
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	9c 81       	ldd	r25, Y+4	; 0x04
    2184:	fc 01       	movw	r30, r24
    2186:	e2 0f       	add	r30, r18
    2188:	f3 1f       	adc	r31, r19
    218a:	80 81       	ld	r24, Z
    218c:	0e 94 a1 11 	call	0x2342	; 0x2342 <LCD_vidLatch>

	Local_enuErrorState = LCD_enuSendCommand(0x40 + (8*Copy_u8StartPattern));

	u8 Local_u8Iterator;

	for( Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8Size*8 ; ++Local_u8Iterator)
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	8f 5f       	subi	r24, 0xFF	; 255
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	88 2f       	mov	r24, r24
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	28 17       	cp	r18, r24
    21b0:	39 07       	cpc	r19, r25
    21b2:	1c f3       	brlt	.-58     	; 0x217a <LCD_enuCreatChar+0x36>
	{
		LCD_vidLatch(Copy_Au8NewChar[Local_u8Iterator]);
	}
#if DISPLAY_DIRECTION == RIGHT_TO_LEFT
	LCD_enuSendCommand(0x80);
    21b4:	80 e8       	ldi	r24, 0x80	; 128
    21b6:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_enuSendCommand>
	LCD_enuSendCommand(0x06);
    21ba:	86 e0       	ldi	r24, 0x06	; 6
    21bc:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_enuSendCommand>
	LCD_enuSendCommand(0x04);
#else
#error "Unsupported Display Direction"
#endif

	return Local_enuErrorState;
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21c2:	26 96       	adiw	r28, 0x06	; 6
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <LCD_enuDisplayIntegerNum>:

ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	2b 97       	sbiw	r28, 0x0b	; 11
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	68 87       	std	Y+8, r22	; 0x08
    21ea:	79 87       	std	Y+9, r23	; 0x09
    21ec:	8a 87       	std	Y+10, r24	; 0x0a
    21ee:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    21f0:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    21f2:	1b 82       	std	Y+3, r1	; 0x03
    21f4:	1c 82       	std	Y+4, r1	; 0x04
    21f6:	1d 82       	std	Y+5, r1	; 0x05
    21f8:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    21fa:	1a 82       	std	Y+2, r1	; 0x02
    21fc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    21fe:	88 85       	ldd	r24, Y+8	; 0x08
    2200:	99 85       	ldd	r25, Y+9	; 0x09
    2202:	aa 85       	ldd	r26, Y+10	; 0x0a
    2204:	bb 85       	ldd	r27, Y+11	; 0x0b
    2206:	bb 23       	and	r27, r27
    2208:	0c f0       	brlt	.+2      	; 0x220c <LCD_enuDisplayIntegerNum+0x38>
    220a:	57 c0       	rjmp	.+174    	; 0x22ba <LCD_enuDisplayIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    220c:	82 e0       	ldi	r24, 0x02	; 2
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    2216:	8d e2       	ldi	r24, 0x2D	; 45
    2218:	0e 94 a1 11 	call	0x2342	; 0x2342 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    221c:	88 85       	ldd	r24, Y+8	; 0x08
    221e:	99 85       	ldd	r25, Y+9	; 0x09
    2220:	aa 85       	ldd	r26, Y+10	; 0x0a
    2222:	bb 85       	ldd	r27, Y+11	; 0x0b
    2224:	b0 95       	com	r27
    2226:	a0 95       	com	r26
    2228:	90 95       	com	r25
    222a:	81 95       	neg	r24
    222c:	9f 4f       	sbci	r25, 0xFF	; 255
    222e:	af 4f       	sbci	r26, 0xFF	; 255
    2230:	bf 4f       	sbci	r27, 0xFF	; 255
    2232:	88 87       	std	Y+8, r24	; 0x08
    2234:	99 87       	std	Y+9, r25	; 0x09
    2236:	aa 87       	std	Y+10, r26	; 0x0a
    2238:	bb 87       	std	Y+11, r27	; 0x0b
    223a:	3f c0       	rjmp	.+126    	; 0x22ba <LCD_enuDisplayIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    223c:	88 85       	ldd	r24, Y+8	; 0x08
    223e:	99 85       	ldd	r25, Y+9	; 0x09
    2240:	aa 85       	ldd	r26, Y+10	; 0x0a
    2242:	bb 85       	ldd	r27, Y+11	; 0x0b
    2244:	2a e0       	ldi	r18, 0x0A	; 10
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 ad 14 	call	0x295a	; 0x295a <__divmodsi4>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	ad 81       	ldd	r26, Y+5	; 0x05
    2260:	be 81       	ldd	r27, Y+6	; 0x06
    2262:	2a e0       	ldi	r18, 0x0A	; 10
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 8e 14 	call	0x291c	; 0x291c <__mulsi3>
    2272:	9b 01       	movw	r18, r22
    2274:	ac 01       	movw	r20, r24
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	88 2f       	mov	r24, r24
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	a0 e0       	ldi	r26, 0x00	; 0
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	82 0f       	add	r24, r18
    2282:	93 1f       	adc	r25, r19
    2284:	a4 1f       	adc	r26, r20
    2286:	b5 1f       	adc	r27, r21
    2288:	8b 83       	std	Y+3, r24	; 0x03
    228a:	9c 83       	std	Y+4, r25	; 0x04
    228c:	ad 83       	std	Y+5, r26	; 0x05
    228e:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    2290:	88 85       	ldd	r24, Y+8	; 0x08
    2292:	99 85       	ldd	r25, Y+9	; 0x09
    2294:	aa 85       	ldd	r26, Y+10	; 0x0a
    2296:	bb 85       	ldd	r27, Y+11	; 0x0b
    2298:	2a e0       	ldi	r18, 0x0A	; 10
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 ad 14 	call	0x295a	; 0x295a <__divmodsi4>
    22a8:	da 01       	movw	r26, r20
    22aa:	c9 01       	movw	r24, r18
    22ac:	88 87       	std	Y+8, r24	; 0x08
    22ae:	99 87       	std	Y+9, r25	; 0x09
    22b0:	aa 87       	std	Y+10, r26	; 0x0a
    22b2:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	8f 5f       	subi	r24, 0xFF	; 255
    22b8:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    22ba:	88 85       	ldd	r24, Y+8	; 0x08
    22bc:	99 85       	ldd	r25, Y+9	; 0x09
    22be:	aa 85       	ldd	r26, Y+10	; 0x0a
    22c0:	bb 85       	ldd	r27, Y+11	; 0x0b
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	a1 05       	cpc	r26, r1
    22c6:	b1 05       	cpc	r27, r1
    22c8:	09 f0       	breq	.+2      	; 0x22cc <LCD_enuDisplayIntegerNum+0xf8>
    22ca:	b8 cf       	rjmp	.-144    	; 0x223c <LCD_enuDisplayIntegerNum+0x68>
    22cc:	2d c0       	rjmp	.+90     	; 0x2328 <LCD_enuDisplayIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	ad 81       	ldd	r26, Y+5	; 0x05
    22d4:	be 81       	ldd	r27, Y+6	; 0x06
    22d6:	2a e0       	ldi	r18, 0x0A	; 10
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 ad 14 	call	0x295a	; 0x295a <__divmodsi4>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	80 5d       	subi	r24, 0xD0	; 208
    22fa:	0e 94 a1 11 	call	0x2342	; 0x2342 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	ad 81       	ldd	r26, Y+5	; 0x05
    2304:	be 81       	ldd	r27, Y+6	; 0x06
    2306:	2a e0       	ldi	r18, 0x0A	; 10
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 ad 14 	call	0x295a	; 0x295a <__divmodsi4>
    2316:	da 01       	movw	r26, r20
    2318:	c9 01       	movw	r24, r18
    231a:	8b 83       	std	Y+3, r24	; 0x03
    231c:	9c 83       	std	Y+4, r25	; 0x04
    231e:	ad 83       	std	Y+5, r26	; 0x05
    2320:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	81 50       	subi	r24, 0x01	; 1
    2326:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	88 23       	and	r24, r24
    232c:	81 f6       	brne	.-96     	; 0x22ce <LCD_enuDisplayIntegerNum+0xfa>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    232e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2330:	2b 96       	adiw	r28, 0x0b	; 11
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	6d 97       	sbiw	r28, 0x1d	; 29
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	61 e0       	ldi	r22, 0x01	; 1
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2362:	82 e0       	ldi	r24, 0x02	; 2
    2364:	62 e0       	ldi	r22, 0x02	; 2
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    236c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    236e:	98 2f       	mov	r25, r24
    2370:	99 1f       	adc	r25, r25
    2372:	99 27       	eor	r25, r25
    2374:	99 1f       	adc	r25, r25
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	62 e0       	ldi	r22, 0x02	; 2
    237a:	49 2f       	mov	r20, r25
    237c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    2380:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2382:	82 95       	swap	r24
    2384:	86 95       	lsr	r24
    2386:	86 95       	lsr	r24
    2388:	83 70       	andi	r24, 0x03	; 3
    238a:	98 2f       	mov	r25, r24
    238c:	91 70       	andi	r25, 0x01	; 1
    238e:	83 e0       	ldi	r24, 0x03	; 3
    2390:	61 e0       	ldi	r22, 0x01	; 1
    2392:	49 2f       	mov	r20, r25
    2394:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    2398:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239a:	82 95       	swap	r24
    239c:	86 95       	lsr	r24
    239e:	87 70       	andi	r24, 0x07	; 7
    23a0:	98 2f       	mov	r25, r24
    23a2:	91 70       	andi	r25, 0x01	; 1
    23a4:	83 e0       	ldi	r24, 0x03	; 3
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	49 2f       	mov	r20, r25
    23aa:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    23ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b0:	82 95       	swap	r24
    23b2:	8f 70       	andi	r24, 0x0F	; 15
    23b4:	98 2f       	mov	r25, r24
    23b6:	91 70       	andi	r25, 0x01	; 1
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	67 e0       	ldi	r22, 0x07	; 7
    23bc:	49 2f       	mov	r20, r25
    23be:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    23c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c4:	86 95       	lsr	r24
    23c6:	86 95       	lsr	r24
    23c8:	86 95       	lsr	r24
    23ca:	98 2f       	mov	r25, r24
    23cc:	91 70       	andi	r25, 0x01	; 1
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	66 e0       	ldi	r22, 0x06	; 6
    23d2:	49 2f       	mov	r20, r25
    23d4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    23d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23da:	86 95       	lsr	r24
    23dc:	86 95       	lsr	r24
    23de:	98 2f       	mov	r25, r24
    23e0:	91 70       	andi	r25, 0x01	; 1
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	65 e0       	ldi	r22, 0x05	; 5
    23e6:	49 2f       	mov	r20, r25
    23e8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    23ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ee:	86 95       	lsr	r24
    23f0:	98 2f       	mov	r25, r24
    23f2:	91 70       	andi	r25, 0x01	; 1
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	64 e0       	ldi	r22, 0x04	; 4
    23f8:	49 2f       	mov	r20, r25
    23fa:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    23fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2400:	98 2f       	mov	r25, r24
    2402:	91 70       	andi	r25, 0x01	; 1
    2404:	82 e0       	ldi	r24, 0x02	; 2
    2406:	63 e0       	ldi	r22, 0x03	; 3
    2408:	49 2f       	mov	r20, r25
    240a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	62 e0       	ldi	r22, 0x02	; 2
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a0 e2       	ldi	r26, 0x20	; 32
    241e:	b1 e4       	ldi	r27, 0x41	; 65
    2420:	89 8f       	std	Y+25, r24	; 0x19
    2422:	9a 8f       	std	Y+26, r25	; 0x1a
    2424:	ab 8f       	std	Y+27, r26	; 0x1b
    2426:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2428:	69 8d       	ldd	r22, Y+25	; 0x19
    242a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a e7       	ldi	r20, 0x7A	; 122
    2436:	53 e4       	ldi	r21, 0x43	; 67
    2438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	8d 8b       	std	Y+21, r24	; 0x15
    2442:	9e 8b       	std	Y+22, r25	; 0x16
    2444:	af 8b       	std	Y+23, r26	; 0x17
    2446:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2448:	6d 89       	ldd	r22, Y+21	; 0x15
    244a:	7e 89       	ldd	r23, Y+22	; 0x16
    244c:	8f 89       	ldd	r24, Y+23	; 0x17
    244e:	98 8d       	ldd	r25, Y+24	; 0x18
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	2c f4       	brge	.+10     	; 0x246a <LCD_vidLatch+0x128>
		__ticks = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	9c 8b       	std	Y+20, r25	; 0x14
    2466:	8b 8b       	std	Y+19, r24	; 0x13
    2468:	3f c0       	rjmp	.+126    	; 0x24e8 <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    246a:	6d 89       	ldd	r22, Y+21	; 0x15
    246c:	7e 89       	ldd	r23, Y+22	; 0x16
    246e:	8f 89       	ldd	r24, Y+23	; 0x17
    2470:	98 8d       	ldd	r25, Y+24	; 0x18
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	4c f5       	brge	.+82     	; 0x24d4 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2482:	69 8d       	ldd	r22, Y+25	; 0x19
    2484:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2486:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2488:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9c 8b       	std	Y+20, r25	; 0x14
    24a8:	8b 8b       	std	Y+19, r24	; 0x13
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <LCD_vidLatch+0x188>
    24ac:	89 e1       	ldi	r24, 0x19	; 25
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9a 8b       	std	Y+18, r25	; 0x12
    24b2:	89 8b       	std	Y+17, r24	; 0x11
    24b4:	89 89       	ldd	r24, Y+17	; 0x11
    24b6:	9a 89       	ldd	r25, Y+18	; 0x12
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_vidLatch+0x176>
    24bc:	9a 8b       	std	Y+18, r25	; 0x12
    24be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	8b 89       	ldd	r24, Y+19	; 0x13
    24c2:	9c 89       	ldd	r25, Y+20	; 0x14
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	9c 8b       	std	Y+20, r25	; 0x14
    24c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ca:	8b 89       	ldd	r24, Y+19	; 0x13
    24cc:	9c 89       	ldd	r25, Y+20	; 0x14
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	69 f7       	brne	.-38     	; 0x24ac <LCD_vidLatch+0x16a>
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	6d 89       	ldd	r22, Y+21	; 0x15
    24d6:	7e 89       	ldd	r23, Y+22	; 0x16
    24d8:	8f 89       	ldd	r24, Y+23	; 0x17
    24da:	98 8d       	ldd	r25, Y+24	; 0x18
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
    24e8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ea:	9c 89       	ldd	r25, Y+20	; 0x14
    24ec:	98 8b       	std	Y+16, r25	; 0x10
    24ee:	8f 87       	std	Y+15, r24	; 0x0f
    24f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f2:	98 89       	ldd	r25, Y+16	; 0x10
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_vidLatch+0x1b2>
    24f8:	98 8b       	std	Y+16, r25	; 0x10
    24fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	62 e0       	ldi	r22, 0x02	; 2
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a0 e2       	ldi	r26, 0x20	; 32
    250c:	b1 e4       	ldi	r27, 0x41	; 65
    250e:	8b 87       	std	Y+11, r24	; 0x0b
    2510:	9c 87       	std	Y+12, r25	; 0x0c
    2512:	ad 87       	std	Y+13, r26	; 0x0d
    2514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2516:	6b 85       	ldd	r22, Y+11	; 0x0b
    2518:	7c 85       	ldd	r23, Y+12	; 0x0c
    251a:	8d 85       	ldd	r24, Y+13	; 0x0d
    251c:	9e 85       	ldd	r25, Y+14	; 0x0e
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a e7       	ldi	r20, 0x7A	; 122
    2524:	53 e4       	ldi	r21, 0x43	; 67
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8f 83       	std	Y+7, r24	; 0x07
    2530:	98 87       	std	Y+8, r25	; 0x08
    2532:	a9 87       	std	Y+9, r26	; 0x09
    2534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e8       	ldi	r20, 0x80	; 128
    2544:	5f e3       	ldi	r21, 0x3F	; 63
    2546:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254a:	88 23       	and	r24, r24
    254c:	2c f4       	brge	.+10     	; 0x2558 <LCD_vidLatch+0x216>
		__ticks = 1;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	3f c0       	rjmp	.+126    	; 0x25d6 <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	4f e7       	ldi	r20, 0x7F	; 127
    2566:	57 e4       	ldi	r21, 0x47	; 71
    2568:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    256c:	18 16       	cp	r1, r24
    256e:	4c f5       	brge	.+82     	; 0x25c2 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2570:	6b 85       	ldd	r22, Y+11	; 0x0b
    2572:	7c 85       	ldd	r23, Y+12	; 0x0c
    2574:	8d 85       	ldd	r24, Y+13	; 0x0d
    2576:	9e 85       	ldd	r25, Y+14	; 0x0e
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e2       	ldi	r20, 0x20	; 32
    257e:	51 e4       	ldi	r21, 0x41	; 65
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <LCD_vidLatch+0x276>
    259a:	89 e1       	ldi	r24, 0x19	; 25
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9c 83       	std	Y+4, r25	; 0x04
    25a0:	8b 83       	std	Y+3, r24	; 0x03
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_vidLatch+0x264>
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ae:	8d 81       	ldd	r24, Y+5	; 0x05
    25b0:	9e 81       	ldd	r25, Y+6	; 0x06
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	69 f7       	brne	.-38     	; 0x259a <LCD_vidLatch+0x258>
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c2:	6f 81       	ldd	r22, Y+7	; 0x07
    25c4:	78 85       	ldd	r23, Y+8	; 0x08
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_vidLatch+0x2a0>
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    25ea:	6d 96       	adiw	r28, 0x1d	; 29
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	2f 97       	sbiw	r28, 0x0f	; 15
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	62 e0       	ldi	r22, 0x02	; 2
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	98 2f       	mov	r25, r24
    2634:	99 1f       	adc	r25, r25
    2636:	99 27       	eor	r25, r25
    2638:	99 1f       	adc	r25, r25
    263a:	83 e0       	ldi	r24, 0x03	; 3
    263c:	62 e0       	ldi	r22, 0x02	; 2
    263e:	49 2f       	mov	r20, r25
    2640:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2644:	8f 85       	ldd	r24, Y+15	; 0x0f
    2646:	82 95       	swap	r24
    2648:	86 95       	lsr	r24
    264a:	86 95       	lsr	r24
    264c:	83 70       	andi	r24, 0x03	; 3
    264e:	98 2f       	mov	r25, r24
    2650:	91 70       	andi	r25, 0x01	; 1
    2652:	83 e0       	ldi	r24, 0x03	; 3
    2654:	61 e0       	ldi	r22, 0x01	; 1
    2656:	49 2f       	mov	r20, r25
    2658:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    265c:	8f 85       	ldd	r24, Y+15	; 0x0f
    265e:	82 95       	swap	r24
    2660:	86 95       	lsr	r24
    2662:	87 70       	andi	r24, 0x07	; 7
    2664:	98 2f       	mov	r25, r24
    2666:	91 70       	andi	r25, 0x01	; 1
    2668:	83 e0       	ldi	r24, 0x03	; 3
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	49 2f       	mov	r20, r25
    266e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2672:	8f 85       	ldd	r24, Y+15	; 0x0f
    2674:	82 95       	swap	r24
    2676:	8f 70       	andi	r24, 0x0F	; 15
    2678:	98 2f       	mov	r25, r24
    267a:	91 70       	andi	r25, 0x01	; 1
    267c:	82 e0       	ldi	r24, 0x02	; 2
    267e:	67 e0       	ldi	r22, 0x07	; 7
    2680:	49 2f       	mov	r20, r25
    2682:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    2686:	8f 85       	ldd	r24, Y+15	; 0x0f
    2688:	86 95       	lsr	r24
    268a:	86 95       	lsr	r24
    268c:	86 95       	lsr	r24
    268e:	98 2f       	mov	r25, r24
    2690:	91 70       	andi	r25, 0x01	; 1
    2692:	82 e0       	ldi	r24, 0x02	; 2
    2694:	66 e0       	ldi	r22, 0x06	; 6
    2696:	49 2f       	mov	r20, r25
    2698:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    269c:	8f 85       	ldd	r24, Y+15	; 0x0f
    269e:	86 95       	lsr	r24
    26a0:	86 95       	lsr	r24
    26a2:	98 2f       	mov	r25, r24
    26a4:	91 70       	andi	r25, 0x01	; 1
    26a6:	82 e0       	ldi	r24, 0x02	; 2
    26a8:	65 e0       	ldi	r22, 0x05	; 5
    26aa:	49 2f       	mov	r20, r25
    26ac:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    26b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b2:	86 95       	lsr	r24
    26b4:	98 2f       	mov	r25, r24
    26b6:	91 70       	andi	r25, 0x01	; 1
    26b8:	82 e0       	ldi	r24, 0x02	; 2
    26ba:	64 e0       	ldi	r22, 0x04	; 4
    26bc:	49 2f       	mov	r20, r25
    26be:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    26c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c4:	98 2f       	mov	r25, r24
    26c6:	91 70       	andi	r25, 0x01	; 1
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	63 e0       	ldi	r22, 0x03	; 3
    26cc:	49 2f       	mov	r20, r25
    26ce:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    26d2:	82 e0       	ldi	r24, 0x02	; 2
    26d4:	62 e0       	ldi	r22, 0x02	; 2
    26d6:	41 e0       	ldi	r20, 0x01	; 1
    26d8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a0 e2       	ldi	r26, 0x20	; 32
    26e2:	b1 e4       	ldi	r27, 0x41	; 65
    26e4:	8b 87       	std	Y+11, r24	; 0x0b
    26e6:	9c 87       	std	Y+12, r25	; 0x0c
    26e8:	ad 87       	std	Y+13, r26	; 0x0d
    26ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a e7       	ldi	r20, 0x7A	; 122
    26fa:	53 e4       	ldi	r21, 0x43	; 67
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	8f 83       	std	Y+7, r24	; 0x07
    2706:	98 87       	std	Y+8, r25	; 0x08
    2708:	a9 87       	std	Y+9, r26	; 0x09
    270a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270c:	6f 81       	ldd	r22, Y+7	; 0x07
    270e:	78 85       	ldd	r23, Y+8	; 0x08
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	2c f4       	brge	.+10     	; 0x272e <LCD_invidSendCommend+0x132>
		__ticks = 1;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9e 83       	std	Y+6, r25	; 0x06
    272a:	8d 83       	std	Y+5, r24	; 0x05
    272c:	3f c0       	rjmp	.+126    	; 0x27ac <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    272e:	6f 81       	ldd	r22, Y+7	; 0x07
    2730:	78 85       	ldd	r23, Y+8	; 0x08
    2732:	89 85       	ldd	r24, Y+9	; 0x09
    2734:	9a 85       	ldd	r25, Y+10	; 0x0a
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	3f ef       	ldi	r19, 0xFF	; 255
    273a:	4f e7       	ldi	r20, 0x7F	; 127
    273c:	57 e4       	ldi	r21, 0x47	; 71
    273e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2742:	18 16       	cp	r1, r24
    2744:	4c f5       	brge	.+82     	; 0x2798 <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2746:	6b 85       	ldd	r22, Y+11	; 0x0b
    2748:	7c 85       	ldd	r23, Y+12	; 0x0c
    274a:	8d 85       	ldd	r24, Y+13	; 0x0d
    274c:	9e 85       	ldd	r25, Y+14	; 0x0e
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e2       	ldi	r20, 0x20	; 32
    2754:	51 e4       	ldi	r21, 0x41	; 65
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
    276e:	0f c0       	rjmp	.+30     	; 0x278e <LCD_invidSendCommend+0x192>
    2770:	89 e1       	ldi	r24, 0x19	; 25
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9c 83       	std	Y+4, r25	; 0x04
    2776:	8b 83       	std	Y+3, r24	; 0x03
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_invidSendCommend+0x180>
    2780:	9c 83       	std	Y+4, r25	; 0x04
    2782:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	8d 81       	ldd	r24, Y+5	; 0x05
    2790:	9e 81       	ldd	r25, Y+6	; 0x06
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	69 f7       	brne	.-38     	; 0x2770 <LCD_invidSendCommend+0x174>
    2796:	14 c0       	rjmp	.+40     	; 0x27c0 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9e 83       	std	Y+6, r25	; 0x06
    27aa:	8d 83       	std	Y+5, r24	; 0x05
    27ac:	8d 81       	ldd	r24, Y+5	; 0x05
    27ae:	9e 81       	ldd	r25, Y+6	; 0x06
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	89 83       	std	Y+1, r24	; 0x01
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	9a 81       	ldd	r25, Y+2	; 0x02
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <LCD_invidSendCommend+0x1bc>
    27bc:	9a 83       	std	Y+2, r25	; 0x02
    27be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	62 e0       	ldi	r22, 0x02	; 2
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enuSetPinValue>
}
    27ca:	2f 96       	adiw	r28, 0x0f	; 15
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <main>:

#include "../HAL/LCD/LCD_Int.h"

#include "util/delay.h"
int main()
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	60 97       	sbiw	r28, 0x10	; 16
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
	DIO_enuInit();
    27f0:	0e 94 df 08 	call	0x11be	; 0x11be <DIO_enuInit>
	ADC_enuInit();
    27f4:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <ADC_enuInit>
	LCD_enuInit();
    27f8:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <LCD_enuInit>
    ADC_enuSelectChannel(2,-1,0);
    27fc:	82 e0       	ldi	r24, 0x02	; 2
    27fe:	6f ef       	ldi	r22, 0xFF	; 255
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <ADC_enuSelectChannel>
    DIO_enuSetPinDirection(DIO_u8PORTA,DIO_u8PIN2,DIO_u8INPUT);
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	62 e0       	ldi	r22, 0x02	; 2
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_enuSetPinDirection>
	u16 READ = 0;
    2810:	18 8a       	std	Y+16, r1	; 0x10
    2812:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		ADC_vidEnableADC();
    2814:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <ADC_vidEnableADC>
		ADC_enuStartConversion(&READ);
    2818:	ce 01       	movw	r24, r28
    281a:	0f 96       	adiw	r24, 0x0f	; 15
    281c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <ADC_enuStartConversion>
		LCD_enuDisplayIntegerNum(READ);
    2820:	8f 85       	ldd	r24, Y+15	; 0x0f
    2822:	98 89       	ldd	r25, Y+16	; 0x10
    2824:	cc 01       	movw	r24, r24
    2826:	a0 e0       	ldi	r26, 0x00	; 0
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <LCD_enuDisplayIntegerNum>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	aa e7       	ldi	r26, 0x7A	; 122
    2838:	b4 e4       	ldi	r27, 0x44	; 68
    283a:	8b 87       	std	Y+11, r24	; 0x0b
    283c:	9c 87       	std	Y+12, r25	; 0x0c
    283e:	ad 87       	std	Y+13, r26	; 0x0d
    2840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2842:	6b 85       	ldd	r22, Y+11	; 0x0b
    2844:	7c 85       	ldd	r23, Y+12	; 0x0c
    2846:	8d 85       	ldd	r24, Y+13	; 0x0d
    2848:	9e 85       	ldd	r25, Y+14	; 0x0e
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4a e7       	ldi	r20, 0x7A	; 122
    2850:	53 e4       	ldi	r21, 0x43	; 67
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8f 83       	std	Y+7, r24	; 0x07
    285c:	98 87       	std	Y+8, r25	; 0x08
    285e:	a9 87       	std	Y+9, r26	; 0x09
    2860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2862:	6f 81       	ldd	r22, Y+7	; 0x07
    2864:	78 85       	ldd	r23, Y+8	; 0x08
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e8       	ldi	r20, 0x80	; 128
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2876:	88 23       	and	r24, r24
    2878:	2c f4       	brge	.+10     	; 0x2884 <main+0xa8>
		__ticks = 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	8d 83       	std	Y+5, r24	; 0x05
    2882:	3f c0       	rjmp	.+126    	; 0x2902 <main+0x126>
	else if (__tmp > 65535)
    2884:	6f 81       	ldd	r22, Y+7	; 0x07
    2886:	78 85       	ldd	r23, Y+8	; 0x08
    2888:	89 85       	ldd	r24, Y+9	; 0x09
    288a:	9a 85       	ldd	r25, Y+10	; 0x0a
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	3f ef       	ldi	r19, 0xFF	; 255
    2890:	4f e7       	ldi	r20, 0x7F	; 127
    2892:	57 e4       	ldi	r21, 0x47	; 71
    2894:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2898:	18 16       	cp	r1, r24
    289a:	4c f5       	brge	.+82     	; 0x28ee <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289c:	6b 85       	ldd	r22, Y+11	; 0x0b
    289e:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e2       	ldi	r20, 0x20	; 32
    28aa:	51 e4       	ldi	r21, 0x41	; 65
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9e 83       	std	Y+6, r25	; 0x06
    28c2:	8d 83       	std	Y+5, r24	; 0x05
    28c4:	0f c0       	rjmp	.+30     	; 0x28e4 <main+0x108>
    28c6:	89 e1       	ldi	r24, 0x19	; 25
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	9c 83       	std	Y+4, r25	; 0x04
    28cc:	8b 83       	std	Y+3, r24	; 0x03
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	9c 81       	ldd	r25, Y+4	; 0x04
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <main+0xf6>
    28d6:	9c 83       	std	Y+4, r25	; 0x04
    28d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	69 f7       	brne	.-38     	; 0x28c6 <main+0xea>
    28ec:	14 c0       	rjmp	.+40     	; 0x2916 <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	9e 81       	ldd	r25, Y+6	; 0x06
    2906:	9a 83       	std	Y+2, r25	; 0x02
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <main+0x132>
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_ClearDisp();
    2916:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_ClearDisp>
    291a:	7c cf       	rjmp	.-264    	; 0x2814 <main+0x38>

0000291c <__mulsi3>:
    291c:	62 9f       	mul	r22, r18
    291e:	d0 01       	movw	r26, r0
    2920:	73 9f       	mul	r23, r19
    2922:	f0 01       	movw	r30, r0
    2924:	82 9f       	mul	r24, r18
    2926:	e0 0d       	add	r30, r0
    2928:	f1 1d       	adc	r31, r1
    292a:	64 9f       	mul	r22, r20
    292c:	e0 0d       	add	r30, r0
    292e:	f1 1d       	adc	r31, r1
    2930:	92 9f       	mul	r25, r18
    2932:	f0 0d       	add	r31, r0
    2934:	83 9f       	mul	r24, r19
    2936:	f0 0d       	add	r31, r0
    2938:	74 9f       	mul	r23, r20
    293a:	f0 0d       	add	r31, r0
    293c:	65 9f       	mul	r22, r21
    293e:	f0 0d       	add	r31, r0
    2940:	99 27       	eor	r25, r25
    2942:	72 9f       	mul	r23, r18
    2944:	b0 0d       	add	r27, r0
    2946:	e1 1d       	adc	r30, r1
    2948:	f9 1f       	adc	r31, r25
    294a:	63 9f       	mul	r22, r19
    294c:	b0 0d       	add	r27, r0
    294e:	e1 1d       	adc	r30, r1
    2950:	f9 1f       	adc	r31, r25
    2952:	bd 01       	movw	r22, r26
    2954:	cf 01       	movw	r24, r30
    2956:	11 24       	eor	r1, r1
    2958:	08 95       	ret

0000295a <__divmodsi4>:
    295a:	97 fb       	bst	r25, 7
    295c:	09 2e       	mov	r0, r25
    295e:	05 26       	eor	r0, r21
    2960:	0e d0       	rcall	.+28     	; 0x297e <__divmodsi4_neg1>
    2962:	57 fd       	sbrc	r21, 7
    2964:	04 d0       	rcall	.+8      	; 0x296e <__divmodsi4_neg2>
    2966:	14 d0       	rcall	.+40     	; 0x2990 <__udivmodsi4>
    2968:	0a d0       	rcall	.+20     	; 0x297e <__divmodsi4_neg1>
    296a:	00 1c       	adc	r0, r0
    296c:	38 f4       	brcc	.+14     	; 0x297c <__divmodsi4_exit>

0000296e <__divmodsi4_neg2>:
    296e:	50 95       	com	r21
    2970:	40 95       	com	r20
    2972:	30 95       	com	r19
    2974:	21 95       	neg	r18
    2976:	3f 4f       	sbci	r19, 0xFF	; 255
    2978:	4f 4f       	sbci	r20, 0xFF	; 255
    297a:	5f 4f       	sbci	r21, 0xFF	; 255

0000297c <__divmodsi4_exit>:
    297c:	08 95       	ret

0000297e <__divmodsi4_neg1>:
    297e:	f6 f7       	brtc	.-4      	; 0x297c <__divmodsi4_exit>
    2980:	90 95       	com	r25
    2982:	80 95       	com	r24
    2984:	70 95       	com	r23
    2986:	61 95       	neg	r22
    2988:	7f 4f       	sbci	r23, 0xFF	; 255
    298a:	8f 4f       	sbci	r24, 0xFF	; 255
    298c:	9f 4f       	sbci	r25, 0xFF	; 255
    298e:	08 95       	ret

00002990 <__udivmodsi4>:
    2990:	a1 e2       	ldi	r26, 0x21	; 33
    2992:	1a 2e       	mov	r1, r26
    2994:	aa 1b       	sub	r26, r26
    2996:	bb 1b       	sub	r27, r27
    2998:	fd 01       	movw	r30, r26
    299a:	0d c0       	rjmp	.+26     	; 0x29b6 <__udivmodsi4_ep>

0000299c <__udivmodsi4_loop>:
    299c:	aa 1f       	adc	r26, r26
    299e:	bb 1f       	adc	r27, r27
    29a0:	ee 1f       	adc	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	a2 17       	cp	r26, r18
    29a6:	b3 07       	cpc	r27, r19
    29a8:	e4 07       	cpc	r30, r20
    29aa:	f5 07       	cpc	r31, r21
    29ac:	20 f0       	brcs	.+8      	; 0x29b6 <__udivmodsi4_ep>
    29ae:	a2 1b       	sub	r26, r18
    29b0:	b3 0b       	sbc	r27, r19
    29b2:	e4 0b       	sbc	r30, r20
    29b4:	f5 0b       	sbc	r31, r21

000029b6 <__udivmodsi4_ep>:
    29b6:	66 1f       	adc	r22, r22
    29b8:	77 1f       	adc	r23, r23
    29ba:	88 1f       	adc	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	1a 94       	dec	r1
    29c0:	69 f7       	brne	.-38     	; 0x299c <__udivmodsi4_loop>
    29c2:	60 95       	com	r22
    29c4:	70 95       	com	r23
    29c6:	80 95       	com	r24
    29c8:	90 95       	com	r25
    29ca:	9b 01       	movw	r18, r22
    29cc:	ac 01       	movw	r20, r24
    29ce:	bd 01       	movw	r22, r26
    29d0:	cf 01       	movw	r24, r30
    29d2:	08 95       	ret

000029d4 <__prologue_saves__>:
    29d4:	2f 92       	push	r2
    29d6:	3f 92       	push	r3
    29d8:	4f 92       	push	r4
    29da:	5f 92       	push	r5
    29dc:	6f 92       	push	r6
    29de:	7f 92       	push	r7
    29e0:	8f 92       	push	r8
    29e2:	9f 92       	push	r9
    29e4:	af 92       	push	r10
    29e6:	bf 92       	push	r11
    29e8:	cf 92       	push	r12
    29ea:	df 92       	push	r13
    29ec:	ef 92       	push	r14
    29ee:	ff 92       	push	r15
    29f0:	0f 93       	push	r16
    29f2:	1f 93       	push	r17
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	ca 1b       	sub	r28, r26
    29fe:	db 0b       	sbc	r29, r27
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	09 94       	ijmp

00002a0c <__epilogue_restores__>:
    2a0c:	2a 88       	ldd	r2, Y+18	; 0x12
    2a0e:	39 88       	ldd	r3, Y+17	; 0x11
    2a10:	48 88       	ldd	r4, Y+16	; 0x10
    2a12:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a14:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a16:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a18:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a1e:	b9 84       	ldd	r11, Y+9	; 0x09
    2a20:	c8 84       	ldd	r12, Y+8	; 0x08
    2a22:	df 80       	ldd	r13, Y+7	; 0x07
    2a24:	ee 80       	ldd	r14, Y+6	; 0x06
    2a26:	fd 80       	ldd	r15, Y+5	; 0x05
    2a28:	0c 81       	ldd	r16, Y+4	; 0x04
    2a2a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a2c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a2e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a30:	ce 0f       	add	r28, r30
    2a32:	d1 1d       	adc	r29, r1
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	ed 01       	movw	r28, r26
    2a40:	08 95       	ret

00002a42 <_exit>:
    2a42:	f8 94       	cli

00002a44 <__stop_program>:
    2a44:	ff cf       	rjmp	.-2      	; 0x2a44 <__stop_program>
