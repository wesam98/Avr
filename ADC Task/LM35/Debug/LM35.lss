
LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  000026a0  00002714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000024cc  00000000  00000000  00002830  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001204  00000000  00000000  00004cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00005f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00006251  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00008261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  000093c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000a3c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  0000a568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000a826  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 12 	call	0x241e	; 0x241e <main>
      7a:	0c 94 4e 13 	jmp	0x269c	; 0x269c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e6       	ldi	r26, 0x6E	; 110
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 17 13 	jmp	0x262e	; 0x262e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e6       	ldi	r24, 0x6E	; 110
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 27 13 	jmp	0x264e	; 0x264e <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	ea 58       	subi	r30, 0x8A	; 138
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <DIO_enuInit>:
#include "DIO_Config.h"



ES_t DIO_enuInit()
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	0f 92       	push	r0
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     c9a:	19 82       	std	Y+1, r1	; 0x01

	DDRA=CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     c9c:	ea e3       	ldi	r30, 0x3A	; 58
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	80 83       	st	Z, r24
	DDRB=CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     ca4:	e7 e3       	ldi	r30, 0x37	; 55
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	80 83       	st	Z, r24
	DDRC=CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     cac:	e4 e3       	ldi	r30, 0x34	; 52
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	80 83       	st	Z, r24
	DDRD=CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     cb4:	e1 e3       	ldi	r30, 0x31	; 49
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     cbc:	eb e3       	ldi	r30, 0x3B	; 59
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	10 82       	st	Z, r1
	PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     cc2:	e8 e3       	ldi	r30, 0x38	; 56
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	10 82       	st	Z, r1
	PORTA = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     cc8:	eb e3       	ldi	r30, 0x3B	; 59
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	10 82       	st	Z, r1
	PORTA = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     cce:	eb e3       	ldi	r30, 0x3B	; 59
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	10 82       	st	Z, r1
	Local_enuErrorState = ES_OK;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
     cd8:	89 81       	ldd	r24, Y+1	; 0x01

}
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <DIO_enuSetPortDirection>:

ES_t  DIO_enuSetPortDirection (u8 Copy_u8PortID,u8 Copy_u8PortDirection)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <DIO_enuSetPortDirection+0x6>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <DIO_enuSetPortDirection+0x8>
     cea:	0f 92       	push	r0
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	8a 83       	std	Y+2, r24	; 0x02
     cf2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     cf4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD){
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	98 f5       	brcc	.+102    	; 0xd62 <DIO_enuSetPortDirection+0x80>
	switch(Copy_u8PortID)
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	3d 83       	std	Y+5, r19	; 0x05
     d04:	2c 83       	std	Y+4, r18	; 0x04
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	9d 81       	ldd	r25, Y+5	; 0x05
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	91 05       	cpc	r25, r1
     d0e:	d1 f0       	breq	.+52     	; 0xd44 <DIO_enuSetPortDirection+0x62>
     d10:	2c 81       	ldd	r18, Y+4	; 0x04
     d12:	3d 81       	ldd	r19, Y+5	; 0x05
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	2c f4       	brge	.+10     	; 0xd24 <DIO_enuSetPortDirection+0x42>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	61 f0       	breq	.+24     	; 0xd3a <DIO_enuSetPortDirection+0x58>
     d22:	21 c0       	rjmp	.+66     	; 0xd66 <DIO_enuSetPortDirection+0x84>
     d24:	2c 81       	ldd	r18, Y+4	; 0x04
     d26:	3d 81       	ldd	r19, Y+5	; 0x05
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	81 f0       	breq	.+32     	; 0xd4e <DIO_enuSetPortDirection+0x6c>
     d2e:	8c 81       	ldd	r24, Y+4	; 0x04
     d30:	9d 81       	ldd	r25, Y+5	; 0x05
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	81 f0       	breq	.+32     	; 0xd58 <DIO_enuSetPortDirection+0x76>
     d38:	16 c0       	rjmp	.+44     	; 0xd66 <DIO_enuSetPortDirection+0x84>
	{
	case(DIO_PORTA):
	{  DDRA=Copy_u8PortDirection;
     d3a:	ea e3       	ldi	r30, 0x3A	; 58
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	80 83       	st	Z, r24
     d42:	11 c0       	rjmp	.+34     	; 0xd66 <DIO_enuSetPortDirection+0x84>
	   break;
	}
	case(DIO_PORTB):
		{  DDRB=Copy_u8PortDirection;
     d44:	e7 e3       	ldi	r30, 0x37	; 55
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	80 83       	st	Z, r24
     d4c:	0c c0       	rjmp	.+24     	; 0xd66 <DIO_enuSetPortDirection+0x84>
		   break;
		}
	case(DIO_PORTC):
		{  DDRC=Copy_u8PortDirection;
     d4e:	e4 e3       	ldi	r30, 0x34	; 52
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	80 83       	st	Z, r24
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <DIO_enuSetPortDirection+0x84>
		   break;
		}
	case(DIO_PORTD):
		{  DDRD=Copy_u8PortDirection;
     d58:	e1 e3       	ldi	r30, 0x31	; 49
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	80 83       	st	Z, r24
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <DIO_enuSetPortDirection+0x84>
	 Local_enuErrorState=ES_OK;
	}
}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     d66:	89 81       	ldd	r24, Y+1	; 0x01

}
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <DIO_enuSetPortValue+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_enuSetPortValue+0x8>
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     d8a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD){
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	98 f5       	brcc	.+102    	; 0xdf8 <DIO_enuSetPortValue+0x80>
	switch(Copy_u8PortID)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	3d 83       	std	Y+5, r19	; 0x05
     d9a:	2c 83       	std	Y+4, r18	; 0x04
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	91 05       	cpc	r25, r1
     da4:	d1 f0       	breq	.+52     	; 0xdda <DIO_enuSetPortValue+0x62>
     da6:	2c 81       	ldd	r18, Y+4	; 0x04
     da8:	3d 81       	ldd	r19, Y+5	; 0x05
     daa:	22 30       	cpi	r18, 0x02	; 2
     dac:	31 05       	cpc	r19, r1
     dae:	2c f4       	brge	.+10     	; 0xdba <DIO_enuSetPortValue+0x42>
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	61 f0       	breq	.+24     	; 0xdd0 <DIO_enuSetPortValue+0x58>
     db8:	21 c0       	rjmp	.+66     	; 0xdfc <DIO_enuSetPortValue+0x84>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	81 f0       	breq	.+32     	; 0xde4 <DIO_enuSetPortValue+0x6c>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	83 30       	cpi	r24, 0x03	; 3
     dca:	91 05       	cpc	r25, r1
     dcc:	81 f0       	breq	.+32     	; 0xdee <DIO_enuSetPortValue+0x76>
     dce:	16 c0       	rjmp	.+44     	; 0xdfc <DIO_enuSetPortValue+0x84>
		{
		case(DIO_PORTA):
		{  PORTA=Copy_u8PortValue;
     dd0:	eb e3       	ldi	r30, 0x3B	; 59
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	80 83       	st	Z, r24
     dd8:	11 c0       	rjmp	.+34     	; 0xdfc <DIO_enuSetPortValue+0x84>
		   break;
		}
		case(DIO_PORTB):
			{  PORTB=Copy_u8PortValue;
     dda:	e8 e3       	ldi	r30, 0x38	; 56
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	80 83       	st	Z, r24
     de2:	0c c0       	rjmp	.+24     	; 0xdfc <DIO_enuSetPortValue+0x84>
			   break;
			}
		case(DIO_PORTC):
			{  PORTC=Copy_u8PortValue;
     de4:	e5 e3       	ldi	r30, 0x35	; 53
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	80 83       	st	Z, r24
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <DIO_enuSetPortValue+0x84>
			   break;
			}
		case(DIO_PORTD):
			{  PORTD=Copy_u8PortValue;
     dee:	e2 e3       	ldi	r30, 0x32	; 50
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	80 83       	st	Z, r24
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_enuSetPortValue+0x84>
		 Local_enuErrorState=ES_OK;
		}
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_enuErrorState;
     dfc:	89 81       	ldd	r24, Y+1	; 0x01

}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <DIO_enuTogPort>:

ES_t DIO_enuTogPort (u8 Copy_u8PortID)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	00 d0       	rcall	.+0      	; 0xe14 <DIO_enuTogPort+0x6>
     e14:	00 d0       	rcall	.+0      	; 0xe16 <DIO_enuTogPort+0x8>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     e1c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD){
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	84 30       	cpi	r24, 0x04	; 4
     e22:	08 f0       	brcs	.+2      	; 0xe26 <DIO_enuTogPort+0x18>
     e24:	3f c0       	rjmp	.+126    	; 0xea4 <DIO_enuTogPort+0x96>
	switch(Copy_u8PortID)
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	3c 83       	std	Y+4, r19	; 0x04
     e2e:	2b 83       	std	Y+3, r18	; 0x03
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	91 05       	cpc	r25, r1
     e38:	e9 f0       	breq	.+58     	; 0xe74 <DIO_enuTogPort+0x66>
     e3a:	2b 81       	ldd	r18, Y+3	; 0x03
     e3c:	3c 81       	ldd	r19, Y+4	; 0x04
     e3e:	22 30       	cpi	r18, 0x02	; 2
     e40:	31 05       	cpc	r19, r1
     e42:	2c f4       	brge	.+10     	; 0xe4e <DIO_enuTogPort+0x40>
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	61 f0       	breq	.+24     	; 0xe64 <DIO_enuTogPort+0x56>
     e4c:	2d c0       	rjmp	.+90     	; 0xea8 <DIO_enuTogPort+0x9a>
     e4e:	2b 81       	ldd	r18, Y+3	; 0x03
     e50:	3c 81       	ldd	r19, Y+4	; 0x04
     e52:	22 30       	cpi	r18, 0x02	; 2
     e54:	31 05       	cpc	r19, r1
     e56:	b1 f0       	breq	.+44     	; 0xe84 <DIO_enuTogPort+0x76>
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	91 05       	cpc	r25, r1
     e60:	c9 f0       	breq	.+50     	; 0xe94 <DIO_enuTogPort+0x86>
     e62:	22 c0       	rjmp	.+68     	; 0xea8 <DIO_enuTogPort+0x9a>
			{
			case(DIO_PORTA):
			{  PORTA =~ PORTA;
     e64:	ab e3       	ldi	r26, 0x3B	; 59
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	eb e3       	ldi	r30, 0x3B	; 59
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 95       	com	r24
     e70:	8c 93       	st	X, r24
     e72:	1a c0       	rjmp	.+52     	; 0xea8 <DIO_enuTogPort+0x9a>
			   break;
			}
			case(DIO_PORTB):
				{  PORTB = ~PORTB;
     e74:	a8 e3       	ldi	r26, 0x38	; 56
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e3       	ldi	r30, 0x38	; 56
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 95       	com	r24
     e80:	8c 93       	st	X, r24
     e82:	12 c0       	rjmp	.+36     	; 0xea8 <DIO_enuTogPort+0x9a>
				   break;
				}
			case(DIO_PORTC):
				{  PORTC = ~PORTC;
     e84:	a5 e3       	ldi	r26, 0x35	; 53
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e5 e3       	ldi	r30, 0x35	; 53
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 95       	com	r24
     e90:	8c 93       	st	X, r24
     e92:	0a c0       	rjmp	.+20     	; 0xea8 <DIO_enuTogPort+0x9a>
				   break;
				}
			case(DIO_PORTD):
				{  PORTD = ~PORTD;
     e94:	a2 e3       	ldi	r26, 0x32	; 50
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e2 e3       	ldi	r30, 0x32	; 50
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 95       	com	r24
     ea0:	8c 93       	st	X, r24
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_enuTogPort+0x9a>
			 Local_enuErrorState=ES_OK;
			}
}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	89 83       	std	Y+1, r24	; 0x01
		}
			return Local_enuErrorState;
     ea8:	89 81       	ldd	r24, Y+1	; 0x01


}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue (u8 Copy_u8PortID, u8 *Copy_pu8PortValue)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <DIO_enuGetPortValue+0x6>
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <DIO_enuGetPortValue+0x8>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <DIO_enuGetPortValue+0xa>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	8a 83       	std	Y+2, r24	; 0x02
     ec8:	7c 83       	std	Y+4, r23	; 0x04
     eca:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     ecc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8PortValue != NULL)
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	09 f4       	brne	.+2      	; 0xed8 <DIO_enuGetPortValue+0x20>
     ed6:	41 c0       	rjmp	.+130    	; 0xf5a <DIO_enuGetPortValue+0xa2>
	{
		if(Copy_u8PortID <= DIO_PORTD){
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	84 30       	cpi	r24, 0x04	; 4
     edc:	d8 f5       	brcc	.+118    	; 0xf54 <DIO_enuGetPortValue+0x9c>
			switch(Copy_u8PortID)
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3e 83       	std	Y+6, r19	; 0x06
     ee6:	2d 83       	std	Y+5, r18	; 0x05
     ee8:	8d 81       	ldd	r24, Y+5	; 0x05
     eea:	9e 81       	ldd	r25, Y+6	; 0x06
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	91 05       	cpc	r25, r1
     ef0:	e1 f0       	breq	.+56     	; 0xf2a <DIO_enuGetPortValue+0x72>
     ef2:	2d 81       	ldd	r18, Y+5	; 0x05
     ef4:	3e 81       	ldd	r19, Y+6	; 0x06
     ef6:	22 30       	cpi	r18, 0x02	; 2
     ef8:	31 05       	cpc	r19, r1
     efa:	2c f4       	brge	.+10     	; 0xf06 <DIO_enuGetPortValue+0x4e>
     efc:	8d 81       	ldd	r24, Y+5	; 0x05
     efe:	9e 81       	ldd	r25, Y+6	; 0x06
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	61 f0       	breq	.+24     	; 0xf1c <DIO_enuGetPortValue+0x64>
     f04:	2c c0       	rjmp	.+88     	; 0xf5e <DIO_enuGetPortValue+0xa6>
     f06:	2d 81       	ldd	r18, Y+5	; 0x05
     f08:	3e 81       	ldd	r19, Y+6	; 0x06
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	a1 f0       	breq	.+40     	; 0xf38 <DIO_enuGetPortValue+0x80>
     f10:	8d 81       	ldd	r24, Y+5	; 0x05
     f12:	9e 81       	ldd	r25, Y+6	; 0x06
     f14:	83 30       	cpi	r24, 0x03	; 3
     f16:	91 05       	cpc	r25, r1
     f18:	b1 f0       	breq	.+44     	; 0xf46 <DIO_enuGetPortValue+0x8e>
     f1a:	21 c0       	rjmp	.+66     	; 0xf5e <DIO_enuGetPortValue+0xa6>
					{
					case(DIO_PORTA):
					{
						*Copy_pu8PortValue=PINA;
     f1c:	e9 e3       	ldi	r30, 0x39	; 57
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	eb 81       	ldd	r30, Y+3	; 0x03
     f24:	fc 81       	ldd	r31, Y+4	; 0x04
     f26:	80 83       	st	Z, r24
     f28:	1a c0       	rjmp	.+52     	; 0xf5e <DIO_enuGetPortValue+0xa6>
					   break;
					}
					case(DIO_PORTB):
					{
					  	*Copy_pu8PortValue=PINB;
     f2a:	e6 e3       	ldi	r30, 0x36	; 54
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	eb 81       	ldd	r30, Y+3	; 0x03
     f32:	fc 81       	ldd	r31, Y+4	; 0x04
     f34:	80 83       	st	Z, r24
     f36:	13 c0       	rjmp	.+38     	; 0xf5e <DIO_enuGetPortValue+0xa6>
						   break;
					}
					case(DIO_PORTC):
					{
						*Copy_pu8PortValue=PINC;
     f38:	e3 e3       	ldi	r30, 0x33	; 51
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	eb 81       	ldd	r30, Y+3	; 0x03
     f40:	fc 81       	ldd	r31, Y+4	; 0x04
     f42:	80 83       	st	Z, r24
     f44:	0c c0       	rjmp	.+24     	; 0xf5e <DIO_enuGetPortValue+0xa6>
						   break;
					}
					case(DIO_PORTD):
					{
						*Copy_pu8PortValue=PIND;
     f46:	e0 e3       	ldi	r30, 0x30	; 48
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	eb 81       	ldd	r30, Y+3	; 0x03
     f4e:	fc 81       	ldd	r31, Y+4	; 0x04
     f50:	80 83       	st	Z, r24
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <DIO_enuGetPortValue+0xa6>
					 Local_enuErrorState=ES_OK;
					}
		                               }
				else
				{
					Local_enuErrorState=ES_OUT_OF_RANGE;
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_enuGetPortValue+0xa6>
				}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f60:	26 96       	adiw	r28, 0x06	; 6
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <DIO_enuSetPinDirection>:


ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8PinDirection)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <DIO_enuSetPinDirection+0x6>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <DIO_enuSetPinDirection+0x8>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <DIO_enuSetPinDirection+0xa>
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	8a 83       	std	Y+2, r24	; 0x02
     f82:	6b 83       	std	Y+3, r22	; 0x03
     f84:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     f86:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8PinDirection <= BIT_MASK){
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	84 30       	cpi	r24, 0x04	; 4
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <DIO_enuSetPinDirection+0x1e>
     f8e:	cf c0       	rjmp	.+414    	; 0x112e <DIO_enuSetPinDirection+0x1bc>
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	88 30       	cpi	r24, 0x08	; 8
     f94:	08 f0       	brcs	.+2      	; 0xf98 <DIO_enuSetPinDirection+0x26>
     f96:	cb c0       	rjmp	.+406    	; 0x112e <DIO_enuSetPinDirection+0x1bc>
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	82 30       	cpi	r24, 0x02	; 2
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <DIO_enuSetPinDirection+0x2e>
     f9e:	c7 c0       	rjmp	.+398    	; 0x112e <DIO_enuSetPinDirection+0x1bc>
		switch(Copy_u8PortID)
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	3e 83       	std	Y+6, r19	; 0x06
     fa8:	2d 83       	std	Y+5, r18	; 0x05
     faa:	6d 81       	ldd	r22, Y+5	; 0x05
     fac:	7e 81       	ldd	r23, Y+6	; 0x06
     fae:	61 30       	cpi	r22, 0x01	; 1
     fb0:	71 05       	cpc	r23, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <DIO_enuSetPinDirection+0x44>
     fb4:	41 c0       	rjmp	.+130    	; 0x1038 <DIO_enuSetPinDirection+0xc6>
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	9e 81       	ldd	r25, Y+6	; 0x06
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	91 05       	cpc	r25, r1
     fbe:	34 f4       	brge	.+12     	; 0xfcc <DIO_enuSetPinDirection+0x5a>
     fc0:	2d 81       	ldd	r18, Y+5	; 0x05
     fc2:	3e 81       	ldd	r19, Y+6	; 0x06
     fc4:	21 15       	cp	r18, r1
     fc6:	31 05       	cpc	r19, r1
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <DIO_enuSetPinDirection+0x74>
     fca:	b3 c0       	rjmp	.+358    	; 0x1132 <DIO_enuSetPinDirection+0x1c0>
     fcc:	6d 81       	ldd	r22, Y+5	; 0x05
     fce:	7e 81       	ldd	r23, Y+6	; 0x06
     fd0:	62 30       	cpi	r22, 0x02	; 2
     fd2:	71 05       	cpc	r23, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <DIO_enuSetPinDirection+0x66>
     fd6:	59 c0       	rjmp	.+178    	; 0x108a <DIO_enuSetPinDirection+0x118>
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	83 30       	cpi	r24, 0x03	; 3
     fde:	91 05       	cpc	r25, r1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <DIO_enuSetPinDirection+0x72>
     fe2:	7c c0       	rjmp	.+248    	; 0x10dc <DIO_enuSetPinDirection+0x16a>
     fe4:	a6 c0       	rjmp	.+332    	; 0x1132 <DIO_enuSetPinDirection+0x1c0>
				{
				case(DIO_PORTA):
				{  DDRA &= ~(BIT_MASK<< Copy_u8PinID);
     fe6:	aa e3       	ldi	r26, 0x3A	; 58
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ea e3       	ldi	r30, 0x3A	; 58
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_enuSetPinDirection+0x90>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	2a 95       	dec	r18
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_enuSetPinDirection+0x8c>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
				   DDRA |= (Copy_u8PinDirection<< Copy_u8PinID);
    100c:	aa e3       	ldi	r26, 0x3A	; 58
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ea e3       	ldi	r30, 0x3A	; 58
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	b9 01       	movw	r22, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_enuSetPinDirection+0xba>
    1028:	66 0f       	add	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	8a 95       	dec	r24
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_enuSetPinDirection+0xb6>
    1030:	cb 01       	movw	r24, r22
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	7d c0       	rjmp	.+250    	; 0x1132 <DIO_enuSetPinDirection+0x1c0>
				   break;
				}
				case(DIO_PORTB):
					{  DDRB &= ~(BIT_MASK<< Copy_u8PinID);
    1038:	a7 e3       	ldi	r26, 0x37	; 55
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e7 e3       	ldi	r30, 0x37	; 55
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_enuSetPinDirection+0xe2>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	2a 95       	dec	r18
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_enuSetPinDirection+0xde>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
					   DDRB |= (Copy_u8PinDirection<< Copy_u8PinID);
    105e:	a7 e3       	ldi	r26, 0x37	; 55
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e7 e3       	ldi	r30, 0x37	; 55
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	b9 01       	movw	r22, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_enuSetPinDirection+0x10c>
    107a:	66 0f       	add	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_enuSetPinDirection+0x108>
    1082:	cb 01       	movw	r24, r22
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	54 c0       	rjmp	.+168    	; 0x1132 <DIO_enuSetPinDirection+0x1c0>
					   break;
					}
				case(DIO_PORTC):
					{  DDRC &= ~(BIT_MASK<<Copy_u8PinID);
    108a:	a4 e3       	ldi	r26, 0x34	; 52
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e3       	ldi	r30, 0x34	; 52
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_enuSetPinDirection+0x134>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	2a 95       	dec	r18
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_enuSetPinDirection+0x130>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
					   DDRC |= (Copy_u8PinDirection << Copy_u8PinID);
    10b0:	a4 e3       	ldi	r26, 0x34	; 52
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e4 e3       	ldi	r30, 0x34	; 52
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	b9 01       	movw	r22, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_enuSetPinDirection+0x15e>
    10cc:	66 0f       	add	r22, r22
    10ce:	77 1f       	adc	r23, r23
    10d0:	8a 95       	dec	r24
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_enuSetPinDirection+0x15a>
    10d4:	cb 01       	movw	r24, r22
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	2b c0       	rjmp	.+86     	; 0x1132 <DIO_enuSetPinDirection+0x1c0>
					   break;
					}
				case(DIO_PORTD):
					{  DDRD &= ~(BIT_MASK<< Copy_u8PinID);
    10dc:	a1 e3       	ldi	r26, 0x31	; 49
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e1 e3       	ldi	r30, 0x31	; 49
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_enuSetPinDirection+0x186>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	2a 95       	dec	r18
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_enuSetPinDirection+0x182>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
					   DDRD |= (Copy_u8PinDirection<< Copy_u8PinID);
    1102:	a1 e3       	ldi	r26, 0x31	; 49
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e1 e3       	ldi	r30, 0x31	; 49
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	b9 01       	movw	r22, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_enuSetPinDirection+0x1b0>
    111e:	66 0f       	add	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	8a 95       	dec	r24
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_enuSetPinDirection+0x1ac>
    1126:	cb 01       	movw	r24, r22
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_enuSetPinDirection+0x1c0>
				 Local_enuErrorState=ES_OK;
				}
	}
			else
			{
				Local_enuErrorState=ES_OUT_OF_RANGE;
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	89 83       	std	Y+1, r24	; 0x01
			}
				return Local_enuErrorState;
    1132:	89 81       	ldd	r24, Y+1	; 0x01

}
    1134:	26 96       	adiw	r28, 0x06	; 6
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8PinValue)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <DIO_enuSetPinValue+0x6>
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_enuSetPinValue+0x8>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_enuSetPinValue+0xa>
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	8a 83       	std	Y+2, r24	; 0x02
    1156:	6b 83       	std	Y+3, r22	; 0x03
    1158:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    115a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8PinValue <= 1){
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	84 30       	cpi	r24, 0x04	; 4
    1160:	08 f0       	brcs	.+2      	; 0x1164 <DIO_enuSetPinValue+0x1e>
    1162:	cf c0       	rjmp	.+414    	; 0x1302 <DIO_enuSetPinValue+0x1bc>
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 30       	cpi	r24, 0x08	; 8
    1168:	08 f0       	brcs	.+2      	; 0x116c <DIO_enuSetPinValue+0x26>
    116a:	cb c0       	rjmp	.+406    	; 0x1302 <DIO_enuSetPinValue+0x1bc>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	08 f0       	brcs	.+2      	; 0x1174 <DIO_enuSetPinValue+0x2e>
    1172:	c7 c0       	rjmp	.+398    	; 0x1302 <DIO_enuSetPinValue+0x1bc>
			switch(Copy_u8PortID)
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3e 83       	std	Y+6, r19	; 0x06
    117c:	2d 83       	std	Y+5, r18	; 0x05
    117e:	6d 81       	ldd	r22, Y+5	; 0x05
    1180:	7e 81       	ldd	r23, Y+6	; 0x06
    1182:	61 30       	cpi	r22, 0x01	; 1
    1184:	71 05       	cpc	r23, r1
    1186:	09 f4       	brne	.+2      	; 0x118a <DIO_enuSetPinValue+0x44>
    1188:	41 c0       	rjmp	.+130    	; 0x120c <DIO_enuSetPinValue+0xc6>
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	91 05       	cpc	r25, r1
    1192:	34 f4       	brge	.+12     	; 0x11a0 <DIO_enuSetPinValue+0x5a>
    1194:	2d 81       	ldd	r18, Y+5	; 0x05
    1196:	3e 81       	ldd	r19, Y+6	; 0x06
    1198:	21 15       	cp	r18, r1
    119a:	31 05       	cpc	r19, r1
    119c:	71 f0       	breq	.+28     	; 0x11ba <DIO_enuSetPinValue+0x74>
    119e:	b3 c0       	rjmp	.+358    	; 0x1306 <DIO_enuSetPinValue+0x1c0>
    11a0:	6d 81       	ldd	r22, Y+5	; 0x05
    11a2:	7e 81       	ldd	r23, Y+6	; 0x06
    11a4:	62 30       	cpi	r22, 0x02	; 2
    11a6:	71 05       	cpc	r23, r1
    11a8:	09 f4       	brne	.+2      	; 0x11ac <DIO_enuSetPinValue+0x66>
    11aa:	59 c0       	rjmp	.+178    	; 0x125e <DIO_enuSetPinValue+0x118>
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	91 05       	cpc	r25, r1
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <DIO_enuSetPinValue+0x72>
    11b6:	7c c0       	rjmp	.+248    	; 0x12b0 <DIO_enuSetPinValue+0x16a>
    11b8:	a6 c0       	rjmp	.+332    	; 0x1306 <DIO_enuSetPinValue+0x1c0>
					{
					case(DIO_PORTA):
					    {  PORTA &= ~(BIT_MASK<< Copy_u8PinID);
    11ba:	ab e3       	ldi	r26, 0x3B	; 59
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	eb e3       	ldi	r30, 0x3B	; 59
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_enuSetPinValue+0x90>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	2a 95       	dec	r18
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_enuSetPinValue+0x8c>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
					   	   PORTA |= (Copy_u8PinValue <<Copy_u8PinID);
    11e0:	ab e3       	ldi	r26, 0x3B	; 59
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	eb e3       	ldi	r30, 0x3B	; 59
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	b9 01       	movw	r22, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_enuSetPinValue+0xba>
    11fc:	66 0f       	add	r22, r22
    11fe:	77 1f       	adc	r23, r23
    1200:	8a 95       	dec	r24
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_enuSetPinValue+0xb6>
    1204:	cb 01       	movw	r24, r22
    1206:	84 2b       	or	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	7d c0       	rjmp	.+250    	; 0x1306 <DIO_enuSetPinValue+0x1c0>
					   	   break;
					    }
					case(DIO_PORTB):
						{  PORTB &= ~(BIT_MASK<<Copy_u8PinID);
    120c:	a8 e3       	ldi	r26, 0x38	; 56
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e8 e3       	ldi	r30, 0x38	; 56
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_enuSetPinValue+0xe2>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	2a 95       	dec	r18
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_enuSetPinValue+0xde>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
						   PORTB |= (Copy_u8PinValue<< Copy_u8PinID);
    1232:	a8 e3       	ldi	r26, 0x38	; 56
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e8 e3       	ldi	r30, 0x38	; 56
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	b9 01       	movw	r22, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_enuSetPinValue+0x10c>
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	8a 95       	dec	r24
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_enuSetPinValue+0x108>
    1256:	cb 01       	movw	r24, r22
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	54 c0       	rjmp	.+168    	; 0x1306 <DIO_enuSetPinValue+0x1c0>
						   break;
						}
					case(DIO_PORTC):
						{  PORTC &= ~(BIT_MASK<< Copy_u8PinID);
    125e:	a5 e3       	ldi	r26, 0x35	; 53
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e3       	ldi	r30, 0x35	; 53
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_enuSetPinValue+0x134>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	2a 95       	dec	r18
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_enuSetPinValue+0x130>
    127e:	80 95       	com	r24
    1280:	84 23       	and	r24, r20
    1282:	8c 93       	st	X, r24
						   PORTC |= (Copy_u8PinValue<< Copy_u8PinID);
    1284:	a5 e3       	ldi	r26, 0x35	; 53
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e5 e3       	ldi	r30, 0x35	; 53
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	b9 01       	movw	r22, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_enuSetPinValue+0x15e>
    12a0:	66 0f       	add	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	8a 95       	dec	r24
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_enuSetPinValue+0x15a>
    12a8:	cb 01       	movw	r24, r22
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	2b c0       	rjmp	.+86     	; 0x1306 <DIO_enuSetPinValue+0x1c0>
						   break;
						}
					case(DIO_PORTD):
						{  PORTD &= ~(BIT_MASK<< Copy_u8PinID);
    12b0:	a2 e3       	ldi	r26, 0x32	; 50
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e2 e3       	ldi	r30, 0x32	; 50
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_enuSetPinValue+0x186>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	2a 95       	dec	r18
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_enuSetPinValue+0x182>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
						   PORTD |= (Copy_u8PinValue<< Copy_u8PinID);
    12d6:	a2 e3       	ldi	r26, 0x32	; 50
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	b9 01       	movw	r22, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_enuSetPinValue+0x1b0>
    12f2:	66 0f       	add	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	8a 95       	dec	r24
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_enuSetPinValue+0x1ac>
    12fa:	cb 01       	movw	r24, r22
    12fc:	84 2b       	or	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_enuSetPinValue+0x1c0>
					 Local_enuErrorState=ES_OK;
					}
		}
				else
				{
					Local_enuErrorState=ES_OUT_OF_RANGE;
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	89 83       	std	Y+1, r24	; 0x01
				}
					return Local_enuErrorState;
    1306:	89 81       	ldd	r24, Y+1	; 0x01


}
    1308:	26 96       	adiw	r28, 0x06	; 6
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <DIO_enuTogPin>:

ES_t DIO_enuTogPin (u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <DIO_enuTogPin+0x6>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <DIO_enuTogPin+0x8>
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	8a 83       	std	Y+2, r24	; 0x02
    132a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    132c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_PIN7 ){
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	84 30       	cpi	r24, 0x04	; 4
    1332:	08 f0       	brcs	.+2      	; 0x1336 <DIO_enuTogPin+0x1c>
    1334:	73 c0       	rjmp	.+230    	; 0x141c <DIO_enuTogPin+0x102>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 30       	cpi	r24, 0x08	; 8
    133a:	08 f0       	brcs	.+2      	; 0x133e <DIO_enuTogPin+0x24>
    133c:	6f c0       	rjmp	.+222    	; 0x141c <DIO_enuTogPin+0x102>
				switch(Copy_u8PortID)
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3d 83       	std	Y+5, r19	; 0x05
    1346:	2c 83       	std	Y+4, r18	; 0x04
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	49 f1       	breq	.+82     	; 0x13a4 <DIO_enuTogPin+0x8a>
    1352:	2c 81       	ldd	r18, Y+4	; 0x04
    1354:	3d 81       	ldd	r19, Y+5	; 0x05
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	2c f4       	brge	.+10     	; 0x1366 <DIO_enuTogPin+0x4c>
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	61 f0       	breq	.+24     	; 0x137c <DIO_enuTogPin+0x62>
    1364:	5d c0       	rjmp	.+186    	; 0x1420 <DIO_enuTogPin+0x106>
    1366:	2c 81       	ldd	r18, Y+4	; 0x04
    1368:	3d 81       	ldd	r19, Y+5	; 0x05
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	71 f1       	breq	.+92     	; 0x13cc <DIO_enuTogPin+0xb2>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	e9 f1       	breq	.+122    	; 0x13f4 <DIO_enuTogPin+0xda>
    137a:	52 c0       	rjmp	.+164    	; 0x1420 <DIO_enuTogPin+0x106>
						{
						case(DIO_PORTA):
						{  PORTA ^= (BIT_MASK<< Copy_u8PinID);
    137c:	ab e3       	ldi	r26, 0x3B	; 59
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	eb e3       	ldi	r30, 0x3B	; 59
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_enuTogPin+0x80>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_enuTogPin+0x7c>
    139e:	84 27       	eor	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	3e c0       	rjmp	.+124    	; 0x1420 <DIO_enuTogPin+0x106>

						   break;
						}
						case(DIO_PORTB):
							{  PORTB ^= (BIT_MASK<< Copy_u8PinID);
    13a4:	a8 e3       	ldi	r26, 0x38	; 56
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e8 e3       	ldi	r30, 0x38	; 56
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_enuTogPin+0xa8>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_enuTogPin+0xa4>
    13c6:	84 27       	eor	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	2a c0       	rjmp	.+84     	; 0x1420 <DIO_enuTogPin+0x106>

							   break;
							}
						case(DIO_PORTC):
							{  PORTC ^= (BIT_MASK<< Copy_u8PinID);
    13cc:	a5 e3       	ldi	r26, 0x35	; 53
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e5 e3       	ldi	r30, 0x35	; 53
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_enuTogPin+0xd0>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_enuTogPin+0xcc>
    13ee:	84 27       	eor	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	16 c0       	rjmp	.+44     	; 0x1420 <DIO_enuTogPin+0x106>

							   break;
							}
						case(DIO_PORTD):
							{  PORTD ^= (BIT_MASK<< Copy_u8PinID);
    13f4:	a2 e3       	ldi	r26, 0x32	; 50
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e2 e3       	ldi	r30, 0x32	; 50
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_enuTogPin+0xf8>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_enuTogPin+0xf4>
    1416:	84 27       	eor	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_enuTogPin+0x106>
						 Local_enuErrorState=ES_OK;
						}
			}
					else
					{
						Local_enuErrorState=ES_OUT_OF_RANGE;
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	89 83       	std	Y+1, r24	; 0x01
					}
						return Local_enuErrorState;
    1420:	89 81       	ldd	r24, Y+1	; 0x01



}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue (u8 Copy_u8PortID,u8 Copy_u8PinID , u8 *Copy_pu8PintValue)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	27 97       	sbiw	r28, 0x07	; 7
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	8a 83       	std	Y+2, r24	; 0x02
    1448:	6b 83       	std	Y+3, r22	; 0x03
    144a:	5d 83       	std	Y+5, r21	; 0x05
    144c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    144e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8PintValue != NULL)
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	09 f4       	brne	.+2      	; 0x145a <DIO_enuGetPinValue+0x28>
    1458:	7c c0       	rjmp	.+248    	; 0x1552 <DIO_enuGetPinValue+0x120>
		{
			if(Copy_u8PortID <= DIO_PORTD &&  Copy_u8PinID <=DIO_PIN7){
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	84 30       	cpi	r24, 0x04	; 4
    145e:	08 f0       	brcs	.+2      	; 0x1462 <DIO_enuGetPinValue+0x30>
    1460:	75 c0       	rjmp	.+234    	; 0x154c <DIO_enuGetPinValue+0x11a>
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 30       	cpi	r24, 0x08	; 8
    1466:	08 f0       	brcs	.+2      	; 0x146a <DIO_enuGetPinValue+0x38>
    1468:	71 c0       	rjmp	.+226    	; 0x154c <DIO_enuGetPinValue+0x11a>
				switch(Copy_u8PortID)
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3f 83       	std	Y+7, r19	; 0x07
    1472:	2e 83       	std	Y+6, r18	; 0x06
    1474:	4e 81       	ldd	r20, Y+6	; 0x06
    1476:	5f 81       	ldd	r21, Y+7	; 0x07
    1478:	41 30       	cpi	r20, 0x01	; 1
    147a:	51 05       	cpc	r21, r1
    147c:	59 f1       	breq	.+86     	; 0x14d4 <DIO_enuGetPinValue+0xa2>
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	91 05       	cpc	r25, r1
    1486:	34 f4       	brge	.+12     	; 0x1494 <DIO_enuGetPinValue+0x62>
    1488:	2e 81       	ldd	r18, Y+6	; 0x06
    148a:	3f 81       	ldd	r19, Y+7	; 0x07
    148c:	21 15       	cp	r18, r1
    148e:	31 05       	cpc	r19, r1
    1490:	69 f0       	breq	.+26     	; 0x14ac <DIO_enuGetPinValue+0x7a>
    1492:	61 c0       	rjmp	.+194    	; 0x1556 <DIO_enuGetPinValue+0x124>
    1494:	4e 81       	ldd	r20, Y+6	; 0x06
    1496:	5f 81       	ldd	r21, Y+7	; 0x07
    1498:	42 30       	cpi	r20, 0x02	; 2
    149a:	51 05       	cpc	r21, r1
    149c:	79 f1       	breq	.+94     	; 0x14fc <DIO_enuGetPinValue+0xca>
    149e:	8e 81       	ldd	r24, Y+6	; 0x06
    14a0:	9f 81       	ldd	r25, Y+7	; 0x07
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <DIO_enuGetPinValue+0x78>
    14a8:	3d c0       	rjmp	.+122    	; 0x1524 <DIO_enuGetPinValue+0xf2>
    14aa:	55 c0       	rjmp	.+170    	; 0x1556 <DIO_enuGetPinValue+0x124>
				{
					 case(DIO_PORTA):
							{
						 *Copy_pu8PintValue=((PINA >> Copy_u8PinID) & BIT_MASK );
    14ac:	e9 e3       	ldi	r30, 0x39	; 57
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_enuGetPinValue+0x92>
    14c0:	55 95       	asr	r21
    14c2:	47 95       	ror	r20
    14c4:	8a 95       	dec	r24
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_enuGetPinValue+0x8e>
    14c8:	ca 01       	movw	r24, r20
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	ec 81       	ldd	r30, Y+4	; 0x04
    14ce:	fd 81       	ldd	r31, Y+5	; 0x05
    14d0:	80 83       	st	Z, r24
    14d2:	41 c0       	rjmp	.+130    	; 0x1556 <DIO_enuGetPinValue+0x124>
							   break;
							}
					case(DIO_PORTB):
				     		{
						 *Copy_pu8PintValue=((PINB >> Copy_u8PinID) & BIT_MASK );
    14d4:	e6 e3       	ldi	r30, 0x36	; 54
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a9 01       	movw	r20, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_enuGetPinValue+0xba>
    14e8:	55 95       	asr	r21
    14ea:	47 95       	ror	r20
    14ec:	8a 95       	dec	r24
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_enuGetPinValue+0xb6>
    14f0:	ca 01       	movw	r24, r20
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	ec 81       	ldd	r30, Y+4	; 0x04
    14f6:	fd 81       	ldd	r31, Y+5	; 0x05
    14f8:	80 83       	st	Z, r24
    14fa:	2d c0       	rjmp	.+90     	; 0x1556 <DIO_enuGetPinValue+0x124>
							   break;
							}
					case(DIO_PORTC):
				        	{
						*Copy_pu8PintValue=((PINC >> Copy_u8PinID) & BIT_MASK );
    14fc:	e3 e3       	ldi	r30, 0x33	; 51
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_enuGetPinValue+0xe2>
    1510:	55 95       	asr	r21
    1512:	47 95       	ror	r20
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_enuGetPinValue+0xde>
    1518:	ca 01       	movw	r24, r20
    151a:	81 70       	andi	r24, 0x01	; 1
    151c:	ec 81       	ldd	r30, Y+4	; 0x04
    151e:	fd 81       	ldd	r31, Y+5	; 0x05
    1520:	80 83       	st	Z, r24
    1522:	19 c0       	rjmp	.+50     	; 0x1556 <DIO_enuGetPinValue+0x124>
							    break;
							}
					case(DIO_PORTD):
							{
						*Copy_pu8PintValue=((PIND >> Copy_u8PinID) & BIT_MASK );
    1524:	e0 e3       	ldi	r30, 0x30	; 48
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a9 01       	movw	r20, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_enuGetPinValue+0x10a>
    1538:	55 95       	asr	r21
    153a:	47 95       	ror	r20
    153c:	8a 95       	dec	r24
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_enuGetPinValue+0x106>
    1540:	ca 01       	movw	r24, r20
    1542:	81 70       	andi	r24, 0x01	; 1
    1544:	ec 81       	ldd	r30, Y+4	; 0x04
    1546:	fd 81       	ldd	r31, Y+5	; 0x05
    1548:	80 83       	st	Z, r24
    154a:	05 c0       	rjmp	.+10     	; 0x1556 <DIO_enuGetPinValue+0x124>
							Local_enuErrorState=ES_OK;
				}
			}
			else
			{
				Local_enuErrorState=ES_OUT_OF_RANGE;
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_enuGetPinValue+0x124>
			}
		}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1552:	82 e0       	ldi	r24, 0x02	; 2
    1554:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1556:	89 81       	ldd	r24, Y+1	; 0x01


}
    1558:	27 96       	adiw	r28, 0x07	; 7
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <ADC_enuInit>:

#include "ADC_Private.h"
#include "ADC_Config.h"

ES_t ADC_enuInit()
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_OK;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
#if VOLT_REF == AREF
	ADMUX &= ~(1<<6);
	ADMUX &= ~(1<<7);

#elif VOLT_REF == AVCC
	ADMUX |= (1<<6);
    1578:	a7 e2       	ldi	r26, 0x27	; 39
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e7 e2       	ldi	r30, 0x27	; 39
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 64       	ori	r24, 0x40	; 64
    1584:	8c 93       	st	X, r24
	ADMUX &= ~(1<<7);
    1586:	a7 e2       	ldi	r26, 0x27	; 39
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e7 e2       	ldi	r30, 0x27	; 39
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8f 77       	andi	r24, 0x7F	; 127
    1592:	8c 93       	st	X, r24



	/* select result adjust*/
#if ADC_ADJUST == RIGHT
	ADMUX &= ~(1<<5);
    1594:	a7 e2       	ldi	r26, 0x27	; 39
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e7 e2       	ldi	r30, 0x27	; 39
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8f 7d       	andi	r24, 0xDF	; 223
    15a0:	8c 93       	st	X, r24
	ADCSRA &= ~(1<<0);
	ADCSRA |= (1<<1);
	ADCSRA &= ~(1<<2);

#elif ADC_PRES == PRES_8
	ADCSRA |= (1<<0);
    15a2:	a6 e2       	ldi	r26, 0x26	; 38
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e6 e2       	ldi	r30, 0x26	; 38
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	81 60       	ori	r24, 0x01	; 1
    15ae:	8c 93       	st	X, r24
	ADCSRA |= (1<<1);
    15b0:	a6 e2       	ldi	r26, 0x26	; 38
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e6 e2       	ldi	r30, 0x26	; 38
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	82 60       	ori	r24, 0x02	; 2
    15bc:	8c 93       	st	X, r24
	ADCSRA &= ~(1<<2);
    15be:	a6 e2       	ldi	r26, 0x26	; 38
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e6 e2       	ldi	r30, 0x26	; 38
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8b 7f       	andi	r24, 0xFB	; 251
    15ca:	8c 93       	st	X, r24
	ADCSRA |= (1<<2);
#else
#error"pres choice is wrong"
#endif

	return Local_enuErrorState;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <ADC_enuSelectChannel>:


ES_t ADC_enuSelectChannel(u8 Copy_u8PositivePin,u8 Copy_u8CNegativePin,u8 Copy_u8GAIN)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <ADC_enuSelectChannel+0x6>
    15dc:	00 d0       	rcall	.+0      	; 0x15de <ADC_enuSelectChannel+0x8>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	8a 83       	std	Y+2, r24	; 0x02
    15e4:	6b 83       	std	Y+3, r22	; 0x03
    15e6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    15e8:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &= MASK;
    15ea:	a7 e2       	ldi	r26, 0x27	; 39
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e7 e2       	ldi	r30, 0x27	; 39
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	80 7e       	andi	r24, 0xE0	; 224
    15f6:	8c 93       	st	X, r24
	/* if negative pin <0 "invalid pinId" ,user considered Diff mode,
	 * and ifn't user considered Single_Ended mode */
if ( Copy_u8CNegativePin >= 0 )

		ADMUX |= Copy_u8PositivePin;
    15f8:	a7 e2       	ldi	r26, 0x27	; 39
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e7 e2       	ldi	r30, 0x27	; 39
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	90 81       	ld	r25, Z
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	89 2b       	or	r24, r25
    1606:	8c 93       	st	X, r24
		}
}



	return Local_enuErrorState;
    1608:	89 81       	ldd	r24, Y+1	; 0x01
}
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <ADC_vidEnableADC>:

void ADC_vidEnableADC()
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	/*        Enable ADC            */
	ADCSRA |= (1<<7);
    1620:	a6 e2       	ldi	r26, 0x26	; 38
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e6 e2       	ldi	r30, 0x26	; 38
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	80 68       	ori	r24, 0x80	; 128
    162c:	8c 93       	st	X, r24
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(s16* Copy_u16ADCRead)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <ADC_enuStartConversion+0x6>
    163a:	0f 92       	push	r0
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	9b 83       	std	Y+3, r25	; 0x03
    1642:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1644:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16ADCRead != NULL)
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	a1 f1       	breq	.+104    	; 0x16b6 <ADC_enuStartConversion+0x82>
	{

		/*        start  ADC  conversion              */
		ADCSRA |= (1<<6);
    164e:	a6 e2       	ldi	r26, 0x26	; 38
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e6 e2       	ldi	r30, 0x26	; 38
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 64       	ori	r24, 0x40	; 64
    165a:	8c 93       	st	X, r24

		/*      busy waiting until ADIF get set        */
		while(((ADCSRA  >> 4) & 1) == 0);
    165c:	e6 e2       	ldi	r30, 0x26	; 38
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	82 95       	swap	r24
    1664:	8f 70       	andi	r24, 0x0F	; 15
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	81 70       	andi	r24, 0x01	; 1
    166c:	90 70       	andi	r25, 0x00	; 0
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	a9 f3       	breq	.-22     	; 0x165c <ADC_enuStartConversion+0x28>

		/*    clear  ADIF    */
		ADCSRA &= ~(1<<4);
    1672:	a6 e2       	ldi	r26, 0x26	; 38
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e6 e2       	ldi	r30, 0x26	; 38
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8f 7e       	andi	r24, 0xEF	; 239
    167e:	8c 93       	st	X, r24

		/* get read of ADCL and ADCH after conversion  */
#if ADC_ADJUST == RIGHT
		*Copy_u16ADCRead = ADCL;
    1680:	e4 e2       	ldi	r30, 0x24	; 36
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	88 2f       	mov	r24, r24
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	ea 81       	ldd	r30, Y+2	; 0x02
    168c:	fb 81       	ldd	r31, Y+3	; 0x03
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	80 83       	st	Z, r24
		*Copy_u16ADCRead |= (ADCH << 8);
    1692:	ea 81       	ldd	r30, Y+2	; 0x02
    1694:	fb 81       	ldd	r31, Y+3	; 0x03
    1696:	20 81       	ld	r18, Z
    1698:	31 81       	ldd	r19, Z+1	; 0x01
    169a:	e5 e2       	ldi	r30, 0x25	; 37
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	98 2f       	mov	r25, r24
    16a6:	88 27       	eor	r24, r24
    16a8:	82 2b       	or	r24, r18
    16aa:	93 2b       	or	r25, r19
    16ac:	ea 81       	ldd	r30, Y+2	; 0x02
    16ae:	fb 81       	ldd	r31, Y+3	; 0x03
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	80 83       	st	Z, r24
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <ADC_enuStartConversion+0x86>
#endif

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <LM_enuInit>:
#include "LM_Config.h"



ES_t LM_enuInit(LM_t  *Copy_enuPArrstr)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <LM_enuInit+0x6>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <LM_enuInit+0x8>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    16d8:	1a 82       	std	Y+2, r1	; 0x02
	if( Copy_enuPArrstr != NULL)
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	89 f1       	breq	.+98     	; 0x1744 <LM_enuInit+0x7c>
	{
		ADC_enuInit();
    16e2:	0e 94 b5 0a 	call	0x156a	; 0x156a <ADC_enuInit>
		u8 Local_u8Iter;
		for(Local_u8Iter=0 ; Local_u8Iter<LM_NUM ; Local_u8Iter++)
    16e6:	19 82       	std	Y+1, r1	; 0x01
    16e8:	29 c0       	rjmp	.+82     	; 0x173c <LM_enuInit+0x74>
		{
			DIO_enuSetPinDirection(DIO_u8PORTA,Copy_enuPArrstr[Local_u8Iter].Positive_Channel,DIO_u8INPUT);
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	c9 01       	movw	r24, r18
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	28 0f       	add	r18, r24
    16f8:	39 1f       	adc	r19, r25
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	fc 01       	movw	r30, r24
    1700:	e2 0f       	add	r30, r18
    1702:	f3 1f       	adc	r31, r19
    1704:	90 81       	ld	r25, Z
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	69 2f       	mov	r22, r25
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>

			if(Copy_enuPArrstr[Local_u8Iter].Negative_Channel != NOT_CONNECTED )
			{
				DIO_enuSetPinDirection(DIO_u8PORTA,Copy_enuPArrstr[Local_u8Iter].Negative_Channel,DIO_u8INPUT);
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	c9 01       	movw	r24, r18
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	28 0f       	add	r18, r24
    171e:	39 1f       	adc	r19, r25
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	fc 01       	movw	r30, r24
    1726:	e2 0f       	add	r30, r18
    1728:	f3 1f       	adc	r31, r19
    172a:	91 81       	ldd	r25, Z+1	; 0x01
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	69 2f       	mov	r22, r25
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
	ES_t Local_enuErrorState = ES_NOK;
	if( Copy_enuPArrstr != NULL)
	{
		ADC_enuInit();
		u8 Local_u8Iter;
		for(Local_u8Iter=0 ; Local_u8Iter<LM_NUM ; Local_u8Iter++)
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	8f 5f       	subi	r24, 0xFF	; 255
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	88 23       	and	r24, r24
    1740:	a1 f2       	breq	.-88     	; 0x16ea <LM_enuInit+0x22>
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <LM_enuInit+0x80>


	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
    1748:	8a 81       	ldd	r24, Y+2	; 0x02



}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <LM_enuGetTemp>:
ES_t LM_enuGetTemp(s32 *Copy_s32Temp,LM_t *Copy_enuElement)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	27 97       	sbiw	r28, 0x07	; 7
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	9d 83       	std	Y+5, r25	; 0x05
    176e:	8c 83       	std	Y+4, r24	; 0x04
    1770:	7f 83       	std	Y+7, r23	; 0x07
    1772:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    1774:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_enuElement != NULL)
    1776:	8e 81       	ldd	r24, Y+6	; 0x06
    1778:	9f 81       	ldd	r25, Y+7	; 0x07
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	09 f4       	brne	.+2      	; 0x1780 <LM_enuGetTemp+0x28>
    177e:	50 c0       	rjmp	.+160    	; 0x1820 <LM_enuGetTemp+0xc8>
	{
		s16 Local_u16Read;

		ADC_enuSelectChannel( Copy_enuElement->Positive_Channel,Copy_enuElement->Negative_Channel,Copy_enuElement->Gain);
    1780:	ee 81       	ldd	r30, Y+6	; 0x06
    1782:	ff 81       	ldd	r31, Y+7	; 0x07
    1784:	80 81       	ld	r24, Z
    1786:	ee 81       	ldd	r30, Y+6	; 0x06
    1788:	ff 81       	ldd	r31, Y+7	; 0x07
    178a:	21 81       	ldd	r18, Z+1	; 0x01
    178c:	ee 81       	ldd	r30, Y+6	; 0x06
    178e:	ff 81       	ldd	r31, Y+7	; 0x07
    1790:	92 81       	ldd	r25, Z+2	; 0x02
    1792:	62 2f       	mov	r22, r18
    1794:	49 2f       	mov	r20, r25
    1796:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <ADC_enuSelectChannel>

		DIO_enuSetPinDirection(DIO_u8PORTA,Copy_enuElement->Positive_Channel,DIO_u8INPUT);
    179a:	ee 81       	ldd	r30, Y+6	; 0x06
    179c:	ff 81       	ldd	r31, Y+7	; 0x07
    179e:	90 81       	ld	r25, Z
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	69 2f       	mov	r22, r25
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>

		if(Copy_enuElement->Negative_Channel != NOT_CONNECTED )
		{
			DIO_enuSetPinDirection(DIO_u8PORTA,Copy_enuElement->Negative_Channel,DIO_u8INPUT);
    17aa:	ee 81       	ldd	r30, Y+6	; 0x06
    17ac:	ff 81       	ldd	r31, Y+7	; 0x07
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	69 2f       	mov	r22, r25
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
		}
		ADC_vidEnableADC();
    17ba:	0e 94 0c 0b 	call	0x1618	; 0x1618 <ADC_vidEnableADC>
		ADC_enuStartConversion(& Local_u16Read);
    17be:	ce 01       	movw	r24, r28
    17c0:	02 96       	adiw	r24, 0x02	; 2
    17c2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <ADC_enuStartConversion>

		*Copy_s32Temp = Local_u16Read*4.88*.1;
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ca:	aa 27       	eor	r26, r26
    17cc:	97 fd       	sbrc	r25, 7
    17ce:	a0 95       	com	r26
    17d0:	ba 2f       	mov	r27, r26
    17d2:	bc 01       	movw	r22, r24
    17d4:	cd 01       	movw	r24, r26
    17d6:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	26 ef       	ldi	r18, 0xF6	; 246
    17e4:	38 e2       	ldi	r19, 0x28	; 40
    17e6:	4c e9       	ldi	r20, 0x9C	; 156
    17e8:	50 e4       	ldi	r21, 0x40	; 64
    17ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	2d ec       	ldi	r18, 0xCD	; 205
    17f8:	3c ec       	ldi	r19, 0xCC	; 204
    17fa:	4c ec       	ldi	r20, 0xCC	; 204
    17fc:	5d e3       	ldi	r21, 0x3D	; 61
    17fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	ec 81       	ldd	r30, Y+4	; 0x04
    1814:	fd 81       	ldd	r31, Y+5	; 0x05
    1816:	80 83       	st	Z, r24
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	a2 83       	std	Z+2, r26	; 0x02
    181c:	b3 83       	std	Z+3, r27	; 0x03
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <LM_enuGetTemp+0xcc>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
}
    1826:	27 96       	adiw	r28, 0x07	; 7
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <LCD_enuInit>:

#include "util/delay.h"


ES_t LCD_enuInit(void)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	e9 97       	sbiw	r28, 0x39	; 57
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    184c:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	62 e0       	ldi	r22, 0x02	; 2
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	67 e0       	ldi	r22, 0x07	; 7
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	ac e0       	ldi	r26, 0x0C	; 12
    189a:	b2 e4       	ldi	r27, 0x42	; 66
    189c:	8d ab       	std	Y+53, r24	; 0x35
    189e:	9e ab       	std	Y+54, r25	; 0x36
    18a0:	af ab       	std	Y+55, r26	; 0x37
    18a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	6d a9       	ldd	r22, Y+53	; 0x35
    18a6:	7e a9       	ldd	r23, Y+54	; 0x36
    18a8:	8f a9       	ldd	r24, Y+55	; 0x37
    18aa:	98 ad       	ldd	r25, Y+56	; 0x38
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a e7       	ldi	r20, 0x7A	; 122
    18b2:	53 e4       	ldi	r21, 0x43	; 67
    18b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	89 ab       	std	Y+49, r24	; 0x31
    18be:	9a ab       	std	Y+50, r25	; 0x32
    18c0:	ab ab       	std	Y+51, r26	; 0x33
    18c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18c4:	69 a9       	ldd	r22, Y+49	; 0x31
    18c6:	7a a9       	ldd	r23, Y+50	; 0x32
    18c8:	8b a9       	ldd	r24, Y+51	; 0x33
    18ca:	9c a9       	ldd	r25, Y+52	; 0x34
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <LCD_enuInit+0xae>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	98 ab       	std	Y+48, r25	; 0x30
    18e2:	8f a7       	std	Y+47, r24	; 0x2f
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    18e6:	69 a9       	ldd	r22, Y+49	; 0x31
    18e8:	7a a9       	ldd	r23, Y+50	; 0x32
    18ea:	8b a9       	ldd	r24, Y+51	; 0x33
    18ec:	9c a9       	ldd	r25, Y+52	; 0x34
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1900:	7e a9       	ldd	r23, Y+54	; 0x36
    1902:	8f a9       	ldd	r24, Y+55	; 0x37
    1904:	98 ad       	ldd	r25, Y+56	; 0x38
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	98 ab       	std	Y+48, r25	; 0x30
    1924:	8f a7       	std	Y+47, r24	; 0x2f
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <LCD_enuInit+0x10e>
    1928:	89 e1       	ldi	r24, 0x19	; 25
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9e a7       	std	Y+46, r25	; 0x2e
    192e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1930:	8d a5       	ldd	r24, Y+45	; 0x2d
    1932:	9e a5       	ldd	r25, Y+46	; 0x2e
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_enuInit+0xfc>
    1938:	9e a7       	std	Y+46, r25	; 0x2e
    193a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8f a5       	ldd	r24, Y+47	; 0x2f
    193e:	98 a9       	ldd	r25, Y+48	; 0x30
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	98 ab       	std	Y+48, r25	; 0x30
    1944:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8f a5       	ldd	r24, Y+47	; 0x2f
    1948:	98 a9       	ldd	r25, Y+48	; 0x30
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <LCD_enuInit+0xf0>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	69 a9       	ldd	r22, Y+49	; 0x31
    1952:	7a a9       	ldd	r23, Y+50	; 0x32
    1954:	8b a9       	ldd	r24, Y+51	; 0x33
    1956:	9c a9       	ldd	r25, Y+52	; 0x34
    1958:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	98 ab       	std	Y+48, r25	; 0x30
    1962:	8f a7       	std	Y+47, r24	; 0x2f
    1964:	8f a5       	ldd	r24, Y+47	; 0x2f
    1966:	98 a9       	ldd	r25, Y+48	; 0x30
    1968:	9c a7       	std	Y+44, r25	; 0x2c
    196a:	8b a7       	std	Y+43, r24	; 0x2b
    196c:	8b a5       	ldd	r24, Y+43	; 0x2b
    196e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_enuInit+0x138>
    1974:	9c a7       	std	Y+44, r25	; 0x2c
    1976:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	66 e0       	ldi	r22, 0x06	; 6
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	65 e0       	ldi	r22, 0x05	; 5
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	64 e0       	ldi	r22, 0x04	; 4
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	63 e0       	ldi	r22, 0x03	; 3
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 b9 07 	call	0xf72	; 0xf72 <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    19a0:	88 e3       	ldi	r24, 0x38	; 56
    19a2:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_invidSendCommend>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e8       	ldi	r26, 0x80	; 128
    19ac:	bf e3       	ldi	r27, 0x3F	; 63
    19ae:	8f a3       	std	Y+39, r24	; 0x27
    19b0:	98 a7       	std	Y+40, r25	; 0x28
    19b2:	a9 a7       	std	Y+41, r26	; 0x29
    19b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b6:	6f a1       	ldd	r22, Y+39	; 0x27
    19b8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ba:	89 a5       	ldd	r24, Y+41	; 0x29
    19bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a e7       	ldi	r20, 0x7A	; 122
    19c4:	53 e4       	ldi	r21, 0x43	; 67
    19c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	8b a3       	std	Y+35, r24	; 0x23
    19d0:	9c a3       	std	Y+36, r25	; 0x24
    19d2:	ad a3       	std	Y+37, r26	; 0x25
    19d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19d6:	6b a1       	ldd	r22, Y+35	; 0x23
    19d8:	7c a1       	ldd	r23, Y+36	; 0x24
    19da:	8d a1       	ldd	r24, Y+37	; 0x25
    19dc:	9e a1       	ldd	r25, Y+38	; 0x26
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e8       	ldi	r20, 0x80	; 128
    19e4:	5f e3       	ldi	r21, 0x3F	; 63
    19e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ea:	88 23       	and	r24, r24
    19ec:	2c f4       	brge	.+10     	; 0x19f8 <LCD_enuInit+0x1c0>
		__ticks = 1;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9a a3       	std	Y+34, r25	; 0x22
    19f4:	89 a3       	std	Y+33, r24	; 0x21
    19f6:	3f c0       	rjmp	.+126    	; 0x1a76 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    19f8:	6b a1       	ldd	r22, Y+35	; 0x23
    19fa:	7c a1       	ldd	r23, Y+36	; 0x24
    19fc:	8d a1       	ldd	r24, Y+37	; 0x25
    19fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	3f ef       	ldi	r19, 0xFF	; 255
    1a04:	4f e7       	ldi	r20, 0x7F	; 127
    1a06:	57 e4       	ldi	r21, 0x47	; 71
    1a08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	4c f5       	brge	.+82     	; 0x1a62 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a10:	6f a1       	ldd	r22, Y+39	; 0x27
    1a12:	78 a5       	ldd	r23, Y+40	; 0x28
    1a14:	89 a5       	ldd	r24, Y+41	; 0x29
    1a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e2       	ldi	r20, 0x20	; 32
    1a1e:	51 e4       	ldi	r21, 0x41	; 65
    1a20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9a a3       	std	Y+34, r25	; 0x22
    1a36:	89 a3       	std	Y+33, r24	; 0x21
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <LCD_enuInit+0x220>
    1a3a:	89 e1       	ldi	r24, 0x19	; 25
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	98 a3       	std	Y+32, r25	; 0x20
    1a40:	8f 8f       	std	Y+31, r24	; 0x1f
    1a42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a44:	98 a1       	ldd	r25, Y+32	; 0x20
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <LCD_enuInit+0x20e>
    1a4a:	98 a3       	std	Y+32, r25	; 0x20
    1a4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a50:	9a a1       	ldd	r25, Y+34	; 0x22
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	9a a3       	std	Y+34, r25	; 0x22
    1a56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a58:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <LCD_enuInit+0x202>
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a62:	6b a1       	ldd	r22, Y+35	; 0x23
    1a64:	7c a1       	ldd	r23, Y+36	; 0x24
    1a66:	8d a1       	ldd	r24, Y+37	; 0x25
    1a68:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9a a3       	std	Y+34, r25	; 0x22
    1a74:	89 a3       	std	Y+33, r24	; 0x21
    1a76:	89 a1       	ldd	r24, Y+33	; 0x21
    1a78:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a7c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <LCD_enuInit+0x24a>
    1a86:	9e 8f       	std	Y+30, r25	; 0x1e
    1a88:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0c);  //display on , cursor on , blinking on
    1a8a:	8c e0       	ldi	r24, 0x0C	; 12
    1a8c:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_invidSendCommend>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e8       	ldi	r26, 0x80	; 128
    1a96:	bf e3       	ldi	r27, 0x3F	; 63
    1a98:	89 8f       	std	Y+25, r24	; 0x19
    1a9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa0:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	4a e7       	ldi	r20, 0x7A	; 122
    1aae:	53 e4       	ldi	r21, 0x43	; 67
    1ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8d 8b       	std	Y+21, r24	; 0x15
    1aba:	9e 8b       	std	Y+22, r25	; 0x16
    1abc:	af 8b       	std	Y+23, r26	; 0x17
    1abe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <LCD_enuInit+0x2aa>
		__ticks = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9c 8b       	std	Y+20, r25	; 0x14
    1ade:	8b 8b       	std	Y+19, r24	; 0x13
    1ae0:	3f c0       	rjmp	.+126    	; 0x1b60 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    1ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	3f ef       	ldi	r19, 0xFF	; 255
    1aee:	4f e7       	ldi	r20, 0x7F	; 127
    1af0:	57 e4       	ldi	r21, 0x47	; 71
    1af2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1af6:	18 16       	cp	r1, r24
    1af8:	4c f5       	brge	.+82     	; 0x1b4c <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afa:	69 8d       	ldd	r22, Y+25	; 0x19
    1afc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e2       	ldi	r20, 0x20	; 32
    1b08:	51 e4       	ldi	r21, 0x41	; 65
    1b0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9c 8b       	std	Y+20, r25	; 0x14
    1b20:	8b 8b       	std	Y+19, r24	; 0x13
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <LCD_enuInit+0x30a>
    1b24:	89 e1       	ldi	r24, 0x19	; 25
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9a 8b       	std	Y+18, r25	; 0x12
    1b2a:	89 8b       	std	Y+17, r24	; 0x11
    1b2c:	89 89       	ldd	r24, Y+17	; 0x11
    1b2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <LCD_enuInit+0x2f8>
    1b34:	9a 8b       	std	Y+18, r25	; 0x12
    1b36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b38:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	9c 8b       	std	Y+20, r25	; 0x14
    1b40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b42:	8b 89       	ldd	r24, Y+19	; 0x13
    1b44:	9c 89       	ldd	r25, Y+20	; 0x14
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	69 f7       	brne	.-38     	; 0x1b24 <LCD_enuInit+0x2ec>
    1b4a:	14 c0       	rjmp	.+40     	; 0x1b74 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b50:	8f 89       	ldd	r24, Y+23	; 0x17
    1b52:	98 8d       	ldd	r25, Y+24	; 0x18
    1b54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9c 8b       	std	Y+20, r25	; 0x14
    1b5e:	8b 8b       	std	Y+19, r24	; 0x13
    1b60:	8b 89       	ldd	r24, Y+19	; 0x13
    1b62:	9c 89       	ldd	r25, Y+20	; 0x14
    1b64:	98 8b       	std	Y+16, r25	; 0x10
    1b66:	8f 87       	std	Y+15, r24	; 0x0f
    1b68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6a:	98 89       	ldd	r25, Y+16	; 0x10
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_enuInit+0x334>
    1b70:	98 8b       	std	Y+16, r25	; 0x10
    1b72:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);  // Clear display
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_invidSendCommend>
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e4       	ldi	r27, 0x40	; 64
    1b82:	8b 87       	std	Y+11, r24	; 0x0b
    1b84:	9c 87       	std	Y+12, r25	; 0x0c
    1b86:	ad 87       	std	Y+13, r26	; 0x0d
    1b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	4a e7       	ldi	r20, 0x7A	; 122
    1b98:	53 e4       	ldi	r21, 0x43	; 67
    1b9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	8f 83       	std	Y+7, r24	; 0x07
    1ba4:	98 87       	std	Y+8, r25	; 0x08
    1ba6:	a9 87       	std	Y+9, r26	; 0x09
    1ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e8       	ldi	r20, 0x80	; 128
    1bb8:	5f e3       	ldi	r21, 0x3F	; 63
    1bba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bbe:	88 23       	and	r24, r24
    1bc0:	2c f4       	brge	.+10     	; 0x1bcc <LCD_enuInit+0x394>
		__ticks = 1;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
    1bca:	3f c0       	rjmp	.+126    	; 0x1c4a <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	3f ef       	ldi	r19, 0xFF	; 255
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	57 e4       	ldi	r21, 0x47	; 71
    1bdc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	4c f5       	brge	.+82     	; 0x1c36 <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e2       	ldi	r20, 0x20	; 32
    1bf2:	51 e4       	ldi	r21, 0x41	; 65
    1bf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	0f c0       	rjmp	.+30     	; 0x1c2c <LCD_enuInit+0x3f4>
    1c0e:	89 e1       	ldi	r24, 0x19	; 25
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_enuInit+0x3e2>
    1c1e:	9c 83       	std	Y+4, r25	; 0x04
    1c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	69 f7       	brne	.-38     	; 0x1c0e <LCD_enuInit+0x3d6>
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c36:	6f 81       	ldd	r22, Y+7	; 0x07
    1c38:	78 85       	ldd	r23, Y+8	; 0x08
    1c3a:	89 85       	ldd	r24, Y+9	; 0x09
    1c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <LCD_enuInit+0x41e>
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);  //write from left to write without shifting
    1c5e:	86 e0       	ldi	r24, 0x06	; 6
    1c60:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_invidSendCommend>

	return Local_enuErrorState;
    1c64:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1c66:	e9 96       	adiw	r28, 0x39	; 57
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <LCD_enuDisplayChar+0x6>
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c84:	19 82       	std	Y+1, r1	; 0x01
	//  Set RS as Data
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1c86:	82 e0       	ldi	r24, 0x02	; 2
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	41 e0       	ldi	r20, 0x01	; 1
    1c8c:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_vidLatch>

	return Local_enuErrorState;
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <LCD_enuWriteString>:




ES_t LCD_enuWriteString(u8 *Copy_PArrchars)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <LCD_enuWriteString+0x6>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <LCD_enuWriteString+0x8>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1cb2:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iter = 0;
    1cb4:	19 82       	std	Y+1, r1	; 0x01
    1cb6:	0e c0       	rjmp	.+28     	; 0x1cd4 <LCD_enuWriteString+0x32>
	while(Copy_PArrchars[Local_u8Iter] != '\0')
	{
		LCD_enuDisplayChar(Copy_PArrchars[Local_u8Iter]);
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	e2 0f       	add	r30, r18
    1cc6:	f3 1f       	adc	r31, r19
    1cc8:	80 81       	ld	r24, Z
    1cca:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <LCD_enuDisplayChar>
		Local_u8Iter++;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	8f 5f       	subi	r24, 0xFF	; 255
    1cd2:	89 83       	std	Y+1, r24	; 0x01
ES_t LCD_enuWriteString(u8 *Copy_PArrchars)
{
	ES_t Local_enuErrorState = ES_NOK;

	u8 Local_u8Iter = 0;
	while(Copy_PArrchars[Local_u8Iter] != '\0')
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	fc 01       	movw	r30, r24
    1ce0:	e2 0f       	add	r30, r18
    1ce2:	f3 1f       	adc	r31, r19
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 23       	and	r24, r24
    1ce8:	39 f7       	brne	.-50     	; 0x1cb8 <LCD_enuWriteString+0x16>
		LCD_enuDisplayChar(Copy_PArrchars[Local_u8Iter]);
		Local_u8Iter++;
	}


	return Local_enuErrorState ;
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <LCD_enuSendCommand+0x6>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1d06:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_vidLatch>


	return Local_enuErrorState;
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <LCD_ClearDisp>:

void LCD_ClearDisp()
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
	LCD_enuSendCommand(0x01);
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_enuSendCommand>
}
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <LCD_GOTO>:
void LCD_GOTO(u8 Row,u8 Col)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <LCD_GOTO+0x6>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <LCD_GOTO+0x8>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <LCD_GOTO+0xa>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	8d 83       	std	Y+5, r24	; 0x05
    1d48:	6e 83       	std	Y+6, r22	; 0x06
	u8 arr[4]={0x80,0xC0,0x90,0xD0};
    1d4a:	80 e8       	ldi	r24, 0x80	; 128
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	80 ec       	ldi	r24, 0xC0	; 192
    1d50:	8a 83       	std	Y+2, r24	; 0x02
    1d52:	80 e9       	ldi	r24, 0x90	; 144
    1d54:	8b 83       	std	Y+3, r24	; 0x03
    1d56:	80 ed       	ldi	r24, 0xD0	; 208
    1d58:	8c 83       	std	Y+4, r24	; 0x04
	LCD_enuSendCommand(arr[Row]+Col);
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	ce 01       	movw	r24, r28
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	fc 01       	movw	r30, r24
    1d66:	e2 0f       	add	r30, r18
    1d68:	f3 1f       	adc	r31, r19
    1d6a:	90 81       	ld	r25, Z
    1d6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d6e:	89 0f       	add	r24, r25
    1d70:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_enuSendCommand>
}
    1d74:	26 96       	adiw	r28, 0x06	; 6
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <LCD_enuCreatChar>:

ES_t LCD_enuCreatChar(u8* Copy_Au8NewChar, u8 Copy_u8Size, u8 Copy_u8StartPattern ){
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <LCD_enuCreatChar+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <LCD_enuCreatChar+0x8>
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <LCD_enuCreatChar+0xa>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9c 83       	std	Y+4, r25	; 0x04
    1d96:	8b 83       	std	Y+3, r24	; 0x03
    1d98:	6d 83       	std	Y+5, r22	; 0x05
    1d9a:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    1d9c:	1a 82       	std	Y+2, r1	; 0x02

	Local_enuErrorState = LCD_enuSendCommand(0x40 + (8*Copy_u8StartPattern));
    1d9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	08 96       	adiw	r24, 0x08	; 8
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_enuSendCommand>
    1db6:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iterator;

	for( Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8Size*8 ; ++Local_u8Iterator)
    1db8:	19 82       	std	Y+1, r1	; 0x01
    1dba:	0e c0       	rjmp	.+28     	; 0x1dd8 <LCD_enuCreatChar+0x52>
	{
		LCD_vidLatch(Copy_Au8NewChar[Local_u8Iterator]);
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	80 81       	ld	r24, Z
    1dce:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_vidLatch>

	Local_enuErrorState = LCD_enuSendCommand(0x40 + (8*Copy_u8StartPattern));

	u8 Local_u8Iterator;

	for( Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8Size*8 ; ++Local_u8Iterator)
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	28 17       	cp	r18, r24
    1df2:	39 07       	cpc	r19, r25
    1df4:	1c f3       	brlt	.-58     	; 0x1dbc <LCD_enuCreatChar+0x36>
	{
		LCD_vidLatch(Copy_Au8NewChar[Local_u8Iterator]);
	}
#if DISPLAY_DIRECTION == RIGHT_TO_LEFT
	LCD_enuSendCommand(0x80);
    1df6:	80 e8       	ldi	r24, 0x80	; 128
    1df8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_enuSendCommand>
	LCD_enuSendCommand(0x06);
    1dfc:	86 e0       	ldi	r24, 0x06	; 6
    1dfe:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_enuSendCommand>
	LCD_enuSendCommand(0x04);
#else
#error "Unsupported Display Direction"
#endif

	return Local_enuErrorState;
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e04:	26 96       	adiw	r28, 0x06	; 6
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <LCD_enuDisplayIntegerNum>:

ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	2b 97       	sbiw	r28, 0x0b	; 11
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	68 87       	std	Y+8, r22	; 0x08
    1e2c:	79 87       	std	Y+9, r23	; 0x09
    1e2e:	8a 87       	std	Y+10, r24	; 0x0a
    1e30:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    1e32:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    1e34:	1b 82       	std	Y+3, r1	; 0x03
    1e36:	1c 82       	std	Y+4, r1	; 0x04
    1e38:	1d 82       	std	Y+5, r1	; 0x05
    1e3a:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    1e3c:	1a 82       	std	Y+2, r1	; 0x02
    1e3e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    1e40:	88 85       	ldd	r24, Y+8	; 0x08
    1e42:	99 85       	ldd	r25, Y+9	; 0x09
    1e44:	aa 85       	ldd	r26, Y+10	; 0x0a
    1e46:	bb 85       	ldd	r27, Y+11	; 0x0b
    1e48:	bb 23       	and	r27, r27
    1e4a:	0c f0       	brlt	.+2      	; 0x1e4e <LCD_enuDisplayIntegerNum+0x38>
    1e4c:	57 c0       	rjmp	.+174    	; 0x1efc <LCD_enuDisplayIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    1e58:	8d e2       	ldi	r24, 0x2D	; 45
    1e5a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    1e5e:	88 85       	ldd	r24, Y+8	; 0x08
    1e60:	99 85       	ldd	r25, Y+9	; 0x09
    1e62:	aa 85       	ldd	r26, Y+10	; 0x0a
    1e64:	bb 85       	ldd	r27, Y+11	; 0x0b
    1e66:	b0 95       	com	r27
    1e68:	a0 95       	com	r26
    1e6a:	90 95       	com	r25
    1e6c:	81 95       	neg	r24
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	af 4f       	sbci	r26, 0xFF	; 255
    1e72:	bf 4f       	sbci	r27, 0xFF	; 255
    1e74:	88 87       	std	Y+8, r24	; 0x08
    1e76:	99 87       	std	Y+9, r25	; 0x09
    1e78:	aa 87       	std	Y+10, r26	; 0x0a
    1e7a:	bb 87       	std	Y+11, r27	; 0x0b
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <LCD_enuDisplayIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    1e7e:	88 85       	ldd	r24, Y+8	; 0x08
    1e80:	99 85       	ldd	r25, Y+9	; 0x09
    1e82:	aa 85       	ldd	r26, Y+10	; 0x0a
    1e84:	bb 85       	ldd	r27, Y+11	; 0x0b
    1e86:	2a e0       	ldi	r18, 0x0A	; 10
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__divmodsi4>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	ad 81       	ldd	r26, Y+5	; 0x05
    1ea2:	be 81       	ldd	r27, Y+6	; 0x06
    1ea4:	2a e0       	ldi	r18, 0x0A	; 10
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	50 e0       	ldi	r21, 0x00	; 0
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 bb 12 	call	0x2576	; 0x2576 <__mulsi3>
    1eb4:	9b 01       	movw	r18, r22
    1eb6:	ac 01       	movw	r20, r24
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a0 e0       	ldi	r26, 0x00	; 0
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	82 0f       	add	r24, r18
    1ec4:	93 1f       	adc	r25, r19
    1ec6:	a4 1f       	adc	r26, r20
    1ec8:	b5 1f       	adc	r27, r21
    1eca:	8b 83       	std	Y+3, r24	; 0x03
    1ecc:	9c 83       	std	Y+4, r25	; 0x04
    1ece:	ad 83       	std	Y+5, r26	; 0x05
    1ed0:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    1ed2:	88 85       	ldd	r24, Y+8	; 0x08
    1ed4:	99 85       	ldd	r25, Y+9	; 0x09
    1ed6:	aa 85       	ldd	r26, Y+10	; 0x0a
    1ed8:	bb 85       	ldd	r27, Y+11	; 0x0b
    1eda:	2a e0       	ldi	r18, 0x0A	; 10
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__divmodsi4>
    1eea:	da 01       	movw	r26, r20
    1eec:	c9 01       	movw	r24, r18
    1eee:	88 87       	std	Y+8, r24	; 0x08
    1ef0:	99 87       	std	Y+9, r25	; 0x09
    1ef2:	aa 87       	std	Y+10, r26	; 0x0a
    1ef4:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	8f 5f       	subi	r24, 0xFF	; 255
    1efa:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    1efc:	88 85       	ldd	r24, Y+8	; 0x08
    1efe:	99 85       	ldd	r25, Y+9	; 0x09
    1f00:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f02:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	a1 05       	cpc	r26, r1
    1f08:	b1 05       	cpc	r27, r1
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <LCD_enuDisplayIntegerNum+0xf8>
    1f0c:	b8 cf       	rjmp	.-144    	; 0x1e7e <LCD_enuDisplayIntegerNum+0x68>
    1f0e:	2d c0       	rjmp	.+90     	; 0x1f6a <LCD_enuDisplayIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	ad 81       	ldd	r26, Y+5	; 0x05
    1f16:	be 81       	ldd	r27, Y+6	; 0x06
    1f18:	2a e0       	ldi	r18, 0x0A	; 10
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__divmodsi4>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	80 5d       	subi	r24, 0xD0	; 208
    1f3c:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	ad 81       	ldd	r26, Y+5	; 0x05
    1f46:	be 81       	ldd	r27, Y+6	; 0x06
    1f48:	2a e0       	ldi	r18, 0x0A	; 10
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__divmodsi4>
    1f58:	da 01       	movw	r26, r20
    1f5a:	c9 01       	movw	r24, r18
    1f5c:	8b 83       	std	Y+3, r24	; 0x03
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	ad 83       	std	Y+5, r26	; 0x05
    1f62:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	81 50       	subi	r24, 0x01	; 1
    1f68:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	88 23       	and	r24, r24
    1f6e:	81 f6       	brne	.-96     	; 0x1f10 <LCD_enuDisplayIntegerNum+0xfa>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    1f70:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1f72:	2b 96       	adiw	r28, 0x0b	; 11
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <LCD_vidLatch>:


static void LCD_vidLatch(u8 Copy_u8Data)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	6d 97       	sbiw	r28, 0x1d	; 29
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1fae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	99 27       	eor	r25, r25
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	62 e0       	ldi	r22, 0x02	; 2
    1fbc:	49 2f       	mov	r20, r25
    1fbe:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1fc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc4:	82 95       	swap	r24
    1fc6:	86 95       	lsr	r24
    1fc8:	86 95       	lsr	r24
    1fca:	83 70       	andi	r24, 0x03	; 3
    1fcc:	98 2f       	mov	r25, r24
    1fce:	91 70       	andi	r25, 0x01	; 1
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	49 2f       	mov	r20, r25
    1fd6:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1fda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fdc:	82 95       	swap	r24
    1fde:	86 95       	lsr	r24
    1fe0:	87 70       	andi	r24, 0x07	; 7
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	91 70       	andi	r25, 0x01	; 1
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	49 2f       	mov	r20, r25
    1fec:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1ff0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff2:	82 95       	swap	r24
    1ff4:	8f 70       	andi	r24, 0x0F	; 15
    1ff6:	98 2f       	mov	r25, r24
    1ff8:	91 70       	andi	r25, 0x01	; 1
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	67 e0       	ldi	r22, 0x07	; 7
    1ffe:	49 2f       	mov	r20, r25
    2000:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    2004:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2006:	86 95       	lsr	r24
    2008:	86 95       	lsr	r24
    200a:	86 95       	lsr	r24
    200c:	98 2f       	mov	r25, r24
    200e:	91 70       	andi	r25, 0x01	; 1
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	66 e0       	ldi	r22, 0x06	; 6
    2014:	49 2f       	mov	r20, r25
    2016:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    201a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201c:	86 95       	lsr	r24
    201e:	86 95       	lsr	r24
    2020:	98 2f       	mov	r25, r24
    2022:	91 70       	andi	r25, 0x01	; 1
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	65 e0       	ldi	r22, 0x05	; 5
    2028:	49 2f       	mov	r20, r25
    202a:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    202e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2030:	86 95       	lsr	r24
    2032:	98 2f       	mov	r25, r24
    2034:	91 70       	andi	r25, 0x01	; 1
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	64 e0       	ldi	r22, 0x04	; 4
    203a:	49 2f       	mov	r20, r25
    203c:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    2040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2042:	98 2f       	mov	r25, r24
    2044:	91 70       	andi	r25, 0x01	; 1
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	63 e0       	ldi	r22, 0x03	; 3
    204a:	49 2f       	mov	r20, r25
    204c:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	62 e0       	ldi	r22, 0x02	; 2
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a0 e2       	ldi	r26, 0x20	; 32
    2060:	b1 e4       	ldi	r27, 0x41	; 65
    2062:	89 8f       	std	Y+25, r24	; 0x19
    2064:	9a 8f       	std	Y+26, r25	; 0x1a
    2066:	ab 8f       	std	Y+27, r26	; 0x1b
    2068:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206a:	69 8d       	ldd	r22, Y+25	; 0x19
    206c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    206e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2070:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a e7       	ldi	r20, 0x7A	; 122
    2078:	53 e4       	ldi	r21, 0x43	; 67
    207a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	8d 8b       	std	Y+21, r24	; 0x15
    2084:	9e 8b       	std	Y+22, r25	; 0x16
    2086:	af 8b       	std	Y+23, r26	; 0x17
    2088:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    208a:	6d 89       	ldd	r22, Y+21	; 0x15
    208c:	7e 89       	ldd	r23, Y+22	; 0x16
    208e:	8f 89       	ldd	r24, Y+23	; 0x17
    2090:	98 8d       	ldd	r25, Y+24	; 0x18
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    209e:	88 23       	and	r24, r24
    20a0:	2c f4       	brge	.+10     	; 0x20ac <LCD_vidLatch+0x128>
		__ticks = 1;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9c 8b       	std	Y+20, r25	; 0x14
    20a8:	8b 8b       	std	Y+19, r24	; 0x13
    20aa:	3f c0       	rjmp	.+126    	; 0x212a <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    20ac:	6d 89       	ldd	r22, Y+21	; 0x15
    20ae:	7e 89       	ldd	r23, Y+22	; 0x16
    20b0:	8f 89       	ldd	r24, Y+23	; 0x17
    20b2:	98 8d       	ldd	r25, Y+24	; 0x18
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	3f ef       	ldi	r19, 0xFF	; 255
    20b8:	4f e7       	ldi	r20, 0x7F	; 127
    20ba:	57 e4       	ldi	r21, 0x47	; 71
    20bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20c0:	18 16       	cp	r1, r24
    20c2:	4c f5       	brge	.+82     	; 0x2116 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c4:	69 8d       	ldd	r22, Y+25	; 0x19
    20c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	51 e4       	ldi	r21, 0x41	; 65
    20d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9c 8b       	std	Y+20, r25	; 0x14
    20ea:	8b 8b       	std	Y+19, r24	; 0x13
    20ec:	0f c0       	rjmp	.+30     	; 0x210c <LCD_vidLatch+0x188>
    20ee:	89 e1       	ldi	r24, 0x19	; 25
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9a 8b       	std	Y+18, r25	; 0x12
    20f4:	89 8b       	std	Y+17, r24	; 0x11
    20f6:	89 89       	ldd	r24, Y+17	; 0x11
    20f8:	9a 89       	ldd	r25, Y+18	; 0x12
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_vidLatch+0x176>
    20fe:	9a 8b       	std	Y+18, r25	; 0x12
    2100:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	8b 89       	ldd	r24, Y+19	; 0x13
    2104:	9c 89       	ldd	r25, Y+20	; 0x14
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	9c 8b       	std	Y+20, r25	; 0x14
    210a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210c:	8b 89       	ldd	r24, Y+19	; 0x13
    210e:	9c 89       	ldd	r25, Y+20	; 0x14
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	69 f7       	brne	.-38     	; 0x20ee <LCD_vidLatch+0x16a>
    2114:	14 c0       	rjmp	.+40     	; 0x213e <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2116:	6d 89       	ldd	r22, Y+21	; 0x15
    2118:	7e 89       	ldd	r23, Y+22	; 0x16
    211a:	8f 89       	ldd	r24, Y+23	; 0x17
    211c:	98 8d       	ldd	r25, Y+24	; 0x18
    211e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	9c 8b       	std	Y+20, r25	; 0x14
    2128:	8b 8b       	std	Y+19, r24	; 0x13
    212a:	8b 89       	ldd	r24, Y+19	; 0x13
    212c:	9c 89       	ldd	r25, Y+20	; 0x14
    212e:	98 8b       	std	Y+16, r25	; 0x10
    2130:	8f 87       	std	Y+15, r24	; 0x0f
    2132:	8f 85       	ldd	r24, Y+15	; 0x0f
    2134:	98 89       	ldd	r25, Y+16	; 0x10
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <LCD_vidLatch+0x1b2>
    213a:	98 8b       	std	Y+16, r25	; 0x10
    213c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	62 e0       	ldi	r22, 0x02	; 2
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a0 e2       	ldi	r26, 0x20	; 32
    214e:	b1 e4       	ldi	r27, 0x41	; 65
    2150:	8b 87       	std	Y+11, r24	; 0x0b
    2152:	9c 87       	std	Y+12, r25	; 0x0c
    2154:	ad 87       	std	Y+13, r26	; 0x0d
    2156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	6b 85       	ldd	r22, Y+11	; 0x0b
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a e7       	ldi	r20, 0x7A	; 122
    2166:	53 e4       	ldi	r21, 0x43	; 67
    2168:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8f 83       	std	Y+7, r24	; 0x07
    2172:	98 87       	std	Y+8, r25	; 0x08
    2174:	a9 87       	std	Y+9, r26	; 0x09
    2176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <LCD_vidLatch+0x216>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <LCD_vidLatch+0x276>
    21dc:	89 e1       	ldi	r24, 0x19	; 25
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_vidLatch+0x264>
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <LCD_vidLatch+0x258>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_vidLatch+0x2a0>
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    222c:	6d 96       	adiw	r28, 0x1d	; 29
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	2f 97       	sbiw	r28, 0x0f	; 15
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	61 e0       	ldi	r22, 0x01	; 1
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	62 e0       	ldi	r22, 0x02	; 2
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2272:	8f 85       	ldd	r24, Y+15	; 0x0f
    2274:	98 2f       	mov	r25, r24
    2276:	99 1f       	adc	r25, r25
    2278:	99 27       	eor	r25, r25
    227a:	99 1f       	adc	r25, r25
    227c:	83 e0       	ldi	r24, 0x03	; 3
    227e:	62 e0       	ldi	r22, 0x02	; 2
    2280:	49 2f       	mov	r20, r25
    2282:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2286:	8f 85       	ldd	r24, Y+15	; 0x0f
    2288:	82 95       	swap	r24
    228a:	86 95       	lsr	r24
    228c:	86 95       	lsr	r24
    228e:	83 70       	andi	r24, 0x03	; 3
    2290:	98 2f       	mov	r25, r24
    2292:	91 70       	andi	r25, 0x01	; 1
    2294:	83 e0       	ldi	r24, 0x03	; 3
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	49 2f       	mov	r20, r25
    229a:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    229e:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a0:	82 95       	swap	r24
    22a2:	86 95       	lsr	r24
    22a4:	87 70       	andi	r24, 0x07	; 7
    22a6:	98 2f       	mov	r25, r24
    22a8:	91 70       	andi	r25, 0x01	; 1
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	49 2f       	mov	r20, r25
    22b0:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    22b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b6:	82 95       	swap	r24
    22b8:	8f 70       	andi	r24, 0x0F	; 15
    22ba:	98 2f       	mov	r25, r24
    22bc:	91 70       	andi	r25, 0x01	; 1
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	67 e0       	ldi	r22, 0x07	; 7
    22c2:	49 2f       	mov	r20, r25
    22c4:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    22c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ca:	86 95       	lsr	r24
    22cc:	86 95       	lsr	r24
    22ce:	86 95       	lsr	r24
    22d0:	98 2f       	mov	r25, r24
    22d2:	91 70       	andi	r25, 0x01	; 1
    22d4:	82 e0       	ldi	r24, 0x02	; 2
    22d6:	66 e0       	ldi	r22, 0x06	; 6
    22d8:	49 2f       	mov	r20, r25
    22da:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    22de:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e0:	86 95       	lsr	r24
    22e2:	86 95       	lsr	r24
    22e4:	98 2f       	mov	r25, r24
    22e6:	91 70       	andi	r25, 0x01	; 1
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	65 e0       	ldi	r22, 0x05	; 5
    22ec:	49 2f       	mov	r20, r25
    22ee:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    22f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f4:	86 95       	lsr	r24
    22f6:	98 2f       	mov	r25, r24
    22f8:	91 70       	andi	r25, 0x01	; 1
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	64 e0       	ldi	r22, 0x04	; 4
    22fe:	49 2f       	mov	r20, r25
    2300:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    2304:	8f 85       	ldd	r24, Y+15	; 0x0f
    2306:	98 2f       	mov	r25, r24
    2308:	91 70       	andi	r25, 0x01	; 1
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	63 e0       	ldi	r22, 0x03	; 3
    230e:	49 2f       	mov	r20, r25
    2310:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	62 e0       	ldi	r22, 0x02	; 2
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 e2       	ldi	r26, 0x20	; 32
    2324:	b1 e4       	ldi	r27, 0x41	; 65
    2326:	8b 87       	std	Y+11, r24	; 0x0b
    2328:	9c 87       	std	Y+12, r25	; 0x0c
    232a:	ad 87       	std	Y+13, r26	; 0x0d
    232c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2330:	7c 85       	ldd	r23, Y+12	; 0x0c
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	9e 85       	ldd	r25, Y+14	; 0x0e
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a e7       	ldi	r20, 0x7A	; 122
    233c:	53 e4       	ldi	r21, 0x43	; 67
    233e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8f 83       	std	Y+7, r24	; 0x07
    2348:	98 87       	std	Y+8, r25	; 0x08
    234a:	a9 87       	std	Y+9, r26	; 0x09
    234c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	6b 85       	ldd	r22, Y+11	; 0x0b
    238a:	7c 85       	ldd	r23, Y+12	; 0x0c
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_invidSendCommend+0x192>
    23b2:	89 e1       	ldi	r24, 0x19	; 25
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_invidSendCommend+0x180>
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <LCD_invidSendCommend+0x174>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_invidSendCommend+0x1bc>
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2402:	82 e0       	ldi	r24, 0x02	; 2
    2404:	62 e0       	ldi	r22, 0x02	; 2
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_enuSetPinValue>
}
    240c:	2f 96       	adiw	r28, 0x0f	; 15
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <main>:

#include "util/delay.h"

extern LM_t LM_ArrStr[LM_NUM];
int main(void)
{
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	62 97       	sbiw	r28, 0x12	; 18
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
	DIO_enuInit();
    2432:	0e 94 48 06 	call	0xc90	; 0xc90 <DIO_enuInit>
	LCD_enuInit();
    2436:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_enuInit>
	LM_enuInit(LM_ArrStr);
    243a:	86 e7       	ldi	r24, 0x76	; 118
    243c:	91 e0       	ldi	r25, 0x01	; 1
    243e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LM_enuInit>
	LCD_GOTO(0,1);
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	61 e0       	ldi	r22, 0x01	; 1
    2446:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_GOTO>
	LCD_enuWriteString("TEMP = ");
    244a:	80 e6       	ldi	r24, 0x60	; 96
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <LCD_enuWriteString>
	s32 read;
	while(1)
	{
		LM_enuGetTemp(&read,&LM_ArrStr[0]);
    2452:	ce 01       	movw	r24, r28
    2454:	0f 96       	adiw	r24, 0x0f	; 15
    2456:	26 e7       	ldi	r18, 0x76	; 118
    2458:	31 e0       	ldi	r19, 0x01	; 1
    245a:	b9 01       	movw	r22, r18
    245c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LM_enuGetTemp>
		LCD_GOTO(0,8);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	68 e0       	ldi	r22, 0x08	; 8
    2464:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_GOTO>
		LCD_enuDisplayIntegerNum(read);
    2468:	8f 85       	ldd	r24, Y+15	; 0x0f
    246a:	98 89       	ldd	r25, Y+16	; 0x10
    246c:	a9 89       	ldd	r26, Y+17	; 0x11
    246e:	ba 89       	ldd	r27, Y+18	; 0x12
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_enuDisplayIntegerNum>
		LCD_enuWriteString("C");
    2478:	88 e6       	ldi	r24, 0x68	; 104
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <LCD_enuWriteString>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	aa e7       	ldi	r26, 0x7A	; 122
    2486:	b4 e4       	ldi	r27, 0x44	; 68
    2488:	8b 87       	std	Y+11, r24	; 0x0b
    248a:	9c 87       	std	Y+12, r25	; 0x0c
    248c:	ad 87       	std	Y+13, r26	; 0x0d
    248e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	6b 85       	ldd	r22, Y+11	; 0x0b
    2492:	7c 85       	ldd	r23, Y+12	; 0x0c
    2494:	8d 85       	ldd	r24, Y+13	; 0x0d
    2496:	9e 85       	ldd	r25, Y+14	; 0x0e
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4a e7       	ldi	r20, 0x7A	; 122
    249e:	53 e4       	ldi	r21, 0x43	; 67
    24a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8f 83       	std	Y+7, r24	; 0x07
    24aa:	98 87       	std	Y+8, r25	; 0x08
    24ac:	a9 87       	std	Y+9, r26	; 0x09
    24ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	2c f4       	brge	.+10     	; 0x24d2 <main+0xb4>
		__ticks = 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	3f c0       	rjmp	.+126    	; 0x2550 <main+0x132>
	else if (__tmp > 65535)
    24d2:	6f 81       	ldd	r22, Y+7	; 0x07
    24d4:	78 85       	ldd	r23, Y+8	; 0x08
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	57 e4       	ldi	r21, 0x47	; 71
    24e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	4c f5       	brge	.+82     	; 0x253c <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	8d 83       	std	Y+5, r24	; 0x05
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <main+0x114>
    2514:	89 e1       	ldi	r24, 0x19	; 25
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9c 83       	std	Y+4, r25	; 0x04
    251a:	8b 83       	std	Y+3, r24	; 0x03
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	9c 81       	ldd	r25, Y+4	; 0x04
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <main+0x102>
    2524:	9c 83       	std	Y+4, r25	; 0x04
    2526:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	9e 83       	std	Y+6, r25	; 0x06
    2530:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	69 f7       	brne	.-38     	; 0x2514 <main+0xf6>
    253a:	14 c0       	rjmp	.+40     	; 0x2564 <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	9a 81       	ldd	r25, Y+2	; 0x02
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <main+0x13e>
    2560:	9a 83       	std	Y+2, r25	; 0x02
    2562:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_GOTO(0,8);
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	68 e0       	ldi	r22, 0x08	; 8
    2568:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_GOTO>
		LCD_enuWriteString("   ");
    256c:	8a e6       	ldi	r24, 0x6A	; 106
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <LCD_enuWriteString>
    2574:	6e cf       	rjmp	.-292    	; 0x2452 <main+0x34>

00002576 <__mulsi3>:
    2576:	62 9f       	mul	r22, r18
    2578:	d0 01       	movw	r26, r0
    257a:	73 9f       	mul	r23, r19
    257c:	f0 01       	movw	r30, r0
    257e:	82 9f       	mul	r24, r18
    2580:	e0 0d       	add	r30, r0
    2582:	f1 1d       	adc	r31, r1
    2584:	64 9f       	mul	r22, r20
    2586:	e0 0d       	add	r30, r0
    2588:	f1 1d       	adc	r31, r1
    258a:	92 9f       	mul	r25, r18
    258c:	f0 0d       	add	r31, r0
    258e:	83 9f       	mul	r24, r19
    2590:	f0 0d       	add	r31, r0
    2592:	74 9f       	mul	r23, r20
    2594:	f0 0d       	add	r31, r0
    2596:	65 9f       	mul	r22, r21
    2598:	f0 0d       	add	r31, r0
    259a:	99 27       	eor	r25, r25
    259c:	72 9f       	mul	r23, r18
    259e:	b0 0d       	add	r27, r0
    25a0:	e1 1d       	adc	r30, r1
    25a2:	f9 1f       	adc	r31, r25
    25a4:	63 9f       	mul	r22, r19
    25a6:	b0 0d       	add	r27, r0
    25a8:	e1 1d       	adc	r30, r1
    25aa:	f9 1f       	adc	r31, r25
    25ac:	bd 01       	movw	r22, r26
    25ae:	cf 01       	movw	r24, r30
    25b0:	11 24       	eor	r1, r1
    25b2:	08 95       	ret

000025b4 <__divmodsi4>:
    25b4:	97 fb       	bst	r25, 7
    25b6:	09 2e       	mov	r0, r25
    25b8:	05 26       	eor	r0, r21
    25ba:	0e d0       	rcall	.+28     	; 0x25d8 <__divmodsi4_neg1>
    25bc:	57 fd       	sbrc	r21, 7
    25be:	04 d0       	rcall	.+8      	; 0x25c8 <__divmodsi4_neg2>
    25c0:	14 d0       	rcall	.+40     	; 0x25ea <__udivmodsi4>
    25c2:	0a d0       	rcall	.+20     	; 0x25d8 <__divmodsi4_neg1>
    25c4:	00 1c       	adc	r0, r0
    25c6:	38 f4       	brcc	.+14     	; 0x25d6 <__divmodsi4_exit>

000025c8 <__divmodsi4_neg2>:
    25c8:	50 95       	com	r21
    25ca:	40 95       	com	r20
    25cc:	30 95       	com	r19
    25ce:	21 95       	neg	r18
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	4f 4f       	sbci	r20, 0xFF	; 255
    25d4:	5f 4f       	sbci	r21, 0xFF	; 255

000025d6 <__divmodsi4_exit>:
    25d6:	08 95       	ret

000025d8 <__divmodsi4_neg1>:
    25d8:	f6 f7       	brtc	.-4      	; 0x25d6 <__divmodsi4_exit>
    25da:	90 95       	com	r25
    25dc:	80 95       	com	r24
    25de:	70 95       	com	r23
    25e0:	61 95       	neg	r22
    25e2:	7f 4f       	sbci	r23, 0xFF	; 255
    25e4:	8f 4f       	sbci	r24, 0xFF	; 255
    25e6:	9f 4f       	sbci	r25, 0xFF	; 255
    25e8:	08 95       	ret

000025ea <__udivmodsi4>:
    25ea:	a1 e2       	ldi	r26, 0x21	; 33
    25ec:	1a 2e       	mov	r1, r26
    25ee:	aa 1b       	sub	r26, r26
    25f0:	bb 1b       	sub	r27, r27
    25f2:	fd 01       	movw	r30, r26
    25f4:	0d c0       	rjmp	.+26     	; 0x2610 <__udivmodsi4_ep>

000025f6 <__udivmodsi4_loop>:
    25f6:	aa 1f       	adc	r26, r26
    25f8:	bb 1f       	adc	r27, r27
    25fa:	ee 1f       	adc	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	a2 17       	cp	r26, r18
    2600:	b3 07       	cpc	r27, r19
    2602:	e4 07       	cpc	r30, r20
    2604:	f5 07       	cpc	r31, r21
    2606:	20 f0       	brcs	.+8      	; 0x2610 <__udivmodsi4_ep>
    2608:	a2 1b       	sub	r26, r18
    260a:	b3 0b       	sbc	r27, r19
    260c:	e4 0b       	sbc	r30, r20
    260e:	f5 0b       	sbc	r31, r21

00002610 <__udivmodsi4_ep>:
    2610:	66 1f       	adc	r22, r22
    2612:	77 1f       	adc	r23, r23
    2614:	88 1f       	adc	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	1a 94       	dec	r1
    261a:	69 f7       	brne	.-38     	; 0x25f6 <__udivmodsi4_loop>
    261c:	60 95       	com	r22
    261e:	70 95       	com	r23
    2620:	80 95       	com	r24
    2622:	90 95       	com	r25
    2624:	9b 01       	movw	r18, r22
    2626:	ac 01       	movw	r20, r24
    2628:	bd 01       	movw	r22, r26
    262a:	cf 01       	movw	r24, r30
    262c:	08 95       	ret

0000262e <__prologue_saves__>:
    262e:	2f 92       	push	r2
    2630:	3f 92       	push	r3
    2632:	4f 92       	push	r4
    2634:	5f 92       	push	r5
    2636:	6f 92       	push	r6
    2638:	7f 92       	push	r7
    263a:	8f 92       	push	r8
    263c:	9f 92       	push	r9
    263e:	af 92       	push	r10
    2640:	bf 92       	push	r11
    2642:	cf 92       	push	r12
    2644:	df 92       	push	r13
    2646:	ef 92       	push	r14
    2648:	ff 92       	push	r15
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	ca 1b       	sub	r28, r26
    2658:	db 0b       	sbc	r29, r27
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	09 94       	ijmp

00002666 <__epilogue_restores__>:
    2666:	2a 88       	ldd	r2, Y+18	; 0x12
    2668:	39 88       	ldd	r3, Y+17	; 0x11
    266a:	48 88       	ldd	r4, Y+16	; 0x10
    266c:	5f 84       	ldd	r5, Y+15	; 0x0f
    266e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2670:	7d 84       	ldd	r7, Y+13	; 0x0d
    2672:	8c 84       	ldd	r8, Y+12	; 0x0c
    2674:	9b 84       	ldd	r9, Y+11	; 0x0b
    2676:	aa 84       	ldd	r10, Y+10	; 0x0a
    2678:	b9 84       	ldd	r11, Y+9	; 0x09
    267a:	c8 84       	ldd	r12, Y+8	; 0x08
    267c:	df 80       	ldd	r13, Y+7	; 0x07
    267e:	ee 80       	ldd	r14, Y+6	; 0x06
    2680:	fd 80       	ldd	r15, Y+5	; 0x05
    2682:	0c 81       	ldd	r16, Y+4	; 0x04
    2684:	1b 81       	ldd	r17, Y+3	; 0x03
    2686:	aa 81       	ldd	r26, Y+2	; 0x02
    2688:	b9 81       	ldd	r27, Y+1	; 0x01
    268a:	ce 0f       	add	r28, r30
    268c:	d1 1d       	adc	r29, r1
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	ed 01       	movw	r28, r26
    269a:	08 95       	ret

0000269c <_exit>:
    269c:	f8 94       	cli

0000269e <__stop_program>:
    269e:	ff cf       	rjmp	.-2      	; 0x269e <__stop_program>
